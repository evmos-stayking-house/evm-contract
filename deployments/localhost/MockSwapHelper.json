{
  "address": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "swap_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "name": "getDx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "getDy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swap",
      "outputs": [
        {
          "internalType": "contract MockSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa028b11bd9e087e179ab0c2e0921fb2b028b1781495bafc16b17325dcff92b2d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
    "transactionIndex": 0,
    "gasUsed": "820240",
    "logsBloom": "0x
    "blockHash": "0xec2e64cda16a2e9604b905e28aadc0fafc3f2677c8a60101c3d0897683ef26b3",
    "transactionHash": "0xa028b11bd9e087e179ab0c2e0921fb2b028b1781495bafc16b17325dcff92b2d",
    "logs": [],
    "blockNumber": 20,
    "cumulativeGasUsed": "820240",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68B1D87F95878fE05B998F19b66F4baba5De1aed"
  ],
  "numDeployments": 1,
  "solcInputHash": "ac64ae704e2e452e414a3e4f234c9225",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"swap_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"name\":\"getDx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"getDy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"contract MockSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/MockSwapHelper.sol\":\"MockSwapHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/ISwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/************************************************************\\n * @dev\\n * Glossary\\n * X : Input Token\\n * Y : Output Token\\n * Dx : Amount of Input Token\\n * Dy : Amount of Output Token\\n *************************************************************/\\ninterface ISwapHelper {\\n\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) external view returns (uint256 dy);\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) external view returns (uint256 dx);\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 minDy\\n    ) payable external returns (uint256 dy);\\n}\",\"keccak256\":\"0xe085ce8733ebf477156c5859b597770ce042a1bc6f7fd04bf6d2055df3d88708\",\"license\":\"UNLICENSED\"},\"contracts/lib/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9e8a7188d698eea914eb3d07817fc539bdc152bee0b66567b6e911fd3293ce8d\",\"license\":\"MIT\"},\"contracts/lib/utils/SafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary SafeToken {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeApprove\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransfer\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransferFrom\\\"\\n        );\\n    }\\n\\n    function safeTransferEVMOS(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"!safeTransferEVMOS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3673f957556a65d32c0b4fca4aafcb2decf960c9a064b5008c1a43acd5f11ca5\",\"license\":\"MIT\"},\"contracts/mock/MockSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"../lib/interface/IERC20.sol\\\";\\nimport \\\"../lib/utils/SafeToken.sol\\\";\\n\\n\\ncontract MockSwap {\\n    \\n    /**\\n        @dev \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub294 \\ub85c\\uceec \\ub178\\ub4dc \\ubc30\\ud3ec\\uc6a9 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c,\\n        EvmoSwapRouter\\uacfc \\uc720\\uc0ac\\ud55c \\uc5ed\\ud560\\uc744 \\ud558\\ub294 DEX\\ub77c\\uace0 \\uc0dd\\uac01\\ud558\\uba74 \\ub429\\ub2c8\\ub2e4.\\n\\n        native token(EVMOS)\\uacfc \\ub098\\uba38\\uc9c0 \\ubaa8\\ub4e0 \\ud1a0\\ud070\\uc758 \\uad50\\ud658\\ube44\\ub294 \\uc784\\uc758\\ub85c 1: 2\\ub77c\\uace0 \\ub193\\uc558\\uc2b5\\ub2c8\\ub2e4.\\n        (EVMOS\\uc758 \\uac00\\uce58 = \\ub2e4\\ub978 \\ud1a0\\ud070\\uc758 \\uac00\\uce58 * 2)\\n\\n        TODO \\ubc30\\ud3ec \\ud6c4 \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c \\uc720\\ub3d9\\uc131 \\ucd94\\uac00\\ud574 \\uc8fc\\uc5b4\\uc57c \\ud568.\\n        ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);\\n     */\\n\\n    mapping(address => bool) public isSupported;\\n\\n    constructor (\\n        address[] memory tokens\\n    ){\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            isSupported[tokens[i]] = true;\\n        }\\n    }\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) public pure returns (uint256) {\\n        if(tokenX == address(0))\\n            return dy / 2;\\n        else if(tokenY == address(0))\\n            return dy * 2;\\n        else\\n            return dy;\\n    }\\n\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) public pure returns (uint256) {\\n        if(tokenX == address(0))\\n            return dx * 2;\\n        else if(tokenY == address(0))\\n            return dx / 2;\\n        else\\n            return dx;\\n    }\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 /* minDy */\\n    ) public payable returns(uint256 dy) {\\n        if(tokenX == address(0)){\\n            require(msg.value == dx, \\\"MockSwap: msg.value != dx\\\");\\n        } else {\\n            SafeToken.safeTransferFrom(tokenX, msg.sender, address(this), dx);\\n        }\\n\\n        dy = getDy(tokenX, tokenY, dx);\\n        if(tokenY == address(0)){\\n            SafeToken.safeTransferEVMOS(msg.sender, dy);\\n        } else {\\n            SafeToken.safeTransfer(tokenY, msg.sender, dy);\\n        }\\n    }\\n\\n    /// @dev Fallback function to accept EVMOS.\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x312bbedcd5991706bdff79e12919474c987eb82d7ec34379dac16399e8cb0e3b\",\"license\":\"UNLICENSED\"},\"contracts/mock/MockSwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interface/ISwapHelper.sol\\\";\\nimport \\\"./MockSwap.sol\\\";\\n\\n\\ncontract MockSwapHelper is ISwapHelper {\\n\\n    MockSwap public swap;\\n    constructor(address payable swap_){\\n        swap = MockSwap(swap_);\\n    }\\n\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) public override view returns (uint256 dy) {\\n        return swap.getDy(tokenX, tokenY, dx);\\n    }\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) public override view returns (uint256 dx) {\\n        return swap.getDx(tokenX, tokenY, dy);\\n    }\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 minDy\\n    ) public payable override returns (uint256 dy){\\n        if(tokenX == address(0)){\\n            require(msg.value == dx, \\\"MockSwap: msg.value != dx\\\");\\n        } else {\\n            SafeToken.safeTransferFrom(tokenX, msg.sender, address(this), dx);\\n        }\\n\\n        dy = swap.exchange(tokenX, tokenY, dx, minDy);\\n\\n        if(tokenY == address(0)){\\n            SafeToken.safeTransferEVMOS(msg.sender, dy);\\n        } else {\\n            SafeToken.safeTransfer(tokenY, msg.sender, dy);\\n        }\\n    }\\n}\",\"keccak256\":\"0x4d2dea5b85fdeeb8b41ca08855b3a46e484e5b9ff0cf4802d4611915bee7d10e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610e80380380610e808339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b610d728061010e6000396000f3fe60806040526004361061003f5760003560e01c80630ed2fc95146100445780634f119bbd146100745780637dceefee146100b15780638119c065146100ee575b600080fd5b61005e6004803603810190610059919061087c565b610119565b60405161006b9190610b72565b60405180910390f35b34801561008057600080fd5b5061009b6004803603810190610096919061082d565b6102ae565b6040516100a89190610b72565b60405180910390f35b3480156100bd57600080fd5b506100d860048036038101906100d3919061082d565b610367565b6040516100e59190610b72565b60405180910390f35b3480156100fa57600080fd5b50610103610420565b6040516101109190610ad7565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561019657823414610191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610b32565b60405180910390fd5b6101a3565b6101a285333086610444565b5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ed2fc95868686866040518563ffffffff1660e01b81526004016102029493929190610a69565b602060405180830381600087803b15801561021c57600080fd5b505af1158015610230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102549190610908565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561029a57610295338261057d565b6102a6565b6102a58433836106a3565b5b949350505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f119bbd8585856040518463ffffffff1660e01b815260040161030e93929190610a32565b60206040518083038186803b15801561032657600080fd5b505afa15801561033a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035e9190610908565b90509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637dceefee8585856040518463ffffffff1660e01b81526004016103c793929190610a32565b60206040518083038186803b1580156103df57600080fd5b505afa1580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104179190610908565b90509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161047893929190610a32565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104c69190610a1b565b6000604051808303816000865af19150503d8060008114610503576040519150601f19603f3d011682016040523d82523d6000602084013e610508565b606091505b5091509150818015610536575060008151148061053557508080602001905181019061053491906108df565b5b5b610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c90610b52565b60405180910390fd5b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156105d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561060a5781602001600182028036833780820191505090505b506040516106189190610a1b565b60006040518083038185875af1925050503d8060008114610655576040519150601f19603f3d011682016040523d82523d6000602084013e61065a565b606091505b505090508061069e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069590610af2565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016106d5929190610aae565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107239190610a1b565b6000604051808303816000865af19150503d8060008114610760576040519150601f19603f3d011682016040523d82523d6000602084013e610765565b606091505b5091509150818015610793575060008151148061079257508080602001905181019061079191906108df565b5b5b6107d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c990610b12565b60405180910390fd5b5050505050565b6000813590506107e881610cf7565b92915050565b6000815190506107fd81610d0e565b92915050565b60008135905061081281610d25565b92915050565b60008151905061082781610d25565b92915050565b60008060006060848603121561084257600080fd5b6000610850868287016107d9565b9350506020610861868287016107d9565b925050604061087286828701610803565b9150509250925092565b6000806000806080858703121561089257600080fd5b60006108a0878288016107d9565b94505060206108b1878288016107d9565b93505060406108c287828801610803565b92505060606108d387828801610803565b91505092959194509250565b6000602082840312156108f157600080fd5b60006108ff848285016107ee565b91505092915050565b60006020828403121561091a57600080fd5b600061092884828501610818565b91505092915050565b61093a81610bb4565b82525050565b600061094b82610b8d565b6109558185610b98565b9350610965818560208601610c20565b80840191505092915050565b61097a81610bfc565b82525050565b600061098d601283610ba3565b915061099882610c53565b602082019050919050565b60006109b0600d83610ba3565b91506109bb82610c7c565b602082019050919050565b60006109d3601983610ba3565b91506109de82610ca5565b602082019050919050565b60006109f6601183610ba3565b9150610a0182610cce565b602082019050919050565b610a1581610bf2565b82525050565b6000610a278284610940565b915081905092915050565b6000606082019050610a476000830186610931565b610a546020830185610931565b610a616040830184610a0c565b949350505050565b6000608082019050610a7e6000830187610931565b610a8b6020830186610931565b610a986040830185610a0c565b610aa56060830184610a0c565b95945050505050565b6000604082019050610ac36000830185610931565b610ad06020830184610a0c565b9392505050565b6000602082019050610aec6000830184610971565b92915050565b60006020820190508181036000830152610b0b81610980565b9050919050565b60006020820190508181036000830152610b2b816109a3565b9050919050565b60006020820190508181036000830152610b4b816109c6565b9050919050565b60006020820190508181036000830152610b6b816109e9565b9050919050565b6000602082019050610b876000830184610a0c565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610bbf82610bd2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c0782610c0e565b9050919050565b6000610c1982610bd2565b9050919050565b60005b83811015610c3e578082015181840152602081019050610c23565b83811115610c4d576000848401525b50505050565b7f21736166655472616e7366657245564d4f530000000000000000000000000000600082015250565b7f21736166655472616e7366657200000000000000000000000000000000000000600082015250565b7f4d6f636b537761703a206d73672e76616c756520213d20647800000000000000600082015250565b7f21736166655472616e7366657246726f6d000000000000000000000000000000600082015250565b610d0081610bb4565b8114610d0b57600080fd5b50565b610d1781610bc6565b8114610d2257600080fd5b50565b610d2e81610bf2565b8114610d3957600080fd5b5056fea2646970667358221220428f72404333512a9b633f441769b3e0308e14728ab5e5d570c815aed8d961bd64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80630ed2fc95146100445780634f119bbd146100745780637dceefee146100b15780638119c065146100ee575b600080fd5b61005e6004803603810190610059919061087c565b610119565b60405161006b9190610b72565b60405180910390f35b34801561008057600080fd5b5061009b6004803603810190610096919061082d565b6102ae565b6040516100a89190610b72565b60405180910390f35b3480156100bd57600080fd5b506100d860048036038101906100d3919061082d565b610367565b6040516100e59190610b72565b60405180910390f35b3480156100fa57600080fd5b50610103610420565b6040516101109190610ad7565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561019657823414610191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610b32565b60405180910390fd5b6101a3565b6101a285333086610444565b5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ed2fc95868686866040518563ffffffff1660e01b81526004016102029493929190610a69565b602060405180830381600087803b15801561021c57600080fd5b505af1158015610230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102549190610908565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561029a57610295338261057d565b6102a6565b6102a58433836106a3565b5b949350505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f119bbd8585856040518463ffffffff1660e01b815260040161030e93929190610a32565b60206040518083038186803b15801561032657600080fd5b505afa15801561033a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035e9190610908565b90509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637dceefee8585856040518463ffffffff1660e01b81526004016103c793929190610a32565b60206040518083038186803b1580156103df57600080fd5b505afa1580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104179190610908565b90509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161047893929190610a32565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104c69190610a1b565b6000604051808303816000865af19150503d8060008114610503576040519150601f19603f3d011682016040523d82523d6000602084013e610508565b606091505b5091509150818015610536575060008151148061053557508080602001905181019061053491906108df565b5b5b610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c90610b52565b60405180910390fd5b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156105d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561060a5781602001600182028036833780820191505090505b506040516106189190610a1b565b60006040518083038185875af1925050503d8060008114610655576040519150601f19603f3d011682016040523d82523d6000602084013e61065a565b606091505b505090508061069e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069590610af2565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016106d5929190610aae565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107239190610a1b565b6000604051808303816000865af19150503d8060008114610760576040519150601f19603f3d011682016040523d82523d6000602084013e610765565b606091505b5091509150818015610793575060008151148061079257508080602001905181019061079191906108df565b5b5b6107d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c990610b12565b60405180910390fd5b5050505050565b6000813590506107e881610cf7565b92915050565b6000815190506107fd81610d0e565b92915050565b60008135905061081281610d25565b92915050565b60008151905061082781610d25565b92915050565b60008060006060848603121561084257600080fd5b6000610850868287016107d9565b9350506020610861868287016107d9565b925050604061087286828701610803565b9150509250925092565b6000806000806080858703121561089257600080fd5b60006108a0878288016107d9565b94505060206108b1878288016107d9565b93505060406108c287828801610803565b92505060606108d387828801610803565b91505092959194509250565b6000602082840312156108f157600080fd5b60006108ff848285016107ee565b91505092915050565b60006020828403121561091a57600080fd5b600061092884828501610818565b91505092915050565b61093a81610bb4565b82525050565b600061094b82610b8d565b6109558185610b98565b9350610965818560208601610c20565b80840191505092915050565b61097a81610bfc565b82525050565b600061098d601283610ba3565b915061099882610c53565b602082019050919050565b60006109b0600d83610ba3565b91506109bb82610c7c565b602082019050919050565b60006109d3601983610ba3565b91506109de82610ca5565b602082019050919050565b60006109f6601183610ba3565b9150610a0182610cce565b602082019050919050565b610a1581610bf2565b82525050565b6000610a278284610940565b915081905092915050565b6000606082019050610a476000830186610931565b610a546020830185610931565b610a616040830184610a0c565b949350505050565b6000608082019050610a7e6000830187610931565b610a8b6020830186610931565b610a986040830185610a0c565b610aa56060830184610a0c565b95945050505050565b6000604082019050610ac36000830185610931565b610ad06020830184610a0c565b9392505050565b6000602082019050610aec6000830184610971565b92915050565b60006020820190508181036000830152610b0b81610980565b9050919050565b60006020820190508181036000830152610b2b816109a3565b9050919050565b60006020820190508181036000830152610b4b816109c6565b9050919050565b60006020820190508181036000830152610b6b816109e9565b9050919050565b6000602082019050610b876000830184610a0c565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610bbf82610bd2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c0782610c0e565b9050919050565b6000610c1982610bd2565b9050919050565b60005b83811015610c3e578082015181840152602081019050610c23565b83811115610c4d576000848401525b50505050565b7f21736166655472616e7366657245564d4f530000000000000000000000000000600082015250565b7f21736166655472616e7366657200000000000000000000000000000000000000600082015250565b7f4d6f636b537761703a206d73672e76616c756520213d20647800000000000000600082015250565b7f21736166655472616e7366657246726f6d000000000000000000000000000000600082015250565b610d0081610bb4565b8114610d0b57600080fd5b50565b610d1781610bc6565b8114610d2257600080fd5b50565b610d2e81610bf2565b8114610d3957600080fd5b5056fea2646970667358221220428f72404333512a9b633f441769b3e0308e14728ab5e5d570c815aed8d961bd64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1970,
        "contract": "contracts/mock/MockSwapHelper.sol:MockSwapHelper",
        "label": "swap",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(MockSwap)1961"
      }
    ],
    "types": {
      "t_contract(MockSwap)1961": {
        "encoding": "inplace",
        "label": "contract MockSwap",
        "numberOfBytes": "20"
      }
    }
  }
}