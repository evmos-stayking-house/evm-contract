{
  "address": "0x09635F643e140090A9A8Dcd712eD6285858ceBef",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        }
      ],
      "name": "Loan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidInterest",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leftInterest",
          "type": "uint256"
        }
      ],
      "name": "PayInterest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferDebtOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rateBps",
          "type": "uint256"
        }
      ],
      "name": "UtilizationRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stayking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestModel",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minReservedBps",
          "type": "uint256"
        }
      ],
      "name": "__Vault_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "amountToShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "calcPendingDebtInBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestModel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "loan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payInterest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "instantRepayment",
          "type": "uint256"
        }
      ],
      "name": "pendRepay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pendingDebtAmountToShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingDebtShareOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "pendingDebtShareToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minRepaidDebt",
          "type": "uint256"
        }
      ],
      "name": "repayPendingDebt",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saveUtilizationRateBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "shareToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stayking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapHelper",
      "outputs": [
        {
          "internalType": "contract ISwapHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "takeDebtOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebtAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinReservedBps",
          "type": "uint256"
        }
      ],
      "name": "updateMinReservedBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStaykingAddress",
          "type": "address"
        }
      ],
      "name": "updateStayking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilizationRateBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x52ddd27803812518de12173e426bd875b0ae295fd93edf1f28da50e6b343787a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x09635F643e140090A9A8Dcd712eD6285858ceBef",
    "transactionIndex": 0,
    "gasUsed": "3933148",
    "logsBloom": "0x
    "blockHash": "0x187d63550ac34d8d8c04232c8281156985fa6af00cfd3365c927aa89882d2e8c",
    "transactionHash": "0x52ddd27803812518de12173e426bd875b0ae295fd93edf1f28da50e6b343787a",
    "logs": [],
    "blockNumber": 29,
    "cumulativeGasUsed": "3933148",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ac64ae704e2e452e414a3e4f234c9225",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"name\":\"Loan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leftInterest\",\"type\":\"uint256\"}],\"name\":\"PayInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferDebtOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateBps\",\"type\":\"uint256\"}],\"name\":\"UtilizationRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stayking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestModel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minReservedBps\",\"type\":\"uint256\"}],\"name\":\"__Vault_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"amountToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calcPendingDebtInBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"loan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payInterest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"instantRepayment\",\"type\":\"uint256\"}],\"name\":\"pendRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pendingDebtAmountToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingDebtShareOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"pendingDebtShareToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRepaidDebt\",\"type\":\"uint256\"}],\"name\":\"repayPendingDebt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveUtilizationRateBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"shareToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stayking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapHelper\",\"outputs\":[{\"internalType\":\"contract ISwapHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeDebtOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinReservedBps\",\"type\":\"uint256\"}],\"name\":\"updateMinReservedBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStaykingAddress\",\"type\":\"address\"}],\"name\":\"updateStayking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilizationRateBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getInterestRate()\":{\"details\":\"denominator = 1E18 \"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendRepay(address,uint256)\":{\"details\":\"pending repay debt because of EVMOS Unstaking's 14 days lock.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(address,uint256)\":{\"details\":\"Repay user's debt. Stayking should approve token first.\"},\"repayPendingDebt(address,uint256)\":{\"details\":\"stayking should send with value: repayingDebt \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"debtAmountOf\":{\"details\":\"totalAmount == Token.balanceOf(this) + totalDebtAmount totalShare == totalSupply()\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256)\":{\"notice\":\"user approve should be preceded\"},\"loan(address,uint256)\":{\"notice\":\"loan is only for Stayking contract.\"},\"pendRepay(address,uint256)\":{\"notice\":\"User can instantly repay some of their debts with their tokens. Stayking should approve token first.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IInterestModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\ninterface IInterestModel {\\n    function calcInterestRate(uint256 debt, uint256 floating)\\n        external\\n        pure\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x5f427c1568f6891acc1dd5bd9ef3b0621046fb98f014cdbc6be9cd1850760a87\",\"license\":\"MIT\"},\"contracts/interface/ISwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/************************************************************\\n * @dev\\n * Glossary\\n * X : Input Token\\n * Y : Output Token\\n * Dx : Amount of Input Token\\n * Dy : Amount of Output Token\\n *************************************************************/\\ninterface ISwapHelper {\\n\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) external view returns (uint256 dy);\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) external view returns (uint256 dx);\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 minDy\\n    ) payable external returns (uint256 dy);\\n}\",\"keccak256\":\"0xe085ce8733ebf477156c5859b597770ce042a1bc6f7fd04bf6d2055df3d88708\",\"license\":\"UNLICENSED\"},\"contracts/interface/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n\\ninterface IVault { \\n\\n    function token() external returns(address);\\n    \\n    function stayking() external returns(address);\\n\\n    function interestModel() external returns(address);\\n\\n    function totalAmount() external view returns(uint256);\\n\\n    function debtAmountOf(address user) external view returns(uint256);\\n\\n    function totalDebtAmount() external view returns(uint256);\\n\\n    function utilizationRateBps() external view returns(uint256);\\n\\n    /// @dev denominator = 1E18 \\n    function getInterestRate() external view returns(uint256);\\n\\n    function saveUtilizationRateBps() external;\\n\\n    function deposit(uint256 amount) external returns(uint256);\\n\\n    function withdraw(uint256 share) external returns(uint256);\\n\\n    /******************************\\n     * Only for Stayking Contract *\\n     ******************************/\\n    function loan(address user, uint256 amount) external;\\n\\n    function repay(address user, uint256 amount) external;\\n\\n    function takeDebtOwnership(\\n        address from,\\n        uint256 amount\\n    ) external;\\n\\n    function payInterest() external payable;\\n\\n    function pendRepay(address user, uint256 instantRepayment) external;\\n\\n    function calcPendingDebtInBase(address user) external view returns(uint256);\\n\\n    function repayPendingDebt(address user, uint256 minRepaidDebt) payable external;\\n\\n    function updateStayking(address newStaykingAddress) external;\\n\\n    function updateMinReservedBps(uint256 newMinReservedBps) external;\\n}\",\"keccak256\":\"0x0e334702ebb93dda20fde7285083e51b642a6c90cd5b97bafe031cb487afc74a\",\"license\":\"UNLICENSED\"},\"contracts/lib/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b70b1f6277d3a48fa1e38e103d184c4edb1f64184517be75996c66d93a066d2\",\"license\":\"MIT\"},\"contracts/lib/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.2;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x52d45f0d640d13ef9abf76356936783dd226832343be4131c61823a580dc4b83\",\"license\":\"MIT\"},\"contracts/lib/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20 {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xf6195030a85f12d2b1a63a741500f1189456fb0c987457e02d240b4fe711ee70\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b9c7ca79622c2fdd96700b95c69f6a3c407b961ab1624df360690fd69137bad\",\"license\":\"MIT\"},\"contracts/lib/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa4888dbbfe34205606c1332b112d077e8a5381313f962cd2f910afbda5c527b2\",\"license\":\"MIT\"},\"contracts/lib/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9e8a7188d698eea914eb3d07817fc539bdc152bee0b66567b6e911fd3293ce8d\",\"license\":\"MIT\"},\"contracts/lib/utils/SafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary SafeToken {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeApprove\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransfer\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransferFrom\\\"\\n        );\\n    }\\n\\n    function safeTransferEVMOS(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"!safeTransferEVMOS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3673f957556a65d32c0b4fca4aafcb2decf960c9a064b5008c1a43acd5f11ca5\",\"license\":\"MIT\"},\"contracts/token/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interface/IVault.sol\\\";\\nimport \\\"../interface/IInterestModel.sol\\\";\\nimport \\\"../interface/ISwapHelper.sol\\\";\\nimport \\\"../lib/ERC20Upgradeable.sol\\\";\\nimport \\\"../lib/OwnableUpgradeable.sol\\\";\\nimport \\\"../lib/interface/IERC20.sol\\\";\\nimport \\\"../lib/utils/SafeToken.sol\\\";\\n\\n\\n/************************************************************\\n * @dev Glossary\\n * amount vs share\\n * amount => unit of baseToken\\n * share => unit of ibToken\\n *************************************************************/\\ncontract Vault is IVault, ERC20Upgradeable, OwnableUpgradeable {\\n\\n    address public constant BASE_TOKEN = address(0);\\n\\n    event Deposit(address user, uint256 amount, uint256 share);\\n    event Withdraw(address user, uint256 amount, uint256 share);\\n    event Loan(address user, uint256 debtAmount);\\n    event Repay(address user, uint256 debtAmount);\\n    event PayInterest(uint256 paidInterest, uint256 leftInterest);\\n    event TransferDebtOwnership(address from, address to, uint256 amount);\\n    event UtilizationRate(uint256 rateBps);\\n\\n    ISwapHelper public swapHelper;\\n\\n    address public override token;\\n    address public override stayking;\\n    address public override interestModel;\\n\\n    /**\\n        @dev\\n        totalAmount == Token.balanceOf(this) + totalDebtAmount\\n        totalShare == totalSupply()\\n     */\\n\\n    // Debt Amounts\\n    mapping(address => uint256) public override debtAmountOf;\\n    uint256 public override totalDebtAmount;\\n\\n    // Pending Debts\\n    mapping(address => uint256) public pendingDebtShareOf;\\n    uint256 totalPendingDebtShare;\\n    uint256 totalPendingDebtAmount;\\n\\n    uint256 minReservedBps;\\n    uint256 yesterdayUtilRate;\\n    uint256 accInterest;\\n\\n    uint lastSavedUtilizationRateTime;\\n\\n    /*************\\n     * Modifiers *\\n    **************/\\n\\n    modifier onlyStayking(){\\n        require(msg.sender == stayking, \\\"Vault: Not Stayking contract.\\\");\\n        _;\\n    }\\n\\n    /****************\\n     * Initializer *\\n    *****************/\\n\\n    function __Vault_init(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _stayking,\\n        address _token,\\n        address _interestModel,\\n        uint256 _minReservedBps\\n    ) external initializer {\\n        require(_stayking != address(0), \\\"Vault: Stayking address is zero\\\");\\n        require(_token != address(0), \\\"Vault: Base Token is zero address\\\");\\n        \\n        __ERC20_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        stayking = _stayking;\\n        token = _token;\\n        interestModel = _interestModel;\\n        minReservedBps = _minReservedBps;\\n\\n        // @TODO changed\\n        lastSavedUtilizationRateTime = block.timestamp - \\n            ((block.timestamp - 1639098000) % 1 days);\\n    }\\n\\n    // @dev (token in vault) + (debt)\\n    function totalAmount() public override view returns(uint256){\\n        return IERC20(token).balanceOf(address(this)) + totalDebtAmount;\\n    }\\n\\n    function updateMinReservedBps(uint256 newMinReservedBps) public override onlyOwner {\\n        minReservedBps = newMinReservedBps;\\n    }\\n\\n    function updateStayking(address newStaykingAddress) public override onlyOwner {\\n        stayking = newStaykingAddress;\\n    }\\n\\n    function amountToShare(\\n        uint256 amount\\n    ) public view returns(uint256) {\\n        uint256 _totalAmount = totalAmount();\\n        return (_totalAmount == 0) ? amount :\\n            (totalSupply() * amount) / _totalAmount;\\n    }\\n\\n    function shareToAmount(\\n        uint256 share\\n    ) public view returns(uint256) {\\n        uint256 totalShare = totalSupply();\\n        return (totalShare == 0) ? share :\\n            (totalAmount() * share) / totalShare;\\n    }\\n\\n    function pendingDebtAmountToShare(\\n        uint256 amount\\n    ) public view returns(uint256) {\\n        return (totalPendingDebtAmount == 0) ? amount : \\n            (totalPendingDebtShare * amount) / totalPendingDebtAmount;\\n    }\\n\\n    function pendingDebtShareToAmount(\\n        uint256 share\\n    ) public view returns(uint256) {\\n        return (totalPendingDebtShare == 0) ? share : \\n            (totalPendingDebtAmount * share) / totalPendingDebtShare;\\n    }\\n\\n    /// @dev denominator = 1E18 \\n    function getInterestRate() public override view returns(uint256 interestRate){\\n        interestRate = IInterestModel(interestModel)\\n            .calcInterestRate(\\n                totalDebtAmount,\\n                IERC20(token).balanceOf(address(this))\\n            );\\n    }\\n\\n    function utilizationRateBps() public override view returns(uint256){\\n        return 1E4 * totalDebtAmount / totalAmount();\\n    }\\n\\n    function saveUtilizationRateBps() public override {\\n        if (block.timestamp >= lastSavedUtilizationRateTime + 1 days) {\\n            yesterdayUtilRate = utilizationRateBps();\\n            lastSavedUtilizationRateTime += 1 days;\\n            accInterest += (totalDebtAmount * getInterestRate() / 1E18);\\n            emit UtilizationRate(yesterdayUtilRate);\\n        }\\n    }\\n    \\n    /************************************\\n     * interface IVault Implementations\\n     ************************************/\\n\\n    /// @notice user approve should be preceded\\n    function deposit(uint256 amount) public override returns(uint256 share){\\n        share = amountToShare(amount);\\n        SafeToken.safeTransferFrom(token, msg.sender, address(this), amount);\\n        _mint(msg.sender, share);\\n\\n        emit Deposit(msg.sender, amount, share);\\n    }\\n\\n    function withdraw(uint256 share) public override returns(uint256 amount){\\n        amount = shareToAmount(share);\\n        _burn(msg.sender, share);\\n        SafeToken.safeTransfer(token, msg.sender, amount);\\n\\n        emit Withdraw(msg.sender, amount, share);\\n    }\\n\\n    /// @notice loan is only for Stayking contract.\\n    function loan(\\n        address user,\\n        uint256 amount\\n    ) public override onlyStayking {\\n        debtAmountOf[user] += amount;\\n        totalDebtAmount += amount;\\n        require(\\n            totalDebtAmount * 1E4 <= totalAmount() * minReservedBps,\\n            \\\"Loan: Cant' loan debt anymore.\\\"\\n        );\\n        SafeToken.safeTransfer(token, msg.sender, amount);\\n        emit Loan(user, amount);\\n    }\\n\\n    // @TODO Should approve MAX_UINT?\\n    /// @dev Repay user's debt.\\n    /// Stayking should approve token first.\\n    function repay(\\n        address user,\\n        uint256 amount\\n    ) public override onlyStayking {\\n        debtAmountOf[user] -= amount;\\n        totalDebtAmount -= amount;\\n        SafeToken.safeTransferFrom(token, user, address(this), amount);\\n        emit Repay(user, amount);\\n    }\\n\\n    function takeDebtOwnership(\\n        address from,\\n        uint256 amount\\n    ) public override onlyStayking {\\n        debtAmountOf[from] -= amount;\\n        debtAmountOf[msg.sender] += amount;\\n        emit TransferDebtOwnership(from, msg.sender, amount);\\n    }\\n\\n    function payInterest() public payable override onlyStayking {\\n        uint256 paidInterest = swapHelper.exchange(BASE_TOKEN, token, msg.value, 1);\\n        require(accInterest >= paidInterest, \\\"msg.value is greater than accumulated interest.\\\");\\n        unchecked {\\n            accInterest -= paidInterest;\\n        }\\n        emit PayInterest(paidInterest, accInterest);\\n    }\\n\\n    /// @dev pending repay debt because of EVMOS Unstaking's 14 days lock.\\n    /// @notice User can instantly repay some of their debts with their tokens.\\n    /// Stayking should approve token first.\\n    function pendRepay(\\n        address user,\\n        uint256 instantRepayment\\n    ) public override onlyStayking {\\n        if(instantRepayment > 0){\\n            repay(user, instantRepayment);\\n        }\\n\\n        uint256 pendingDebtAmount = debtAmountOf[user];\\n        uint256 pendingDebtShare = pendingDebtAmountToShare(pendingDebtAmount);\\n        pendingDebtShareOf[user] = pendingDebtShare;\\n        totalPendingDebtShare += pendingDebtShare;\\n        totalPendingDebtAmount += pendingDebtAmount;\\n    }\\n\\n    function calcPendingDebtInBase(\\n        address user\\n    ) public view override returns(uint256){\\n        return swapHelper.getDx(\\n            BASE_TOKEN, \\n            token,\\n            pendingDebtShareToAmount(pendingDebtShareOf[user])\\n        );\\n    }\\n\\n    /// @dev stayking should send with value: repayingDebt \\n    function repayPendingDebt(\\n        address user,\\n        uint256 minRepaidDebt\\n    ) public payable override onlyStayking {\\n\\n        uint256 repaidDebtAmount = swapHelper.exchange(BASE_TOKEN, token, msg.value, minRepaidDebt);\\n        require(\\n            repaidDebtAmount <= pendingDebtShareToAmount(pendingDebtShareOf[user]),\\n            \\\"repayPendingDebt: too much msg.value to repay debt\\\"\\n        );\\n\\n        uint256 repaidDebtShare = pendingDebtAmountToShare(repaidDebtAmount);\\n        pendingDebtShareOf[user] -= repaidDebtShare;\\n    }\\n\\n    /// @dev Fallback function to accept EVMOS.\\n    receive() external payable {}\\n}\",\"keccak256\":\"0xd3a8b1d0ed8b69a455e110ce749ae3ca0773331479d892486adb893a6cc46fd6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061467c806100206000396000f3fe6080604052600436106102555760003560e01c806370a0823111610139578063a9059cbb116100b6578063c48097981161007a578063c480979814610903578063c8dffa9514610940578063dd62ed3e1461096b578063eab32981146109a8578063f2fde38b146109d3578063fc0c546a146109fc5761025c565b8063a9059cbb1461081e578063ac165d7a1461085b578063b16828b714610886578063b6b55f251461089d578063b9529e9f146108da5761025c565b80638a81d6b0116100fd5780638a81d6b0146107655780638da5cb5b1461078157806395d89b41146107ac578063a15a211c146107d7578063a457c2d7146107e15761025c565b806370a0823114610682578063714934cd146106bf578063715018a6146106e857806378d7e54a146106ff5780638122af77146107285761025c565b806322867d78116101d2578063313ce56711610196578063313ce5671461054c57806339509351146105775780633b825f51146105b4578063494e42f4146105f15780635257b5661461061a5780636592183b146106455761025c565b806322867d781461042f57806323b872dd146104585780632d4047e5146104955780632d6f8013146104d25780632e1a7d4d1461050f5761025c565b8063185cc75111610219578063185cc7511461034a5780631a39d8ef146103735780631a4e1aef1461039e5780631ce9ba36146103c7578063210663e4146104045761025c565b806303d98c1f1461026157806306fdde031461028c578063095ea7b3146102b75780630fc6a11c146102f457806318160ddd1461031f5761025c565b3661025c57005b600080fd5b34801561026d57600080fd5b50610276610a27565b6040516102839190613cf0565b60405180910390f35b34801561029857600080fd5b506102a1610a50565b6040516102ae9190613a0e565b60405180910390f35b3480156102c357600080fd5b506102de60048036038101906102d9919061331b565b610ae2565b6040516102eb91906139bd565b60405180910390f35b34801561030057600080fd5b50610309610b05565b60405161031691906139d8565b60405180910390f35b34801561032b57600080fd5b50610334610b2b565b6040516103419190613cf0565b60405180910390f35b34801561035657600080fd5b50610371600480360381019061036c919061331b565b610b35565b005b34801561037f57600080fd5b50610388610d04565b6040516103959190613cf0565b60405180910390f35b3480156103aa57600080fd5b506103c560048036038101906103c0919061331b565b610dc3565b005b3480156103d357600080fd5b506103ee60048036038101906103e99190613443565b610f34565b6040516103fb9190613cf0565b60405180910390f35b34801561041057600080fd5b50610419610f68565b6040516104269190613881565b60405180910390f35b34801561043b57600080fd5b506104566004803603810190610451919061331b565b610f6d565b005b34801561046457600080fd5b5061047f600480360381019061047a91906132cc565b6110d7565b60405161048c91906139bd565b60405180910390f35b3480156104a157600080fd5b506104bc60048036038101906104b79190613443565b611106565b6040516104c99190613cf0565b60405180910390f35b3480156104de57600080fd5b506104f960048036038101906104f49190613443565b611148565b6040516105069190613cf0565b60405180910390f35b34801561051b57600080fd5b5061053660048036038101906105319190613443565b61118a565b6040516105439190613cf0565b60405180910390f35b34801561055857600080fd5b5061056161120e565b60405161056e9190613d34565b60405180910390f35b34801561058357600080fd5b5061059e6004803603810190610599919061331b565b611217565b6040516105ab91906139bd565b60405180910390f35b3480156105c057600080fd5b506105db60048036038101906105d69190613267565b61124e565b6040516105e89190613cf0565b60405180910390f35b3480156105fd57600080fd5b5061061860048036038101906106139190613443565b611370565b005b34801561062657600080fd5b5061062f611382565b60405161063c9190613cf0565b60405180910390f35b34801561065157600080fd5b5061066c60048036038101906106679190613267565b6114e2565b6040516106799190613cf0565b60405180910390f35b34801561068e57600080fd5b506106a960048036038101906106a49190613267565b6114fa565b6040516106b69190613cf0565b60405180910390f35b3480156106cb57600080fd5b506106e660048036038101906106e19190613380565b611543565b005b3480156106f457600080fd5b506106fd6118f4565b005b34801561070b57600080fd5b5061072660048036038101906107219190613267565b611908565b005b34801561073457600080fd5b5061074f600480360381019061074a9190613267565b611954565b60405161075c9190613cf0565b60405180910390f35b61077f600480360381019061077a919061331b565b61196c565b005b34801561078d57600080fd5b50610796611bc9565b6040516107a39190613881565b60405180910390f35b3480156107b857600080fd5b506107c1611bf3565b6040516107ce9190613a0e565b60405180910390f35b6107df611c85565b005b3480156107ed57600080fd5b506108086004803603810190610803919061331b565b611e83565b60405161081591906139bd565b60405180910390f35b34801561082a57600080fd5b506108456004803603810190610840919061331b565b611efa565b60405161085291906139bd565b60405180910390f35b34801561086757600080fd5b50610870611f1d565b60405161087d9190613881565b60405180910390f35b34801561089257600080fd5b5061089b611f43565b005b3480156108a957600080fd5b506108c460048036038101906108bf9190613443565b612000565b6040516108d19190613cf0565b60405180910390f35b3480156108e657600080fd5b5061090160048036038101906108fc919061331b565b612085565b005b34801561090f57600080fd5b5061092a60048036038101906109259190613443565b612200565b6040516109379190613cf0565b60405180910390f35b34801561094c57600080fd5b50610955612234565b6040516109629190613cf0565b60405180910390f35b34801561097757600080fd5b50610992600480360381019061098d9190613290565b61223a565b60405161099f9190613cf0565b60405180910390f35b3480156109b457600080fd5b506109bd6122c1565b6040516109ca9190613881565b60405180910390f35b3480156109df57600080fd5b506109fa60048036038101906109f59190613267565b6122e7565b005b348015610a0857600080fd5b50610a1161236b565b604051610a1e9190613881565b60405180910390f35b6000610a31610d04565b609c54612710610a419190613e08565b610a4b9190613dd7565b905090565b606060368054610a5f90613f66565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8b90613f66565b8015610ad85780601f10610aad57610100808354040283529160200191610ad8565b820191906000526020600020905b815481529060010190602001808311610abb57829003601f168201915b5050505050905090565b600080610aed612391565b9050610afa818585612399565b600191505092915050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603554905090565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbc90613bb0565b60405180910390fd5b80609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c149190613d81565b9250508190555080609c6000828254610c2d9190613d81565b9250508190555060a054610c3f610d04565b610c499190613e08565b612710609c54610c599190613e08565b1115610c9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9190613b30565b60405180910390fd5b610cc7609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383612564565b7f1db23cf53464267c45324569941e81e23d29c48ff9be2b35af2cc0a2681159d68282604051610cf892919061395d565b60405180910390a15050565b6000609c54609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d649190613881565b60206040518083038186803b158015610d7c57600080fd5b505afa158015610d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db4919061346c565b610dbe9190613d81565b905090565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4a90613bb0565b60405180910390fd5b6000811115610e6757610e668282610f6d565b5b6000609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610eb682612200565b905080609d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080609e6000828254610f0e9190613d81565b9250508190555081609f6000828254610f279190613d81565b9250508190555050505050565b600080609e5414610f5f57609e5482609f54610f509190613e08565b610f5a9190613dd7565b610f61565b815b9050919050565b600081565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff490613bb0565b60405180910390fd5b80609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461104c9190613e62565b9250508190555080609c60008282546110659190613e62565b9250508190555061109a609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683308461269a565b7f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a59423182826040516110cb92919061395d565b60405180910390a15050565b6000806110e2612391565b90506110ef8582856127d3565b6110fa85858561285f565b60019150509392505050565b600080611111610d04565b90506000811461113e578083611125610b2b565b61112f9190613e08565b6111399190613dd7565b611140565b825b915050919050565b600080611153610b2b565b905060008114611180578083611167610d04565b6111719190613e08565b61117b9190613dd7565b611182565b825b915050919050565b600061119582611148565b90506111a13383612ae3565b6111ce609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383612564565b7ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56833828460405161120193929190613986565b60405180910390a1919050565b60006012905090565b600080611222612391565b9050611243818585611234858961223a565b61123e9190613d81565b612399565b600191505092915050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637dceefee6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166112fb609d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f34565b6040518463ffffffff1660e01b81526004016113199392919061389c565b60206040518083038186803b15801561133157600080fd5b505afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611369919061346c565b9050919050565b611378612cbc565b8060a08190555050565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4a99bbb609c54609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114209190613881565b60206040518083038186803b15801561143857600080fd5b505afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611470919061346c565b6040518363ffffffff1660e01b815260040161148d929190613d0b565b60206040518083038186803b1580156114a557600080fd5b505afa1580156114b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dd919061346c565b905090565b609b6020528060005260406000206000915090505481565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060019054906101000a900460ff161590508080156115745750600160008054906101000a900460ff1660ff16105b806115a1575061158330612d3a565b1580156115a05750600160008054906101000a900460ff1660ff16145b5b6115e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d790613b90565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561161d576001600060016101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561168d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168490613ab0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156116fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f490613b70565b60405180910390fd5b61178f89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612d5d565b611797612dba565b84609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160a081905550620151806361b2a690426118759190613e62565b61187f9190613f98565b4261188a9190613e62565b60a38190555080156118e95760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516118e091906139f3565b60405180910390a15b505050505050505050565b6118fc612cbc565b6119066000612e13565b565b611910612cbc565b80609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b609d6020528060005260406000206000915090505481565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f390613bb0565b60405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ed2fc956000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634866040518563ffffffff1660e01b8152600401611a829493929190613918565b602060405180830381600087803b158015611a9c57600080fd5b505af1158015611ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad4919061346c565b9050611b1e609d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f34565b811115611b60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5790613b50565b60405180910390fd5b6000611b6b82612200565b905080609d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bbc9190613e62565b9250508190555050505050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060378054611c0290613f66565b80601f0160208091040260200160405190810160405280929190818152602001828054611c2e90613f66565b8015611c7b5780601f10611c5057610100808354040283529160200191611c7b565b820191906000526020600020905b815481529060010190602001808311611c5e57829003601f168201915b5050505050905090565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0c90613bb0565b60405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ed2fc956000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163460016040518563ffffffff1660e01b8152600401611d9c94939291906138d3565b602060405180830381600087803b158015611db657600080fd5b505af1158015611dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dee919061346c565b90508060a2541015611e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2c90613ad0565b60405180910390fd5b8060a2600082825403925050819055507f57546d41506d4d7643c2ea350647fa3d6ada23d1de3afa7a32496df9b7686bc08160a254604051611e78929190613d0b565b60405180910390a150565b600080611e8e612391565b90506000611e9c828661223a565b905083811015611ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed890613cb0565b60405180910390fd5b611eee8286868403612399565b60019250505092915050565b600080611f05612391565b9050611f1281858561285f565b600191505092915050565b609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6201518060a354611f549190613d81565b4210611ffe57611f62610a27565b60a1819055506201518060a36000828254611f7d9190613d81565b92505081905550670de0b6b3a7640000611f95611382565b609c54611fa29190613e08565b611fac9190613dd7565b60a26000828254611fbd9190613d81565b925050819055507f163eacd81cbfca2d1ec176759e7107e34229c5cbc5ec0b3fde68ffdef1157e0260a154604051611ff59190613cf0565b60405180910390a15b565b600061200b82611106565b905061203b609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633308561269a565b6120453382612ed9565b7f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1533838360405161207893929190613986565b60405180910390a1919050565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612115576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210c90613bb0565b60405180910390fd5b80609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121649190613e62565b9250508190555080609b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121ba9190613d81565b925050819055507f80caff6c1c70cc823c773c968ebdab44b7dc12da8117b4634b5f3eb78b07011e8233836040516121f49392919061389c565b60405180910390a15050565b600080609f541461222b57609f5482609e5461221c9190613e08565b6122269190613dd7565b61222d565b815b9050919050565b609c5481565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6122ef612cbc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561235f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235690613a70565b60405180910390fd5b61236881612e13565b50565b609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240090613c50565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612479576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247090613a90565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516125579190613cf0565b60405180910390a3505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161259692919061395d565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516125e4919061386a565b6000604051808303816000865af19150503d8060008114612621576040519150601f19603f3d011682016040523d82523d6000602084013e612626565b606091505b509150915081801561265457506000815114806126535750808060200190518101906126529190613357565b5b5b612693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268a90613bd0565b60405180910390fd5b5050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016126ce9392919061389c565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161271c919061386a565b6000604051808303816000865af19150503d8060008114612759576040519150601f19603f3d011682016040523d82523d6000602084013e61275e565b606091505b509150915081801561278c575060008151148061278b57508080602001905181019061278a9190613357565b5b5b6127cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127c290613c90565b60405180910390fd5b505050505050565b60006127df848461223a565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114612859578181101561284b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284290613af0565b60405180910390fd5b6128588484848403612399565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156128cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c690613c30565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561293f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293690613a30565b60405180910390fd5b61294a83838361303a565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156129d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c890613b10565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a669190613d81565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612aca9190613cf0565b60405180910390a3612add84848461303f565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4a90613c10565b60405180910390fd5b612b5f8260008361303a565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bdd90613a50565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160356000828254612c3e9190613e62565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612ca39190613cf0565b60405180910390a3612cb78360008461303f565b505050565b612cc4612391565b73ffffffffffffffffffffffffffffffffffffffff16612ce2611bc9565b73ffffffffffffffffffffffffffffffffffffffff1614612d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d2f90613bf0565b60405180910390fd5b565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612dac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612da390613c70565b60405180910390fd5b612db68282613044565b5050565b600060019054906101000a900460ff16612e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0090613c70565b60405180910390fd5b612e116130c5565b565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4090613cd0565b60405180910390fd5b612f556000838361303a565b8060356000828254612f679190613d81565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fbd9190613d81565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516130229190613cf0565b60405180910390a36130366000838361303f565b5050565b505050565b505050565b600060019054906101000a900460ff16613093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161308a90613c70565b60405180910390fd5b81603690805190602001906130a9929190613126565b5080603790805190602001906130c0929190613126565b505050565b600060019054906101000a900460ff16613114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161310b90613c70565b60405180910390fd5b61312461311f612391565b612e13565b565b82805461313290613f66565b90600052602060002090601f016020900481019282613154576000855561319b565b82601f1061316d57805160ff191683800117855561319b565b8280016001018555821561319b579182015b8281111561319a57825182559160200191906001019061317f565b5b5090506131a891906131ac565b5090565b5b808211156131c55760008160009055506001016131ad565b5090565b6000813590506131d881614601565b92915050565b6000815190506131ed81614618565b92915050565b60008083601f84011261320557600080fd5b8235905067ffffffffffffffff81111561321e57600080fd5b60208301915083600182028301111561323657600080fd5b9250929050565b60008135905061324c8161462f565b92915050565b6000815190506132618161462f565b92915050565b60006020828403121561327957600080fd5b6000613287848285016131c9565b91505092915050565b600080604083850312156132a357600080fd5b60006132b1858286016131c9565b92505060206132c2858286016131c9565b9150509250929050565b6000806000606084860312156132e157600080fd5b60006132ef868287016131c9565b9350506020613300868287016131c9565b92505060406133118682870161323d565b9150509250925092565b6000806040838503121561332e57600080fd5b600061333c858286016131c9565b925050602061334d8582860161323d565b9150509250929050565b60006020828403121561336957600080fd5b6000613377848285016131de565b91505092915050565b60008060008060008060008060c0898b03121561339c57600080fd5b600089013567ffffffffffffffff8111156133b657600080fd5b6133c28b828c016131f3565b9850985050602089013567ffffffffffffffff8111156133e157600080fd5b6133ed8b828c016131f3565b965096505060406134008b828c016131c9565b94505060606134118b828c016131c9565b93505060806134228b828c016131c9565b92505060a06134338b828c0161323d565b9150509295985092959890939650565b60006020828403121561345557600080fd5b60006134638482850161323d565b91505092915050565b60006020828403121561347e57600080fd5b600061348c84828501613252565b91505092915050565b61349e81613e96565b82525050565b6134ad81613ea8565b82525050565b60006134be82613d4f565b6134c88185613d65565b93506134d8818560208601613f33565b80840191505092915050565b6134ed81613eeb565b82525050565b6134fc81613f0f565b82525050565b61350b81613f21565b82525050565b600061351c82613d5a565b6135268185613d70565b9350613536818560208601613f33565b61353f81614056565b840191505092915050565b6000613557602383613d70565b915061356282614067565b604082019050919050565b600061357a602283613d70565b9150613585826140b6565b604082019050919050565b600061359d602683613d70565b91506135a882614105565b604082019050919050565b60006135c0602283613d70565b91506135cb82614154565b604082019050919050565b60006135e3601f83613d70565b91506135ee826141a3565b602082019050919050565b6000613606602f83613d70565b9150613611826141cc565b604082019050919050565b6000613629601d83613d70565b91506136348261421b565b602082019050919050565b600061364c602683613d70565b915061365782614244565b604082019050919050565b600061366f601e83613d70565b915061367a82614293565b602082019050919050565b6000613692603283613d70565b915061369d826142bc565b604082019050919050565b60006136b5602183613d70565b91506136c08261430b565b604082019050919050565b60006136d8602e83613d70565b91506136e38261435a565b604082019050919050565b60006136fb601d83613d70565b9150613706826143a9565b602082019050919050565b600061371e600d83613d70565b9150613729826143d2565b602082019050919050565b6000613741602083613d70565b915061374c826143fb565b602082019050919050565b6000613764602183613d70565b915061376f82614424565b604082019050919050565b6000613787602583613d70565b915061379282614473565b604082019050919050565b60006137aa602483613d70565b91506137b5826144c2565b604082019050919050565b60006137cd602b83613d70565b91506137d882614511565b604082019050919050565b60006137f0601183613d70565b91506137fb82614560565b602082019050919050565b6000613813602583613d70565b915061381e82614589565b604082019050919050565b6000613836601f83613d70565b9150613841826145d8565b602082019050919050565b61385581613ed4565b82525050565b61386481613ede565b82525050565b600061387682846134b3565b915081905092915050565b60006020820190506138966000830184613495565b92915050565b60006060820190506138b16000830186613495565b6138be6020830185613495565b6138cb604083018461384c565b949350505050565b60006080820190506138e86000830187613495565b6138f56020830186613495565b613902604083018561384c565b61390f60608301846134f3565b95945050505050565b600060808201905061392d6000830187613495565b61393a6020830186613495565b613947604083018561384c565b613954606083018461384c565b95945050505050565b60006040820190506139726000830185613495565b61397f602083018461384c565b9392505050565b600060608201905061399b6000830186613495565b6139a8602083018561384c565b6139b5604083018461384c565b949350505050565b60006020820190506139d260008301846134a4565b92915050565b60006020820190506139ed60008301846134e4565b92915050565b6000602082019050613a086000830184613502565b92915050565b60006020820190508181036000830152613a288184613511565b905092915050565b60006020820190508181036000830152613a498161354a565b9050919050565b60006020820190508181036000830152613a698161356d565b9050919050565b60006020820190508181036000830152613a8981613590565b9050919050565b60006020820190508181036000830152613aa9816135b3565b9050919050565b60006020820190508181036000830152613ac9816135d6565b9050919050565b60006020820190508181036000830152613ae9816135f9565b9050919050565b60006020820190508181036000830152613b098161361c565b9050919050565b60006020820190508181036000830152613b298161363f565b9050919050565b60006020820190508181036000830152613b4981613662565b9050919050565b60006020820190508181036000830152613b6981613685565b9050919050565b60006020820190508181036000830152613b89816136a8565b9050919050565b60006020820190508181036000830152613ba9816136cb565b9050919050565b60006020820190508181036000830152613bc9816136ee565b9050919050565b60006020820190508181036000830152613be981613711565b9050919050565b60006020820190508181036000830152613c0981613734565b9050919050565b60006020820190508181036000830152613c2981613757565b9050919050565b60006020820190508181036000830152613c498161377a565b9050919050565b60006020820190508181036000830152613c698161379d565b9050919050565b60006020820190508181036000830152613c89816137c0565b9050919050565b60006020820190508181036000830152613ca9816137e3565b9050919050565b60006020820190508181036000830152613cc981613806565b9050919050565b60006020820190508181036000830152613ce981613829565b9050919050565b6000602082019050613d05600083018461384c565b92915050565b6000604082019050613d20600083018561384c565b613d2d602083018461384c565b9392505050565b6000602082019050613d49600083018461385b565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000613d8c82613ed4565b9150613d9783613ed4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613dcc57613dcb613fc9565b5b828201905092915050565b6000613de282613ed4565b9150613ded83613ed4565b925082613dfd57613dfc613ff8565b5b828204905092915050565b6000613e1382613ed4565b9150613e1e83613ed4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e5757613e56613fc9565b5b828202905092915050565b6000613e6d82613ed4565b9150613e7883613ed4565b925082821015613e8b57613e8a613fc9565b5b828203905092915050565b6000613ea182613eb4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613ef682613efd565b9050919050565b6000613f0882613eb4565b9050919050565b6000613f1a82613ed4565b9050919050565b6000613f2c82613ede565b9050919050565b60005b83811015613f51578082015181840152602081019050613f36565b83811115613f60576000848401525b50505050565b60006002820490506001821680613f7e57607f821691505b60208210811415613f9257613f91614027565b5b50919050565b6000613fa382613ed4565b9150613fae83613ed4565b925082613fbe57613fbd613ff8565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f5661756c743a20537461796b696e672061646472657373206973207a65726f00600082015250565b7f6d73672e76616c75652069732067726561746572207468616e20616363756d7560008201527f6c6174656420696e7465726573742e0000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f4c6f616e3a2043616e7427206c6f616e206465627420616e796d6f72652e0000600082015250565b7f726570617950656e64696e67446562743a20746f6f206d756368206d73672e7660008201527f616c756520746f20726570617920646562740000000000000000000000000000602082015250565b7f5661756c743a204261736520546f6b656e206973207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f5661756c743a204e6f7420537461796b696e6720636f6e74726163742e000000600082015250565b7f21736166655472616e7366657200000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f21736166655472616e7366657246726f6d000000000000000000000000000000600082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61460a81613e96565b811461461557600080fd5b50565b61462181613ea8565b811461462c57600080fd5b50565b61463881613ed4565b811461464357600080fd5b5056fea2646970667358221220e1f30dbc24d642ffb63c851974bcaf4ff7434d1fcc1fbf222970455232be821464736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102555760003560e01c806370a0823111610139578063a9059cbb116100b6578063c48097981161007a578063c480979814610903578063c8dffa9514610940578063dd62ed3e1461096b578063eab32981146109a8578063f2fde38b146109d3578063fc0c546a146109fc5761025c565b8063a9059cbb1461081e578063ac165d7a1461085b578063b16828b714610886578063b6b55f251461089d578063b9529e9f146108da5761025c565b80638a81d6b0116100fd5780638a81d6b0146107655780638da5cb5b1461078157806395d89b41146107ac578063a15a211c146107d7578063a457c2d7146107e15761025c565b806370a0823114610682578063714934cd146106bf578063715018a6146106e857806378d7e54a146106ff5780638122af77146107285761025c565b806322867d78116101d2578063313ce56711610196578063313ce5671461054c57806339509351146105775780633b825f51146105b4578063494e42f4146105f15780635257b5661461061a5780636592183b146106455761025c565b806322867d781461042f57806323b872dd146104585780632d4047e5146104955780632d6f8013146104d25780632e1a7d4d1461050f5761025c565b8063185cc75111610219578063185cc7511461034a5780631a39d8ef146103735780631a4e1aef1461039e5780631ce9ba36146103c7578063210663e4146104045761025c565b806303d98c1f1461026157806306fdde031461028c578063095ea7b3146102b75780630fc6a11c146102f457806318160ddd1461031f5761025c565b3661025c57005b600080fd5b34801561026d57600080fd5b50610276610a27565b6040516102839190613cf0565b60405180910390f35b34801561029857600080fd5b506102a1610a50565b6040516102ae9190613a0e565b60405180910390f35b3480156102c357600080fd5b506102de60048036038101906102d9919061331b565b610ae2565b6040516102eb91906139bd565b60405180910390f35b34801561030057600080fd5b50610309610b05565b60405161031691906139d8565b60405180910390f35b34801561032b57600080fd5b50610334610b2b565b6040516103419190613cf0565b60405180910390f35b34801561035657600080fd5b50610371600480360381019061036c919061331b565b610b35565b005b34801561037f57600080fd5b50610388610d04565b6040516103959190613cf0565b60405180910390f35b3480156103aa57600080fd5b506103c560048036038101906103c0919061331b565b610dc3565b005b3480156103d357600080fd5b506103ee60048036038101906103e99190613443565b610f34565b6040516103fb9190613cf0565b60405180910390f35b34801561041057600080fd5b50610419610f68565b6040516104269190613881565b60405180910390f35b34801561043b57600080fd5b506104566004803603810190610451919061331b565b610f6d565b005b34801561046457600080fd5b5061047f600480360381019061047a91906132cc565b6110d7565b60405161048c91906139bd565b60405180910390f35b3480156104a157600080fd5b506104bc60048036038101906104b79190613443565b611106565b6040516104c99190613cf0565b60405180910390f35b3480156104de57600080fd5b506104f960048036038101906104f49190613443565b611148565b6040516105069190613cf0565b60405180910390f35b34801561051b57600080fd5b5061053660048036038101906105319190613443565b61118a565b6040516105439190613cf0565b60405180910390f35b34801561055857600080fd5b5061056161120e565b60405161056e9190613d34565b60405180910390f35b34801561058357600080fd5b5061059e6004803603810190610599919061331b565b611217565b6040516105ab91906139bd565b60405180910390f35b3480156105c057600080fd5b506105db60048036038101906105d69190613267565b61124e565b6040516105e89190613cf0565b60405180910390f35b3480156105fd57600080fd5b5061061860048036038101906106139190613443565b611370565b005b34801561062657600080fd5b5061062f611382565b60405161063c9190613cf0565b60405180910390f35b34801561065157600080fd5b5061066c60048036038101906106679190613267565b6114e2565b6040516106799190613cf0565b60405180910390f35b34801561068e57600080fd5b506106a960048036038101906106a49190613267565b6114fa565b6040516106b69190613cf0565b60405180910390f35b3480156106cb57600080fd5b506106e660048036038101906106e19190613380565b611543565b005b3480156106f457600080fd5b506106fd6118f4565b005b34801561070b57600080fd5b5061072660048036038101906107219190613267565b611908565b005b34801561073457600080fd5b5061074f600480360381019061074a9190613267565b611954565b60405161075c9190613cf0565b60405180910390f35b61077f600480360381019061077a919061331b565b61196c565b005b34801561078d57600080fd5b50610796611bc9565b6040516107a39190613881565b60405180910390f35b3480156107b857600080fd5b506107c1611bf3565b6040516107ce9190613a0e565b60405180910390f35b6107df611c85565b005b3480156107ed57600080fd5b506108086004803603810190610803919061331b565b611e83565b60405161081591906139bd565b60405180910390f35b34801561082a57600080fd5b506108456004803603810190610840919061331b565b611efa565b60405161085291906139bd565b60405180910390f35b34801561086757600080fd5b50610870611f1d565b60405161087d9190613881565b60405180910390f35b34801561089257600080fd5b5061089b611f43565b005b3480156108a957600080fd5b506108c460048036038101906108bf9190613443565b612000565b6040516108d19190613cf0565b60405180910390f35b3480156108e657600080fd5b5061090160048036038101906108fc919061331b565b612085565b005b34801561090f57600080fd5b5061092a60048036038101906109259190613443565b612200565b6040516109379190613cf0565b60405180910390f35b34801561094c57600080fd5b50610955612234565b6040516109629190613cf0565b60405180910390f35b34801561097757600080fd5b50610992600480360381019061098d9190613290565b61223a565b60405161099f9190613cf0565b60405180910390f35b3480156109b457600080fd5b506109bd6122c1565b6040516109ca9190613881565b60405180910390f35b3480156109df57600080fd5b506109fa60048036038101906109f59190613267565b6122e7565b005b348015610a0857600080fd5b50610a1161236b565b604051610a1e9190613881565b60405180910390f35b6000610a31610d04565b609c54612710610a419190613e08565b610a4b9190613dd7565b905090565b606060368054610a5f90613f66565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8b90613f66565b8015610ad85780601f10610aad57610100808354040283529160200191610ad8565b820191906000526020600020905b815481529060010190602001808311610abb57829003601f168201915b5050505050905090565b600080610aed612391565b9050610afa818585612399565b600191505092915050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603554905090565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbc90613bb0565b60405180910390fd5b80609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c149190613d81565b9250508190555080609c6000828254610c2d9190613d81565b9250508190555060a054610c3f610d04565b610c499190613e08565b612710609c54610c599190613e08565b1115610c9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9190613b30565b60405180910390fd5b610cc7609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383612564565b7f1db23cf53464267c45324569941e81e23d29c48ff9be2b35af2cc0a2681159d68282604051610cf892919061395d565b60405180910390a15050565b6000609c54609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d649190613881565b60206040518083038186803b158015610d7c57600080fd5b505afa158015610d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db4919061346c565b610dbe9190613d81565b905090565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4a90613bb0565b60405180910390fd5b6000811115610e6757610e668282610f6d565b5b6000609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610eb682612200565b905080609d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080609e6000828254610f0e9190613d81565b9250508190555081609f6000828254610f279190613d81565b9250508190555050505050565b600080609e5414610f5f57609e5482609f54610f509190613e08565b610f5a9190613dd7565b610f61565b815b9050919050565b600081565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff490613bb0565b60405180910390fd5b80609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461104c9190613e62565b9250508190555080609c60008282546110659190613e62565b9250508190555061109a609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683308461269a565b7f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a59423182826040516110cb92919061395d565b60405180910390a15050565b6000806110e2612391565b90506110ef8582856127d3565b6110fa85858561285f565b60019150509392505050565b600080611111610d04565b90506000811461113e578083611125610b2b565b61112f9190613e08565b6111399190613dd7565b611140565b825b915050919050565b600080611153610b2b565b905060008114611180578083611167610d04565b6111719190613e08565b61117b9190613dd7565b611182565b825b915050919050565b600061119582611148565b90506111a13383612ae3565b6111ce609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383612564565b7ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56833828460405161120193929190613986565b60405180910390a1919050565b60006012905090565b600080611222612391565b9050611243818585611234858961223a565b61123e9190613d81565b612399565b600191505092915050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637dceefee6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166112fb609d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f34565b6040518463ffffffff1660e01b81526004016113199392919061389c565b60206040518083038186803b15801561133157600080fd5b505afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611369919061346c565b9050919050565b611378612cbc565b8060a08190555050565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4a99bbb609c54609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114209190613881565b60206040518083038186803b15801561143857600080fd5b505afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611470919061346c565b6040518363ffffffff1660e01b815260040161148d929190613d0b565b60206040518083038186803b1580156114a557600080fd5b505afa1580156114b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dd919061346c565b905090565b609b6020528060005260406000206000915090505481565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060019054906101000a900460ff161590508080156115745750600160008054906101000a900460ff1660ff16105b806115a1575061158330612d3a565b1580156115a05750600160008054906101000a900460ff1660ff16145b5b6115e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d790613b90565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561161d576001600060016101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561168d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168490613ab0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156116fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f490613b70565b60405180910390fd5b61178f89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612d5d565b611797612dba565b84609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160a081905550620151806361b2a690426118759190613e62565b61187f9190613f98565b4261188a9190613e62565b60a38190555080156118e95760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516118e091906139f3565b60405180910390a15b505050505050505050565b6118fc612cbc565b6119066000612e13565b565b611910612cbc565b80609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b609d6020528060005260406000206000915090505481565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f390613bb0565b60405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ed2fc956000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634866040518563ffffffff1660e01b8152600401611a829493929190613918565b602060405180830381600087803b158015611a9c57600080fd5b505af1158015611ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad4919061346c565b9050611b1e609d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f34565b811115611b60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5790613b50565b60405180910390fd5b6000611b6b82612200565b905080609d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bbc9190613e62565b9250508190555050505050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060378054611c0290613f66565b80601f0160208091040260200160405190810160405280929190818152602001828054611c2e90613f66565b8015611c7b5780601f10611c5057610100808354040283529160200191611c7b565b820191906000526020600020905b815481529060010190602001808311611c5e57829003601f168201915b5050505050905090565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0c90613bb0565b60405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ed2fc956000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163460016040518563ffffffff1660e01b8152600401611d9c94939291906138d3565b602060405180830381600087803b158015611db657600080fd5b505af1158015611dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dee919061346c565b90508060a2541015611e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2c90613ad0565b60405180910390fd5b8060a2600082825403925050819055507f57546d41506d4d7643c2ea350647fa3d6ada23d1de3afa7a32496df9b7686bc08160a254604051611e78929190613d0b565b60405180910390a150565b600080611e8e612391565b90506000611e9c828661223a565b905083811015611ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed890613cb0565b60405180910390fd5b611eee8286868403612399565b60019250505092915050565b600080611f05612391565b9050611f1281858561285f565b600191505092915050565b609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6201518060a354611f549190613d81565b4210611ffe57611f62610a27565b60a1819055506201518060a36000828254611f7d9190613d81565b92505081905550670de0b6b3a7640000611f95611382565b609c54611fa29190613e08565b611fac9190613dd7565b60a26000828254611fbd9190613d81565b925050819055507f163eacd81cbfca2d1ec176759e7107e34229c5cbc5ec0b3fde68ffdef1157e0260a154604051611ff59190613cf0565b60405180910390a15b565b600061200b82611106565b905061203b609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633308561269a565b6120453382612ed9565b7f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1533838360405161207893929190613986565b60405180910390a1919050565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612115576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210c90613bb0565b60405180910390fd5b80609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121649190613e62565b9250508190555080609b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121ba9190613d81565b925050819055507f80caff6c1c70cc823c773c968ebdab44b7dc12da8117b4634b5f3eb78b07011e8233836040516121f49392919061389c565b60405180910390a15050565b600080609f541461222b57609f5482609e5461221c9190613e08565b6122269190613dd7565b61222d565b815b9050919050565b609c5481565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6122ef612cbc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561235f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235690613a70565b60405180910390fd5b61236881612e13565b50565b609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240090613c50565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612479576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247090613a90565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516125579190613cf0565b60405180910390a3505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161259692919061395d565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516125e4919061386a565b6000604051808303816000865af19150503d8060008114612621576040519150601f19603f3d011682016040523d82523d6000602084013e612626565b606091505b509150915081801561265457506000815114806126535750808060200190518101906126529190613357565b5b5b612693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268a90613bd0565b60405180910390fd5b5050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016126ce9392919061389c565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161271c919061386a565b6000604051808303816000865af19150503d8060008114612759576040519150601f19603f3d011682016040523d82523d6000602084013e61275e565b606091505b509150915081801561278c575060008151148061278b57508080602001905181019061278a9190613357565b5b5b6127cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127c290613c90565b60405180910390fd5b505050505050565b60006127df848461223a565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114612859578181101561284b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284290613af0565b60405180910390fd5b6128588484848403612399565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156128cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c690613c30565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561293f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293690613a30565b60405180910390fd5b61294a83838361303a565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156129d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c890613b10565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a669190613d81565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612aca9190613cf0565b60405180910390a3612add84848461303f565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4a90613c10565b60405180910390fd5b612b5f8260008361303a565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bdd90613a50565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160356000828254612c3e9190613e62565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612ca39190613cf0565b60405180910390a3612cb78360008461303f565b505050565b612cc4612391565b73ffffffffffffffffffffffffffffffffffffffff16612ce2611bc9565b73ffffffffffffffffffffffffffffffffffffffff1614612d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d2f90613bf0565b60405180910390fd5b565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612dac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612da390613c70565b60405180910390fd5b612db68282613044565b5050565b600060019054906101000a900460ff16612e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0090613c70565b60405180910390fd5b612e116130c5565b565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4090613cd0565b60405180910390fd5b612f556000838361303a565b8060356000828254612f679190613d81565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fbd9190613d81565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516130229190613cf0565b60405180910390a36130366000838361303f565b5050565b505050565b505050565b600060019054906101000a900460ff16613093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161308a90613c70565b60405180910390fd5b81603690805190602001906130a9929190613126565b5080603790805190602001906130c0929190613126565b505050565b600060019054906101000a900460ff16613114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161310b90613c70565b60405180910390fd5b61312461311f612391565b612e13565b565b82805461313290613f66565b90600052602060002090601f016020900481019282613154576000855561319b565b82601f1061316d57805160ff191683800117855561319b565b8280016001018555821561319b579182015b8281111561319a57825182559160200191906001019061317f565b5b5090506131a891906131ac565b5090565b5b808211156131c55760008160009055506001016131ad565b5090565b6000813590506131d881614601565b92915050565b6000815190506131ed81614618565b92915050565b60008083601f84011261320557600080fd5b8235905067ffffffffffffffff81111561321e57600080fd5b60208301915083600182028301111561323657600080fd5b9250929050565b60008135905061324c8161462f565b92915050565b6000815190506132618161462f565b92915050565b60006020828403121561327957600080fd5b6000613287848285016131c9565b91505092915050565b600080604083850312156132a357600080fd5b60006132b1858286016131c9565b92505060206132c2858286016131c9565b9150509250929050565b6000806000606084860312156132e157600080fd5b60006132ef868287016131c9565b9350506020613300868287016131c9565b92505060406133118682870161323d565b9150509250925092565b6000806040838503121561332e57600080fd5b600061333c858286016131c9565b925050602061334d8582860161323d565b9150509250929050565b60006020828403121561336957600080fd5b6000613377848285016131de565b91505092915050565b60008060008060008060008060c0898b03121561339c57600080fd5b600089013567ffffffffffffffff8111156133b657600080fd5b6133c28b828c016131f3565b9850985050602089013567ffffffffffffffff8111156133e157600080fd5b6133ed8b828c016131f3565b965096505060406134008b828c016131c9565b94505060606134118b828c016131c9565b93505060806134228b828c016131c9565b92505060a06134338b828c0161323d565b9150509295985092959890939650565b60006020828403121561345557600080fd5b60006134638482850161323d565b91505092915050565b60006020828403121561347e57600080fd5b600061348c84828501613252565b91505092915050565b61349e81613e96565b82525050565b6134ad81613ea8565b82525050565b60006134be82613d4f565b6134c88185613d65565b93506134d8818560208601613f33565b80840191505092915050565b6134ed81613eeb565b82525050565b6134fc81613f0f565b82525050565b61350b81613f21565b82525050565b600061351c82613d5a565b6135268185613d70565b9350613536818560208601613f33565b61353f81614056565b840191505092915050565b6000613557602383613d70565b915061356282614067565b604082019050919050565b600061357a602283613d70565b9150613585826140b6565b604082019050919050565b600061359d602683613d70565b91506135a882614105565b604082019050919050565b60006135c0602283613d70565b91506135cb82614154565b604082019050919050565b60006135e3601f83613d70565b91506135ee826141a3565b602082019050919050565b6000613606602f83613d70565b9150613611826141cc565b604082019050919050565b6000613629601d83613d70565b91506136348261421b565b602082019050919050565b600061364c602683613d70565b915061365782614244565b604082019050919050565b600061366f601e83613d70565b915061367a82614293565b602082019050919050565b6000613692603283613d70565b915061369d826142bc565b604082019050919050565b60006136b5602183613d70565b91506136c08261430b565b604082019050919050565b60006136d8602e83613d70565b91506136e38261435a565b604082019050919050565b60006136fb601d83613d70565b9150613706826143a9565b602082019050919050565b600061371e600d83613d70565b9150613729826143d2565b602082019050919050565b6000613741602083613d70565b915061374c826143fb565b602082019050919050565b6000613764602183613d70565b915061376f82614424565b604082019050919050565b6000613787602583613d70565b915061379282614473565b604082019050919050565b60006137aa602483613d70565b91506137b5826144c2565b604082019050919050565b60006137cd602b83613d70565b91506137d882614511565b604082019050919050565b60006137f0601183613d70565b91506137fb82614560565b602082019050919050565b6000613813602583613d70565b915061381e82614589565b604082019050919050565b6000613836601f83613d70565b9150613841826145d8565b602082019050919050565b61385581613ed4565b82525050565b61386481613ede565b82525050565b600061387682846134b3565b915081905092915050565b60006020820190506138966000830184613495565b92915050565b60006060820190506138b16000830186613495565b6138be6020830185613495565b6138cb604083018461384c565b949350505050565b60006080820190506138e86000830187613495565b6138f56020830186613495565b613902604083018561384c565b61390f60608301846134f3565b95945050505050565b600060808201905061392d6000830187613495565b61393a6020830186613495565b613947604083018561384c565b613954606083018461384c565b95945050505050565b60006040820190506139726000830185613495565b61397f602083018461384c565b9392505050565b600060608201905061399b6000830186613495565b6139a8602083018561384c565b6139b5604083018461384c565b949350505050565b60006020820190506139d260008301846134a4565b92915050565b60006020820190506139ed60008301846134e4565b92915050565b6000602082019050613a086000830184613502565b92915050565b60006020820190508181036000830152613a288184613511565b905092915050565b60006020820190508181036000830152613a498161354a565b9050919050565b60006020820190508181036000830152613a698161356d565b9050919050565b60006020820190508181036000830152613a8981613590565b9050919050565b60006020820190508181036000830152613aa9816135b3565b9050919050565b60006020820190508181036000830152613ac9816135d6565b9050919050565b60006020820190508181036000830152613ae9816135f9565b9050919050565b60006020820190508181036000830152613b098161361c565b9050919050565b60006020820190508181036000830152613b298161363f565b9050919050565b60006020820190508181036000830152613b4981613662565b9050919050565b60006020820190508181036000830152613b6981613685565b9050919050565b60006020820190508181036000830152613b89816136a8565b9050919050565b60006020820190508181036000830152613ba9816136cb565b9050919050565b60006020820190508181036000830152613bc9816136ee565b9050919050565b60006020820190508181036000830152613be981613711565b9050919050565b60006020820190508181036000830152613c0981613734565b9050919050565b60006020820190508181036000830152613c2981613757565b9050919050565b60006020820190508181036000830152613c498161377a565b9050919050565b60006020820190508181036000830152613c698161379d565b9050919050565b60006020820190508181036000830152613c89816137c0565b9050919050565b60006020820190508181036000830152613ca9816137e3565b9050919050565b60006020820190508181036000830152613cc981613806565b9050919050565b60006020820190508181036000830152613ce981613829565b9050919050565b6000602082019050613d05600083018461384c565b92915050565b6000604082019050613d20600083018561384c565b613d2d602083018461384c565b9392505050565b6000602082019050613d49600083018461385b565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000613d8c82613ed4565b9150613d9783613ed4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613dcc57613dcb613fc9565b5b828201905092915050565b6000613de282613ed4565b9150613ded83613ed4565b925082613dfd57613dfc613ff8565b5b828204905092915050565b6000613e1382613ed4565b9150613e1e83613ed4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e5757613e56613fc9565b5b828202905092915050565b6000613e6d82613ed4565b9150613e7883613ed4565b925082821015613e8b57613e8a613fc9565b5b828203905092915050565b6000613ea182613eb4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613ef682613efd565b9050919050565b6000613f0882613eb4565b9050919050565b6000613f1a82613ed4565b9050919050565b6000613f2c82613ede565b9050919050565b60005b83811015613f51578082015181840152602081019050613f36565b83811115613f60576000848401525b50505050565b60006002820490506001821680613f7e57607f821691505b60208210811415613f9257613f91614027565b5b50919050565b6000613fa382613ed4565b9150613fae83613ed4565b925082613fbe57613fbd613ff8565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f5661756c743a20537461796b696e672061646472657373206973207a65726f00600082015250565b7f6d73672e76616c75652069732067726561746572207468616e20616363756d7560008201527f6c6174656420696e7465726573742e0000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f4c6f616e3a2043616e7427206c6f616e206465627420616e796d6f72652e0000600082015250565b7f726570617950656e64696e67446562743a20746f6f206d756368206d73672e7660008201527f616c756520746f20726570617920646562740000000000000000000000000000602082015250565b7f5661756c743a204261736520546f6b656e206973207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f5661756c743a204e6f7420537461796b696e6720636f6e74726163742e000000600082015250565b7f21736166655472616e7366657200000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f21736166655472616e7366657246726f6d000000000000000000000000000000600082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61460a81613e96565b811461461557600080fd5b50565b61462181613ea8565b811461462c57600080fd5b50565b61463881613ed4565b811461464357600080fd5b5056fea2646970667358221220e1f30dbc24d642ffb63c851974bcaf4ff7434d1fcc1fbf222970455232be821464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getInterestRate()": {
        "details": "denominator = 1E18 "
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendRepay(address,uint256)": {
        "details": "pending repay debt because of EVMOS Unstaking's 14 days lock."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(address,uint256)": {
        "details": "Repay user's debt. Stayking should approve token first."
      },
      "repayPendingDebt(address,uint256)": {
        "details": "stayking should send with value: repayingDebt "
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "debtAmountOf": {
        "details": "totalAmount == Token.balanceOf(this) + totalDebtAmount totalShare == totalSupply()"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256)": {
        "notice": "user approve should be preceded"
      },
      "loan(address,uint256)": {
        "notice": "loan is only for Stayking contract."
      },
      "pendRepay(address,uint256)": {
        "notice": "User can instantly repay some of their debts with their tokens. Stayking should approve token first."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1177,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1180,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 561,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 578,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 584,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 586,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 588,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 590,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1169,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 1332,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 1452,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3377,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "swapHelper",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(ISwapHelper)159"
      },
      {
        "astId": 3380,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "token",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 3383,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "stayking",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 3386,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "interestModel",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 3392,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "debtAmountOf",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3395,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "totalDebtAmount",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 3399,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "pendingDebtShareOf",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3401,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "totalPendingDebtShare",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 3403,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "totalPendingDebtAmount",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 3405,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "minReservedBps",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 3407,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "yesterdayUtilRate",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 3409,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "accInterest",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      },
      {
        "astId": 3411,
        "contract": "contracts/token/Vault.sol:Vault",
        "label": "lastSavedUtilizationRateTime",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISwapHelper)159": {
        "encoding": "inplace",
        "label": "contract ISwapHelper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}