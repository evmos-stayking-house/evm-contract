{
  "address": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "name": "getDx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "getDy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x85cc46ac8189fff3a7e9dc777961cdd360e29a8c4f0b98d8a561f36bd26ca37a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
    "transactionIndex": 0,
    "gasUsed": "880083",
    "logsBloom": "0x
    "blockHash": "0x9f3122b7b286f3cc813359e413ab9865ef47688f29d0e0ae7fbd460ff40f012a",
    "transactionHash": "0x85cc46ac8189fff3a7e9dc777961cdd360e29a8c4f0b98d8a561f36bd26ca37a",
    "logs": [],
    "blockNumber": 19,
    "cumulativeGasUsed": "880083",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0000000000000000000000000000000000000000",
      "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      "0x0165878A594ca255338adfa4d48449f69242Eb8F",
      "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "ac64ae704e2e452e414a3e4f234c9225",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"name\":\"getDx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"getDy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"isSupported\":{\"details\":\"\\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub294 \\ub85c\\uceec \\ub178\\ub4dc \\ubc30\\ud3ec\\uc6a9 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c, EvmoSwapRouter\\uacfc \\uc720\\uc0ac\\ud55c \\uc5ed\\ud560\\uc744 \\ud558\\ub294 DEX\\ub77c\\uace0 \\uc0dd\\uac01\\ud558\\uba74 \\ub429\\ub2c8\\ub2e4. native token(EVMOS)\\uacfc \\ub098\\uba38\\uc9c0 \\ubaa8\\ub4e0 \\ud1a0\\ud070\\uc758 \\uad50\\ud658\\ube44\\ub294 \\uc784\\uc758\\ub85c 1: 2\\ub77c\\uace0 \\ub193\\uc558\\uc2b5\\ub2c8\\ub2e4. (EVMOS\\uc758 \\uac00\\uce58 = \\ub2e4\\ub978 \\ud1a0\\ud070\\uc758 \\uac00\\uce58 * 2) TODO \\ubc30\\ud3ec \\ud6c4 \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c \\uc720\\ub3d9\\uc131 \\ucd94\\uac00\\ud574 \\uc8fc\\uc5b4\\uc57c \\ud568. ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/MockSwap.sol\":\"MockSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/lib/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9e8a7188d698eea914eb3d07817fc539bdc152bee0b66567b6e911fd3293ce8d\",\"license\":\"MIT\"},\"contracts/lib/utils/SafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary SafeToken {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeApprove\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransfer\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransferFrom\\\"\\n        );\\n    }\\n\\n    function safeTransferEVMOS(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"!safeTransferEVMOS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3673f957556a65d32c0b4fca4aafcb2decf960c9a064b5008c1a43acd5f11ca5\",\"license\":\"MIT\"},\"contracts/mock/MockSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"../lib/interface/IERC20.sol\\\";\\nimport \\\"../lib/utils/SafeToken.sol\\\";\\n\\n\\ncontract MockSwap {\\n    \\n    /**\\n        @dev \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub294 \\ub85c\\uceec \\ub178\\ub4dc \\ubc30\\ud3ec\\uc6a9 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c,\\n        EvmoSwapRouter\\uacfc \\uc720\\uc0ac\\ud55c \\uc5ed\\ud560\\uc744 \\ud558\\ub294 DEX\\ub77c\\uace0 \\uc0dd\\uac01\\ud558\\uba74 \\ub429\\ub2c8\\ub2e4.\\n\\n        native token(EVMOS)\\uacfc \\ub098\\uba38\\uc9c0 \\ubaa8\\ub4e0 \\ud1a0\\ud070\\uc758 \\uad50\\ud658\\ube44\\ub294 \\uc784\\uc758\\ub85c 1: 2\\ub77c\\uace0 \\ub193\\uc558\\uc2b5\\ub2c8\\ub2e4.\\n        (EVMOS\\uc758 \\uac00\\uce58 = \\ub2e4\\ub978 \\ud1a0\\ud070\\uc758 \\uac00\\uce58 * 2)\\n\\n        TODO \\ubc30\\ud3ec \\ud6c4 \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c \\uc720\\ub3d9\\uc131 \\ucd94\\uac00\\ud574 \\uc8fc\\uc5b4\\uc57c \\ud568.\\n        ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);\\n     */\\n\\n    mapping(address => bool) public isSupported;\\n\\n    constructor (\\n        address[] memory tokens\\n    ){\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            isSupported[tokens[i]] = true;\\n        }\\n    }\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) public pure returns (uint256) {\\n        if(tokenX == address(0))\\n            return dy / 2;\\n        else if(tokenY == address(0))\\n            return dy * 2;\\n        else\\n            return dy;\\n    }\\n\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) public pure returns (uint256) {\\n        if(tokenX == address(0))\\n            return dx * 2;\\n        else if(tokenY == address(0))\\n            return dx / 2;\\n        else\\n            return dx;\\n    }\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 /* minDy */\\n    ) public payable returns(uint256 dy) {\\n        if(tokenX == address(0)){\\n            require(msg.value == dx, \\\"MockSwap: msg.value != dx\\\");\\n        } else {\\n            SafeToken.safeTransferFrom(tokenX, msg.sender, address(this), dx);\\n        }\\n\\n        dy = getDy(tokenX, tokenY, dx);\\n        if(tokenY == address(0)){\\n            SafeToken.safeTransferEVMOS(msg.sender, dy);\\n        } else {\\n            SafeToken.safeTransfer(tokenY, msg.sender, dy);\\n        }\\n    }\\n\\n    /// @dev Fallback function to accept EVMOS.\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x312bbedcd5991706bdff79e12919474c987eb82d7ec34379dac16399e8cb0e3b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010c5380380620010c58339818101604052810190620000379190620001b3565b60005b8151811015620000f257600160008084848151811062000083577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080620000e990620002c4565b9150506200003a565b50506200039b565b6000620001116200010b8462000221565b620001f8565b905080838252602082019050828560208602820111156200013157600080fd5b60005b858110156200016557816200014a88826200016f565b84526020840193506020830192505060018101905062000134565b5050509392505050565b600081519050620001808162000381565b92915050565b600082601f8301126200019857600080fd5b8151620001aa848260208601620000fa565b91505092915050565b600060208284031215620001c657600080fd5b600082015167ffffffffffffffff811115620001e157600080fd5b620001ef8482850162000186565b91505092915050565b60006200020462000217565b90506200021282826200028e565b919050565b6000604051905090565b600067ffffffffffffffff8211156200023f576200023e62000341565b5b602082029050602081019050919050565b60006200025d8262000264565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620002998262000370565b810181811067ffffffffffffffff82111715620002bb57620002ba62000341565b5b80604052505050565b6000620002d18262000284565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000307576200030662000312565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200038c8162000250565b81146200039857600080fd5b50565b610d1a80620003ab6000396000f3fe6080604052600436106100435760003560e01c80630ed2fc951461004f5780634f119bbd1461007f5780634f129c53146100bc5780637dceefee146100f95761004a565b3661004a57005b600080fd5b610069600480360381019061006491906107cd565b610136565b6040516100769190610a55565b60405180910390f35b34801561008b57600080fd5b506100a660048036038101906100a1919061077e565b610225565b6040516100b39190610a55565b60405180910390f35b3480156100c857600080fd5b506100e360048036038101906100de9190610755565b6102c3565b6040516100f091906109ba565b60405180910390f35b34801561010557600080fd5b50610120600480360381019061011b919061077e565b6102e3565b60405161012d9190610a55565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156101b3578234146101ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590610a15565b60405180910390fd5b6101c0565b6101bf85333086610381565b5b6101cb858585610225565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156102115761020c33826104ba565b61021d565b61021c8433836105e0565b5b949350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561026f576002826102689190610ac8565b90506102bc565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102b8576002826102b19190610a97565b90506102bc565b8190505b9392505050565b60006020528060005260406000206000915054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561032d576002826103269190610a97565b905061037a565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103765760028261036f9190610ac8565b905061037a565b8190505b9392505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016103b59392919061095a565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104039190610943565b6000604051808303816000865af19150503d8060008114610440576040519150601f19603f3d011682016040523d82523d6000602084013e610445565b606091505b509150915081801561047357506000815114806104725750808060200190518101906104719190610830565b5b5b6104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a990610a35565b60405180910390fd5b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115610515577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156105475781602001600182028036833780820191505090505b506040516105559190610943565b60006040518083038185875af1925050503d8060008114610592576040519150601f19603f3d011682016040523d82523d6000602084013e610597565b606091505b50509050806105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d2906109d5565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401610612929190610991565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106609190610943565b6000604051808303816000865af19150503d806000811461069d576040519150601f19603f3d011682016040523d82523d6000602084013e6106a2565b606091505b50915091508180156106d057506000815114806106cf5750808060200190518101906106ce9190610830565b5b5b61070f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610706906109f5565b60405180910390fd5b5050505050565b60008135905061072581610c9f565b92915050565b60008151905061073a81610cb6565b92915050565b60008135905061074f81610ccd565b92915050565b60006020828403121561076757600080fd5b600061077584828501610716565b91505092915050565b60008060006060848603121561079357600080fd5b60006107a186828701610716565b93505060206107b286828701610716565b92505060406107c386828701610740565b9150509250925092565b600080600080608085870312156107e357600080fd5b60006107f187828801610716565b945050602061080287828801610716565b935050604061081387828801610740565b925050606061082487828801610740565b91505092959194509250565b60006020828403121561084257600080fd5b60006108508482850161072b565b91505092915050565b61086281610b22565b82525050565b61087181610b34565b82525050565b600061088282610a70565b61088c8185610a7b565b935061089c818560208601610b6a565b80840191505092915050565b60006108b5601283610a86565b91506108c082610bfb565b602082019050919050565b60006108d8600d83610a86565b91506108e382610c24565b602082019050919050565b60006108fb601983610a86565b915061090682610c4d565b602082019050919050565b600061091e601183610a86565b915061092982610c76565b602082019050919050565b61093d81610b60565b82525050565b600061094f8284610877565b915081905092915050565b600060608201905061096f6000830186610859565b61097c6020830185610859565b6109896040830184610934565b949350505050565b60006040820190506109a66000830185610859565b6109b36020830184610934565b9392505050565b60006020820190506109cf6000830184610868565b92915050565b600060208201905081810360008301526109ee816108a8565b9050919050565b60006020820190508181036000830152610a0e816108cb565b9050919050565b60006020820190508181036000830152610a2e816108ee565b9050919050565b60006020820190508181036000830152610a4e81610911565b9050919050565b6000602082019050610a6a6000830184610934565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610aa282610b60565b9150610aad83610b60565b925082610abd57610abc610bcc565b5b828204905092915050565b6000610ad382610b60565b9150610ade83610b60565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b1757610b16610b9d565b5b828202905092915050565b6000610b2d82610b40565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610b88578082015181840152602081019050610b6d565b83811115610b97576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f21736166655472616e7366657245564d4f530000000000000000000000000000600082015250565b7f21736166655472616e7366657200000000000000000000000000000000000000600082015250565b7f4d6f636b537761703a206d73672e76616c756520213d20647800000000000000600082015250565b7f21736166655472616e7366657246726f6d000000000000000000000000000000600082015250565b610ca881610b22565b8114610cb357600080fd5b50565b610cbf81610b34565b8114610cca57600080fd5b50565b610cd681610b60565b8114610ce157600080fd5b5056fea2646970667358221220accd9700ac735a1b74413ea1fcdf6bfe743629272e7bb17b59af1ef913af100f64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100435760003560e01c80630ed2fc951461004f5780634f119bbd1461007f5780634f129c53146100bc5780637dceefee146100f95761004a565b3661004a57005b600080fd5b610069600480360381019061006491906107cd565b610136565b6040516100769190610a55565b60405180910390f35b34801561008b57600080fd5b506100a660048036038101906100a1919061077e565b610225565b6040516100b39190610a55565b60405180910390f35b3480156100c857600080fd5b506100e360048036038101906100de9190610755565b6102c3565b6040516100f091906109ba565b60405180910390f35b34801561010557600080fd5b50610120600480360381019061011b919061077e565b6102e3565b60405161012d9190610a55565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156101b3578234146101ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590610a15565b60405180910390fd5b6101c0565b6101bf85333086610381565b5b6101cb858585610225565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156102115761020c33826104ba565b61021d565b61021c8433836105e0565b5b949350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561026f576002826102689190610ac8565b90506102bc565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102b8576002826102b19190610a97565b90506102bc565b8190505b9392505050565b60006020528060005260406000206000915054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561032d576002826103269190610a97565b905061037a565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103765760028261036f9190610ac8565b905061037a565b8190505b9392505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016103b59392919061095a565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104039190610943565b6000604051808303816000865af19150503d8060008114610440576040519150601f19603f3d011682016040523d82523d6000602084013e610445565b606091505b509150915081801561047357506000815114806104725750808060200190518101906104719190610830565b5b5b6104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a990610a35565b60405180910390fd5b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115610515577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156105475781602001600182028036833780820191505090505b506040516105559190610943565b60006040518083038185875af1925050503d8060008114610592576040519150601f19603f3d011682016040523d82523d6000602084013e610597565b606091505b50509050806105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d2906109d5565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401610612929190610991565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106609190610943565b6000604051808303816000865af19150503d806000811461069d576040519150601f19603f3d011682016040523d82523d6000602084013e6106a2565b606091505b50915091508180156106d057506000815114806106cf5750808060200190518101906106ce9190610830565b5b5b61070f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610706906109f5565b60405180910390fd5b5050505050565b60008135905061072581610c9f565b92915050565b60008151905061073a81610cb6565b92915050565b60008135905061074f81610ccd565b92915050565b60006020828403121561076757600080fd5b600061077584828501610716565b91505092915050565b60008060006060848603121561079357600080fd5b60006107a186828701610716565b93505060206107b286828701610716565b92505060406107c386828701610740565b9150509250925092565b600080600080608085870312156107e357600080fd5b60006107f187828801610716565b945050602061080287828801610716565b935050604061081387828801610740565b925050606061082487828801610740565b91505092959194509250565b60006020828403121561084257600080fd5b60006108508482850161072b565b91505092915050565b61086281610b22565b82525050565b61087181610b34565b82525050565b600061088282610a70565b61088c8185610a7b565b935061089c818560208601610b6a565b80840191505092915050565b60006108b5601283610a86565b91506108c082610bfb565b602082019050919050565b60006108d8600d83610a86565b91506108e382610c24565b602082019050919050565b60006108fb601983610a86565b915061090682610c4d565b602082019050919050565b600061091e601183610a86565b915061092982610c76565b602082019050919050565b61093d81610b60565b82525050565b600061094f8284610877565b915081905092915050565b600060608201905061096f6000830186610859565b61097c6020830185610859565b6109896040830184610934565b949350505050565b60006040820190506109a66000830185610859565b6109b36020830184610934565b9392505050565b60006020820190506109cf6000830184610868565b92915050565b600060208201905081810360008301526109ee816108a8565b9050919050565b60006020820190508181036000830152610a0e816108cb565b9050919050565b60006020820190508181036000830152610a2e816108ee565b9050919050565b60006020820190508181036000830152610a4e81610911565b9050919050565b6000602082019050610a6a6000830184610934565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610aa282610b60565b9150610aad83610b60565b925082610abd57610abc610bcc565b5b828204905092915050565b6000610ad382610b60565b9150610ade83610b60565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b1757610b16610b9d565b5b828202905092915050565b6000610b2d82610b40565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610b88578082015181840152602081019050610b6d565b83811115610b97576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f21736166655472616e7366657245564d4f530000000000000000000000000000600082015250565b7f21736166655472616e7366657200000000000000000000000000000000000000600082015250565b7f4d6f636b537761703a206d73672e76616c756520213d20647800000000000000600082015250565b7f21736166655472616e7366657246726f6d000000000000000000000000000000600082015250565b610ca881610b22565b8114610cb357600080fd5b50565b610cbf81610b34565b8114610cca57600080fd5b50565b610cd681610b60565b8114610ce157600080fd5b5056fea2646970667358221220accd9700ac735a1b74413ea1fcdf6bfe743629272e7bb17b59af1ef913af100f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "isSupported": {
        "details": "본 컨트랙트는 로컬 노드 배포용 컨트랙트로, EvmoSwapRouter과 유사한 역할을 하는 DEX라고 생각하면 됩니다. native token(EVMOS)과 나머지 모든 토큰의 교환비는 임의로 1: 2라고 놓았습니다. (EVMOS의 가치 = 다른 토큰의 가치 * 2) TODO 배포 후 본 컨트랙트로 유동성 추가해 주어야 함. ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1777,
        "contract": "contracts/mock/MockSwap.sol:MockSwap",
        "label": "isSupported",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}