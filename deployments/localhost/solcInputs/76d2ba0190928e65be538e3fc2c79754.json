{
  "language": "Solidity",
  "sources": {
    "contracts/CoinPricingOracle.sol": {
      "content": "//// SPDX-License-Identifier: UNLICENSED\n//pragma solidity >=0.6.0 <0.8.0;\n//\n//import \"./libs/provableAPI.sol\";\n//\n//contract OracleContract is usingProvable {\n//    // for storing the query ids\n//    bytes32 BTC_ID;\n//    bytes32 regular_ID;\n//    // for storing BTC and fuel price\n//    string public BTC_USD;\n//    string public FUEL_Price;\n//    // events\n//    event ValueUpdated(string price);\n//    event ProvableQueryCalled(string description);\n//    // save the address of the owner of this contract\n//    address payable owner = msg.sender;\n//    // callback for the query\n//    function __callback(bytes32 myid, string memory result) public\n//    override {\n//        // update only if you are the caller\n//        require(msg.sender == provable_cbAddress());\n//        if (myid == BTC_ID)\n//            BTC_USD = result;\n//        else if (myid == regular_ID)\n//            FUEL_Price = result;\n//        emit ValueUpdated(result);\n//    }\n//    // helper function to store 2 strings\n//    function compareStrings(string memory a, string memory b)\n//    private pure returns (bool) {\n//        return (keccak256(abi.encodePacked((a))) ==\n//        keccak256(abi.encodePacked((b))));\n//    }\n//    // call this function to access web services\n//    function updatePrice(string memory updateType) public payable {\n//        // only the owner can invoke this function\n//        require(msg.sender == owner,\n//            'Only the owner of this contract can call this function');\n//        if (provable_getPrice(\"URL\") > address(this).balance) {\n//            emit ProvableQueryCalled(\"Please ensure that your wallet have sufficient funds to pay for the query\");\n//        } else {\n//            emit ProvableQueryCalled(\"Query sent, please wait\");\n//            if (compareStrings(updateType,\"BTC\"))\n//                BTC_ID = provable_query(\"URL\", \"json(https://api.pro.coinbase.com/products/BTC-USD/ticker).price\");\n//            if (compareStrings(updateType,\"FUEL\"))\n//                regular_ID = provable_query(\"URL\",\n//                    \"xml(https://www.fueleconomy.gov/ws/rest/fuelprices).fuelPrices.regular\");\n//        }\n//    }\n//    function refund() public {\n//        require(msg.sender == owner,\n//            'Only the owner of this contract can call this function');\n//        // refund back to the owner the funds in the contract\n//        owner.transfer(address(this).balance);\n//    }\n//    receive() external payable {}\n//}\n//\n"
    },
    "contracts/interface/EvmoSwap/IEvmoSwapFactory.sol": {
      "content": ""
    },
    "contracts/interface/EvmoSwap/IEvmoSwapRouter.sol": {
      "content": ""
    },
    "contracts/interface/IInterestModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.3;\n\ninterface IInterestModel {\n    function calcInterestRate(uint256 debt, uint256 floating)\n        external\n        pure\n        returns (uint256);\n}\n"
    },
    "contracts/token/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../interface/IVault.sol\";\nimport \"../interface/IInterestModel.sol\";\nimport \"../interface/ISwapHelper.sol\";\nimport \"../lib/ERC20Upgradeable.sol\";\nimport \"../lib/OwnableUpgradeable.sol\";\nimport \"../lib/interface/IERC20.sol\";\nimport \"../lib/utils/SafeToken.sol\";\n\n\n/************************************************************\n * @dev Glossary\n * amount vs share\n * amount => unit of baseToken\n * share => unit of ibToken\n *************************************************************/\ncontract Vault is IVault, ERC20Upgradeable, OwnableUpgradeable {\n\n    address public constant BASE_TOKEN = address(0);\n\n    event Deposit(address user, uint256 amount, uint256 share);\n    event Withdraw(address user, uint256 amount, uint256 share);\n    event Loan(address user, uint256 debtAmount);\n    event Repay(address user, uint256 debtAmount);\n    event PayInterest(uint256 paidInterest, uint256 leftInterest);\n    event TransferDebtOwnership(address from, address to, uint256 amount);\n    event UtilizationRate(uint256 rateBps);\n\n    ISwapHelper public swapHelper;\n\n    address public override token;\n    address public override stayking;\n    address public override interestModel;\n\n    /**\n        @dev\n        totalAmount == Token.balanceOf(this) + totalDebtAmount\n        totalShare == totalSupply()\n     */\n\n    // Debt Amounts\n    mapping(address => uint256) public override debtAmountOf;\n    uint256 public override totalDebtAmount;\n\n    // Pending Debts\n    mapping(address => uint256) public pendingDebtShareOf;\n    uint256 totalPendingDebtShare;\n    uint256 totalPendingDebtAmount;\n\n    uint256 minReservedBps;\n    uint256 yesterdayUtilRate;\n    uint256 accInterest;\n\n    uint lastSavedUtilizationRateTime;\n\n    /*************\n     * Modifiers *\n    **************/\n\n    modifier onlyStayking(){\n        require(msg.sender == stayking, \"Vault: Not Stayking contract.\");\n        _;\n    }\n\n    /****************\n     * Initializer *\n    *****************/\n\n    function __Vault_init(\n        string calldata _name,\n        string calldata _symbol,\n        address _stayking,\n        address _token,\n        address _interestModel,\n        uint256 _minReservedBps\n    ) external initializer {\n        require(_stayking != address(0), \"Vault: Stayking address is zero\");\n        require(_token != address(0), \"Vault: Base Token is zero address\");\n        \n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        stayking = _stayking;\n        token = _token;\n        interestModel = _interestModel;\n        minReservedBps = _minReservedBps;\n\n        // @TODO changed\n        lastSavedUtilizationRateTime = block.timestamp - \n            ((block.timestamp - 1639098000) % 1 days);\n    }\n\n    // @dev (token in vault) + (debt)\n    function totalAmount() public override view returns(uint256){\n        return IERC20(token).balanceOf(address(this)) + totalDebtAmount;\n    }\n\n    function updateMinReservedBps(uint256 newMinReservedBps) public override onlyOwner {\n        minReservedBps = newMinReservedBps;\n    }\n\n    function updateStayking(address newStaykingAddress) public override onlyOwner {\n        stayking = newStaykingAddress;\n    }\n\n    function amountToShare(\n        uint256 amount\n    ) public view returns(uint256) {\n        uint256 _totalAmount = totalAmount();\n        return (_totalAmount == 0) ? amount :\n            (totalSupply() * amount) / _totalAmount;\n    }\n\n    function shareToAmount(\n        uint256 share\n    ) public view returns(uint256) {\n        uint256 totalShare = totalSupply();\n        return (totalShare == 0) ? share :\n            (totalAmount() * share) / totalShare;\n    }\n\n    function pendingDebtAmountToShare(\n        uint256 amount\n    ) public view returns(uint256) {\n        return (totalPendingDebtAmount == 0) ? amount : \n            (totalPendingDebtShare * amount) / totalPendingDebtAmount;\n    }\n\n    function pendingDebtShareToAmount(\n        uint256 share\n    ) public view returns(uint256) {\n        return (totalPendingDebtShare == 0) ? share : \n            (totalPendingDebtAmount * share) / totalPendingDebtShare;\n    }\n\n    /// @dev denominator = 1E18 \n    function getInterestRate() public override view returns(uint256 interestRate){\n        interestRate = IInterestModel(interestModel)\n            .calcInterestRate(\n                totalDebtAmount,\n                IERC20(token).balanceOf(address(this))\n            );\n    }\n\n    function utilizationRateBps() public override view returns(uint256){\n        return 1E4 * totalDebtAmount / totalAmount();\n    }\n\n    function saveUtilizationRateBps() public override {\n        if (block.timestamp >= lastSavedUtilizationRateTime + 1 days) {\n            yesterdayUtilRate = utilizationRateBps();\n            lastSavedUtilizationRateTime += 1 days;\n            accInterest += (totalDebtAmount * getInterestRate() / 1E18);\n            emit UtilizationRate(yesterdayUtilRate);\n        }\n    }\n    \n    /************************************\n     * interface IVault Implementations\n     ************************************/\n\n    /// @notice user approve should be preceded\n    function deposit(uint256 amount) public override returns(uint256 share){\n        share = amountToShare(amount);\n        SafeToken.safeTransferFrom(token, msg.sender, address(this), amount);\n        _mint(msg.sender, share);\n\n        emit Deposit(msg.sender, amount, share);\n    }\n\n    function withdraw(uint256 share) public override returns(uint256 amount){\n        amount = shareToAmount(share);\n        _burn(msg.sender, share);\n        SafeToken.safeTransfer(token, msg.sender, amount);\n\n        emit Withdraw(msg.sender, amount, share);\n    }\n\n    /// @notice loan is only for Stayking contract.\n    function loan(\n        address user,\n        uint256 amount\n    ) public override onlyStayking {\n        debtAmountOf[user] += amount;\n        totalDebtAmount += amount;\n        require(\n            totalDebtAmount * 1E4 <= totalAmount() * minReservedBps,\n            \"Loan: Cant' loan debt anymore.\"\n        );\n        SafeToken.safeTransfer(token, msg.sender, amount);\n        emit Loan(user, amount);\n    }\n\n    // @TODO Should approve MAX_UINT?\n    /// @dev Repay user's debt.\n    /// Stayking should approve token first.\n    function repay(\n        address user,\n        uint256 amount\n    ) public override onlyStayking {\n        debtAmountOf[user] -= amount;\n        totalDebtAmount -= amount;\n        SafeToken.safeTransferFrom(token, user, address(this), amount);\n        emit Repay(user, amount);\n    }\n\n    function takeDebtOwnership(\n        address from,\n        uint256 amount\n    ) public override onlyStayking {\n        debtAmountOf[from] -= amount;\n        debtAmountOf[msg.sender] += amount;\n        emit TransferDebtOwnership(from, msg.sender, amount);\n    }\n\n    function payInterest() public payable override onlyStayking {\n        uint256 paidInterest = swapHelper.exchange(BASE_TOKEN, token, msg.value, 1);\n        require(accInterest >= paidInterest, \"msg.value is greater than accumulated interest.\");\n        unchecked {\n            accInterest -= paidInterest;\n        }\n        emit PayInterest(paidInterest, accInterest);\n    }\n\n    /// @dev pending repay debt because of EVMOS Unstaking's 14 days lock.\n    /// @notice User can instantly repay some of their debts with their tokens.\n    /// Stayking should approve token first.\n    function pendRepay(\n        address user,\n        uint256 instantRepayment\n    ) public override onlyStayking {\n        if(instantRepayment > 0){\n            repay(user, instantRepayment);\n        }\n\n        uint256 pendingDebtAmount = debtAmountOf[user];\n        uint256 pendingDebtShare = pendingDebtAmountToShare(pendingDebtAmount);\n        pendingDebtShareOf[user] = pendingDebtShare;\n        totalPendingDebtShare += pendingDebtShare;\n        totalPendingDebtAmount += pendingDebtAmount;\n    }\n\n    function calcPendingDebtInBase(\n        address user\n    ) public view override returns(uint256){\n        return swapHelper.getDx(\n            BASE_TOKEN, \n            token,\n            pendingDebtShareToAmount(pendingDebtShareOf[user])\n        );\n    }\n\n    /// @dev stayking should send with value: repayingDebt \n    function repayPendingDebt(\n        address user,\n        uint256 minRepaidDebt\n    ) public payable override onlyStayking {\n\n        uint256 repaidDebtAmount = swapHelper.exchange(BASE_TOKEN, token, msg.value, minRepaidDebt);\n        require(\n            repaidDebtAmount <= pendingDebtShareToAmount(pendingDebtShareOf[user]),\n            \"repayPendingDebt: too much msg.value to repay debt\"\n        );\n\n        uint256 repaidDebtShare = pendingDebtAmountToShare(repaidDebtAmount);\n        pendingDebtShareOf[user] -= repaidDebtShare;\n    }\n}"
    },
    "contracts/interface/IVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n\ninterface IVault { \n\n    function token() external returns(address);\n    \n    function stayking() external returns(address);\n\n    function interestModel() external returns(address);\n\n    function totalAmount() external view returns(uint256);\n\n    function debtAmountOf(address user) external view returns(uint256);\n\n    function totalDebtAmount() external view returns(uint256);\n\n    function utilizationRateBps() external view returns(uint256);\n\n    /// @dev denominator = 1E18 \n    function getInterestRate() external view returns(uint256);\n\n    function saveUtilizationRateBps() external;\n\n    function deposit(uint256 amount) external returns(uint256);\n\n    function withdraw(uint256 share) external returns(uint256);\n\n    /******************************\n     * Only for Stayking Contract *\n     ******************************/\n    function loan(address user, uint256 amount) external;\n\n    function repay(address user, uint256 amount) external;\n\n    function takeDebtOwnership(\n        address from,\n        uint256 amount\n    ) external;\n\n    function payInterest() external payable;\n\n    function pendRepay(address user, uint256 instantRepayment) external;\n\n    function calcPendingDebtInBase(address user) external view returns(uint256);\n\n    function repayPendingDebt(address user, uint256 minRepaidDebt) payable external;\n\n    function updateStayking(address newStaykingAddress) external;\n\n    function updateMinReservedBps(uint256 newMinReservedBps) external;\n}"
    },
    "contracts/interface/ISwapHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/************************************************************\n * @dev\n * Glossary\n * X : Input Token\n * Y : Output Token\n * Dx : Amount of Input Token\n * Dy : Amount of Output Token\n *************************************************************/\ninterface ISwapHelper {\n\n    function getDy(\n        address tokenX,\n        address tokenY,\n        uint256 dx\n    ) external view returns (uint256 dy);\n\n    function getDx(\n        address tokenX,\n        address tokenY,\n        uint256 dy\n    ) external view returns (uint256 dx);\n\n    function exchange(\n        address tokenX,\n        address tokenY,\n        uint256 dx,\n        uint256 minDy\n    ) payable external returns (uint256 dy);\n}"
    },
    "contracts/lib/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.2;\n\nimport \"./interface/IERC20.sol\";\nimport \"./ContextUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/lib/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ContextUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/lib/interface/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/lib/utils/SafeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nlibrary SafeToken {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeApprove\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeTransfer\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeTransferFrom\"\n        );\n    }\n\n    function safeTransferEVMOS(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"!safeTransferEVMOS\");\n    }\n}\n"
    },
    "contracts/lib/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.2;\nimport \"./Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/lib/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"./AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "contracts/lib/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/token/Stayking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../interface/IStayking.sol\";\nimport \"../interface/IVault.sol\";\nimport \"../interface/ISwapHelper.sol\";\nimport \"../lib/utils/SafeToken.sol\";\nimport \"../lib/OwnableUpgradeable.sol\";\nimport \"../lib/ReentrancyGuardUpgradeable.sol\";\n\ncontract Stayking is IStayking, OwnableUpgradeable, ReentrancyGuardUpgradeable {\n\n    address public constant BASE_TOKEN = address(0);\n\n    event Stake(address user, uint256 amount, uint256 share);\n    event Unstake(address user, uint256 amount, uint256 share);\n    event AddPosition(address user, address vault, uint256 equity, uint256 debtInBase, uint256 debt, uint256 share);\n    event RemovePosition(address user, address vault, uint256 equity, uint256 debtInBase, uint256 debt, uint256 share);\n    event PositionChanged(address user, address vault, uint256 amount, uint256 share, uint256 debt);\n    // @TODO\n    event Kill(address user); \n    event Accrue(address delegator, uint256 amount);\n\n    // Operation Events\n    event AddVault(address token, address vault);\n    event ChangeVault(address token, address vault);\n    event ChangeConfigs(uint256 minDebtInBase, uint256 killFactorBps);\n    event ChangeSwapHelper(address swapHelper);\n\n    mapping(address => bool) public whitelistedDelegator;\n    mapping(address => bool) public whitelistedKiller;\n\n    mapping(address => address) public override tokenToVault;\n\n    /// @dev kor) 유저가 예치한 금액 + auto-compound된 금액\n    uint256 public totalAmount; \n    /// @dev kor) auto-compound되어도 totalShare는 변하지 않음.\n    ///  유저는 예치하는 시점에 (예치 금액/totalAmount) * totalShare에 해당하는 share를 받음.\n    uint256 public totalShare;  \n\n    /// @dev min debtAmount in EVMOS (base token)\n    uint256 public override minDebtInBase;\n    uint256 public override killFactorBps;\n\n    struct Position {\n        address user;\n        // uint256 equity;\n        // uint256 debtInBase;\n        /// @dev totalShare * (equity + debtInBase) / totalAmount\n        uint256 share;\n    }\n\n    /// @dev userAddress => vaultAddress => positionId (array Index of position)\n    mapping(address => mapping(address => uint256)) public positionIdOf;\n    /// @dev vaultAddress => Position[]\n    mapping(address => Position[]) public positions;\n    mapping(address => uint256) public positionsLengthOf;\n\n    // debt To Vault\n    mapping (address => uint256) public totalDebtOf;\n\n    ISwapHelper public swapHelper;\n\n    /*************\n     * Modifiers *\n    **************/\n\n    modifier onlyDelegator(){\n        require(\n            whitelistedDelegator[msg.sender],\n            \"Stayking: Not whitelisted delegator.\"\n        );\n        _;\n    }\n\n    modifier onlyKiller(){\n        require(\n            whitelistedKiller[msg.sender],\n            \"Stayking: Not whitelisted Killer.\"\n        );\n        _;\n    }\n\n    function __Stayking_init(\n        address swapHelper_\n    ) external initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        // @TODO policy\n        setConfigs(\n            10e18,  // minDebtInBase\n            8000    // killFactorBps\n        );\n\n        changeSwapHelper(swapHelper_);\n    }\n\n    /**********************\n     * Operate Functions *\n    ***********************/\n\n    function setWhitelistDelegatorStatus(\n        address delegator, \n        bool status\n    ) public override onlyOwner {\n        whitelistedDelegator[delegator] = status;\n    }\n\n    function setVault(\n        address token, \n        address vault\n    ) public override onlyOwner {\n        bool isNewVault = (tokenToVault[token] == address(0));\n\n        if(isNewVault)\n            emit AddVault(token, vault);\n        else {\n            require(\n                IVault(tokenToVault[token]).totalDebtAmount() == 0,\n                \"setVault: Debt remains on the existing vault.\"\n            );\n            emit ChangeVault(token, vault);\n        }\n\n        tokenToVault[token] = vault;\n        // push null position\n        positions[vault].push(\n            Position({\n                user: address(0),\n                share: 0\n            })\n        );\n    }\n\n    function setConfigs(\n        uint256 _minDebtInBase,\n        uint256 _killFactorBps\n    ) public onlyOwner {\n        minDebtInBase = _minDebtInBase;\n        killFactorBps = _killFactorBps;\n        emit ChangeConfigs(_minDebtInBase, _killFactorBps);\n    }\n\n    function changeSwapHelper(\n      address _newSwapHelper\n    ) public onlyOwner {\n        swapHelper = ISwapHelper(_newSwapHelper);\n        emit ChangeSwapHelper(_newSwapHelper);\n    }\n\n\n    /***********************\n     * Private Functions *\n    ************************/\n    function _swapFromBaseToToken(\n        address token,\n        uint256 dx,\n        uint256 minDy\n    ) private returns (uint256 dy){\n        dy = swapHelper.exchange{value: dx}(token, BASE_TOKEN, dx, minDy);\n    }\n    function _swapFromTokenToBase(\n        address token,\n        uint256 dx,\n        uint256 minDy\n    ) private returns (uint256 dy){\n        SafeToken.safeApprove(token, address(swapHelper), dx);\n        // @TODO should check if success\n        dy = swapHelper.exchange(token, BASE_TOKEN, dx, minDy);\n    }\n\n\n    /// @dev\n    /// In the name of the user, borrow token from the vault.\n    /// kor) debtInBase의 양에 해당하는 만큼 debtToken으로 스왑한다.\n    function _borrowAndSwapEvmos(\n        address user,\n        address token,\n        address vault,\n        uint256 debtInBase\n    ) private returns(uint256 debt) {\n        // calculate amount to borrow\n        debt = swapHelper.getDx(token, BASE_TOKEN, debtInBase);\n\n        IVault(vault).loan(user, debt);\n        _swapFromTokenToBase(token, debt, debtInBase);\n    }\n\n\n    function _stake(\n        address user,\n        uint256 amount\n    ) private returns (uint256 share) {\n        share = amountToShare(amount);\n        totalAmount += amount;\n        totalShare += share;\n        /**\n            @TODO\n         */\n        \n        emit Stake(user, amount, share);\n    }\n\n\n    /// @notice\n    /**\n     * @notice\n    kor)\n    1) 유저가 unstake 요청을 했을 때 Stayking 컨트랙트에서 즉시 빚을 갚아줄지,\n    2) 14일 이후에 유저가 직접 갚도록 해야 할 지\n\n    1번은 구현은 쉬우나 컨트랙트 내에 여유자금이 충분해야 하고,\n    우리가 강제로 14일 롱포지션을 갖는 것이기 때문에 EVMOS 가격 급락 시 리스크가 매우 크다.\n\n    2번은 stEVMOS 컨트랙트에 Lock할 때 빚까지 같이 저장해주어야 한다.\n    빚이 있으므로 stEVMOS를 transfer & withdraw를 모두 14일 동안 제한학고,\n    14일 이후 stEVMOS를 withdraw할 때 빚까지 같이 갚도록 해야 한다.\n\n     */\n    function _unstake(\n        address user,\n        uint256 amount,\n        uint256 share\n    ) private{\n        /** \n            @TODO\n            /IMPL/\n        */\n        totalAmount -= amount;\n        totalShare -= share;\n\n        emit Unstake(user, amount, share);\n    }\n\n    /// @dev\n    /// In the name of the user, borrow token from the vault.\n    function _swapAndRepay(\n        address user,\n        address token,\n        address vault,\n        uint256 debt\n    ) private returns(uint256 repaidInBase) {\n        repaidInBase = swapHelper.getDx(BASE_TOKEN, token, debt);\n        _swapFromTokenToBase(token, repaidInBase, debt);\n\n        /**\n        @TODO\n         */\n    }\n\n    function _isHealthy(\n        address token,\n        uint256 share,\n        uint256 debt\n    ) private view returns(bool) {\n        uint256 debtInBase = swapHelper.getDx(BASE_TOKEN, token, debt);\n        return debtInBase * 1e4 < shareToAmount(share) * killFactorBps; \n    }\n\n    /******************\n     * Util Functions *\n    *******************/\n    /// @notice \n    /// 유저는 예치하는 시점에 (예치 금액 / totalAmount) * totalShare에 해당하는 share를 받음.\n    function amountToShare(\n        uint256 amount\n    ) public view returns(uint256) {\n        return (totalAmount == 0) ? amount :\n            (totalShare * amount) / totalAmount;\n    }\n\n    function shareToAmount(\n        uint256 share\n    ) public view returns(uint256) {\n        return (totalShare == 0) ? share :\n            (totalAmount * share) / totalShare;\n    }\n\n    /******************************\n     * Interface implementations *\n    *******************************/\n    function debtAmountOf(\n        address user, \n        address vault\n    ) public view override returns(uint256) {\n        return IVault(vault).debtAmountOf(user);\n    }\n\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param equity       equityAmount in EVMOS\n    /// @param debtInBase   debtAmount in EVMOS\n    function addPosition(\n        address debtToken,\n        uint256 equity,\n        uint256 debtInBase\n    ) public payable override {\n        address vault = tokenToVault[debtToken];\n        require(positionIdOf[msg.sender][vault] > 0, \"addPosition: already have position\");\n        require(equity == msg.value, \"addPosition: msg.value != equity\");\n        \n        uint256 amount = equity + debtInBase;\n        require(\n            debtInBase * 1e4 < amount * killFactorBps,\n            \"addPosition: bad debt, cannot open position\"\n        );\n\n        // borrow token from vault\n        // @TODO should be tested\n        // debtAmount in debtToken (not in EVMOS)\n        uint256 debt = _borrowAndSwapEvmos(\n            msg.sender,\n            debtToken,\n            vault,\n            debtInBase\n        );\n\n        uint256 share = _stake(msg.sender, amount);\n\n        // write new position state\n        positions[vault].push(\n            Position({\n                user: msg.sender,\n                share: share\n            })\n        );\n\n        uint256 positionId = positionsLengthOf[vault];\n        positionsLengthOf[vault] += 1;\n        positionIdOf[msg.sender][vault] = positionId;\n\n        emit AddPosition(msg.sender, vault, equity, debtInBase, debt, share);\n    }\n\n\n    /// @dev remove all position of debtToken vault.\n    /// @param debtToken    debtToken Address (not vault address)\n    function removePosition(\n        address debtToken\n    ) public override {\n        address vault = tokenToVault[debtToken];\n        Position storage p = positions[vault][positionIdOf[msg.sender][vault]];\n        require(p.share > 0, \"removePosition: No position for this token\");\n\n        uint256 debtAmount = debtAmountOf(msg.sender, vault);\n        // 1. check if user can repay debt\n        /// @dev amount in EVMOS that user have to repay\n        uint256 currentDebtInBase = swapHelper.getDx(\n            BASE_TOKEN, \n            debtToken, \n            debtAmount\n        );\n\n        uint stakedAmount = shareToAmount(p.share);\n\n        require(\n            stakedAmount >= currentDebtInBase,\n            \"removePosition: Bad debt\"\n        );\n\n        _unstake(msg.sender, stakedAmount, p.share);\n\n        emit RemovePosition(\n            msg.sender, \n            vault, \n            stakedAmount - currentDebtInBase, \n            currentDebtInBase, \n            debtAmount, \n            p.share\n        );\n\n        p.share = 0;\n\n        positionIdOf[msg.sender][vault] = 0; // kor) positionId 초기화\n    }\n\n    /// @dev Borrow more debt (increase debt ratio)\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param extraDebtInBase  amount of additional debt in EVMOS\n    function addDebt(\n        address debtToken,\n        uint256 extraDebtInBase\n    ) public override {\n        address vault = tokenToVault[debtToken];        \n        Position storage p = positions[vault][positionIdOf[msg.sender][vault]];\n\n        require(p.share > 0, \"addDebt: no position in for this token.\");\n        require(extraDebtInBase > 0, \"addDebt: extraDebtInBase <= 0\");\n\n        // borrow token from vault\n        _borrowAndSwapEvmos(\n            msg.sender,\n            debtToken,\n            vault,\n            extraDebtInBase\n        );\n\n        uint256 extraShare = amountToShare(extraDebtInBase);\n        p.share += extraShare;\n\n        uint256 debtAmount = debtAmountOf(msg.sender, vault);\n\n        require(\n            _isHealthy(debtToken, p.share, debtAmount),\n            \"addDebt: bad debt, cannot add more debt anymore.\"\n        );\n\n        _stake(msg.sender, extraDebtInBase);\n\n        emit PositionChanged(\n            msg.sender, \n            vault, \n            shareToAmount(p.share),\n            p.share,\n            debtAmount\n        );\n\n    }\n\n    /// @dev Repay debt (decrease debt ratio, total staked amount(or share) does not change)\n    /// @notice user should repay debt using debtToken\n    /// @notice user approve should be preceded\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param repaidDebt  amount of repaid debt in debtToken\n    function repayDebt(\n        address debtToken,\n        uint256 repaidDebt\n    ) public override {\n        address vault = tokenToVault[debtToken];        \n        Position storage p = positions[vault][positionIdOf[msg.sender][vault]];\n        uint256 debtAmount = debtAmountOf(msg.sender, vault); \n        require(debtAmount >= repaidDebt, \"repayDebt: too much repaid debt\");\n\n        SafeToken.safeTransferFrom(\n            debtToken,\n            msg.sender,\n            address(this),\n            repaidDebt\n        );\n\n        SafeToken.safeApprove(debtToken, vault, repaidDebt);\n\n        IVault(vault).repay(msg.sender, repaidDebt);\n\n        emit PositionChanged(\n            msg.sender, \n            vault, \n            shareToAmount(p.share),\n            p.share,\n            debtAmount - repaidDebt\n        );    \n    }\n\n\n    /// @dev add additional equity (decrease debt ratio)\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param extraEquity  amount of additional equity\n    function addEquity(\n        address debtToken,\n        uint256 extraEquity\n    ) payable public override {\n        address vault = tokenToVault[debtToken];        \n        Position storage p = positions[vault][positionIdOf[msg.sender][vault]];\n\n        _stake(msg.sender, extraEquity);\n        p.share += amountToShare(extraEquity);\n\n        emit PositionChanged(\n            msg.sender, \n            vault, \n            shareToAmount(p.share),\n            p.share,\n            debtAmountOf(msg.sender, vault)\n        ); \n    }\n\n\n    function isKillable(\n        address debtToken,\n        uint256 positionId\n    ) public override view returns(bool) {\n        address vault = tokenToVault[debtToken];\n        Position memory p = positions[vault][positionId];\n        return _isHealthy(debtToken, p.share, debtAmountOf(p.user, vault));\n    }\n    \n    function kill(\n        address debtToken,\n        uint256 positionId\n    ) public override onlyKiller {\n        address vault = tokenToVault[debtToken];\n        Position storage p = positions[vault][positionId];\n        require(\n            _isHealthy(debtToken, p.share, debtAmountOf(p.user, vault)),\n            \"Kill: still safe position.\"\n        );\n\n        uint256 amount = shareToAmount(p.share);\n        /**\n            @TODO\n            \n         */\n        _unstake(p.user, amount, p.share);\n\n        /// @TODO\n        emit Kill(p.user);\n    }\n\n    /***********************\n     * Only for Delegator *\n     ***********************/\n    function delegate(\n        uint256 amount\n    ) public onlyDelegator override {\n\n    }\n\n    function accrue(\n        uint256 amount\n    ) payable public onlyDelegator override {\n\n    }\n}"
    },
    "contracts/interface/IStayking.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n\n/************************************************************\n * @dev\n * Glossary\n * debt : debtAmount in borrowing token (e.g. OSMO, ATOM)\n * debtInBase: debtAmount in EVMOS(Base Token)\n *************************************************************/\ninterface IStayking { \n\n    // struct Position {\n    //     address user;\n    //     address vault;\n    //     uint256 equity;\n    //     uint256 debt;\n    //     uint256 lastHarvestedAt;\n    // }\n\n    function setVault(address token, address vault) external;\n    \n    function tokenToVault(address token) external view returns(address vault);\n\n    function setWhitelistDelegatorStatus(address delegator, bool status) external;\n\n    /// @dev min debtAmount in EVMOS (base token)\n    function minDebtInBase() external view returns (uint256);\n\n    function killFactorBps() external view returns(uint256);\n\n    function debtAmountOf (\n        address user, \n        address vault\n    ) external view returns(uint256 debt);\n\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param equity       equityAmount in EVMOS\n    /// @param debtInBase   debtAmount in EVMOS\n    function addPosition(\n        address debtToken,\n        uint256 equity,\n        uint256 debtInBase\n    ) payable external;\n\n\n    /// @param debtToken    debtToken Address (not vault address)\n    function removePosition(address debtToken) external;\n\n    /// @dev Borrow more debt (increase debt ratio)\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param extraDebtInBase  amount of additional debt in EVMOS\n    function addDebt(\n        address debtToken,\n        uint256 extraDebtInBase\n    ) external;\n\n    /// @dev Repay debt (decrease debt ratio)\n    /// @notice user should repay debt using debtToken\n    /// @notice user approve should be preceded\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param repaidDebt  amount of repaid debt in debtToken\n    function repayDebt(\n        address debtToken,\n        uint256 repaidDebt\n    ) external;\n\n    /// @dev add additional equity (decrease debt ratio)\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param extraEquity  amount of additional equity\n    function addEquity(\n        address debtToken,\n        uint256 extraEquity\n    ) payable external;\n\n    function isKillable(address debtToken, uint256 positionId) external view returns(bool);\n    \n    function kill(address debtToken, uint256 positionId) external;\n\n    /***********************\n     * Only for Delegator *\n     ***********************/\n    function delegate(uint256 amount) external;\n\n    function accrue(uint256 amount) payable external;\n\n}"
    },
    "contracts/lib/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"./Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/mock/MockSwap.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"../lib/interface/IERC20.sol\";\nimport \"../lib/utils/SafeToken.sol\";\n\n\ncontract MockSwap {\n    \n    /**\n        @dev 본 컨트랙트는 로컬 노드 배포용 컨트랙트로,\n        EvmoSwapRouter과 유사한 역할을 하는 DEX라고 생각하면 됩니다.\n\n        native token(EVMOS)과 나머지 모든 토큰의 교환비는 임의로 1: 2라고 놓았습니다.\n        (EVMOS의 가치 = 다른 토큰의 가치 * 2)\n\n        TODO 배포 후 본 컨트랙트로 유동성 추가해 주어야 함.\n        ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);\n     */\n\n    mapping(address => bool) public isSupported;\n\n    constructor (\n        address[] memory tokens\n    ){\n        for (uint256 i = 0; i < tokens.length; i++) {\n            isSupported[tokens[i]] = true;\n        }\n    }\n\n    function getDx(\n        address tokenX,\n        address tokenY,\n        uint256 dy\n    ) public pure returns (uint256) {\n        if(tokenX == address(0))\n            return dy / 2;\n        else if(tokenY == address(0))\n            return dy * 2;\n        else\n            return dy;\n    }\n\n    function getDy(\n        address tokenX,\n        address tokenY,\n        uint256 dx\n    ) public pure returns (uint256) {\n        if(tokenX == address(0))\n            return dx * 2;\n        else if(tokenY == address(0))\n            return dx / 2;\n        else\n            return dx;\n    }\n\n    function exchange(\n        address tokenX,\n        address tokenY,\n        uint256 dx,\n        uint256 /* minDy */\n    ) public payable returns(uint256 dy) {\n        if(tokenX == address(0)){\n            require(msg.value == dx, \"MockSwap: msg.value != dx\");\n        } else {\n            SafeToken.safeTransferFrom(tokenX, msg.sender, address(this), dx);\n        }\n\n        dy = getDy(tokenX, tokenY, dx);\n        if(tokenY == address(0)){\n            SafeToken.safeTransferEVMOS(msg.sender, dy);\n        } else {\n            SafeToken.safeTransfer(tokenY, msg.sender, dy);\n        }\n    }\n}"
    },
    "contracts/mock/MockSwapHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"../interface/ISwapHelper.sol\";\nimport \"./MockSwap.sol\";\n\n\ncontract MockSwapHelper is ISwapHelper {\n\n    MockSwap public swap;\n    constructor(address swap_){\n        swap = MockSwap(swap_);\n    }\n\n    function getDy(\n        address tokenX,\n        address tokenY,\n        uint256 dx\n    ) public override view returns (uint256 dy) {\n        return swap.getDy(tokenX, tokenY, dx);\n    }\n\n    function getDx(\n        address tokenX,\n        address tokenY,\n        uint256 dy\n    ) public override view returns (uint256 dx) {\n        return swap.getDx(tokenX, tokenY, dy);\n    }\n\n    function exchange(\n        address tokenX,\n        address tokenY,\n        uint256 dx,\n        uint256 minDy\n    ) public payable override returns (uint256 dy){\n        if(tokenX == address(0)){\n            require(msg.value == dx, \"MockSwap: msg.value != dx\");\n        } else {\n            SafeToken.safeTransferFrom(tokenX, msg.sender, address(this), dx);\n        }\n\n        dy = swap.exchange(tokenX, tokenY, dx, minDy);\n\n        if(tokenY == address(0)){\n            SafeToken.safeTransferEVMOS(msg.sender, dy);\n        } else {\n            SafeToken.safeTransfer(tokenY, msg.sender, dy);\n        }\n    }\n}"
    },
    "contracts/lib/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./interface/IERC20.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/lib/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/lib/ERC20Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20.sol\";\nimport \"./Ownable.sol\";\n\ncontract ERC20Ownable is ERC20, Ownable {\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\n\n    function mint(\n        address account,\n        uint256 amount\n    ) public onlyOwner {\n        _mint(account, amount);\n    }\n}"
    },
    "contracts/lib/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/token/TripleSlopeModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.3;\n\nimport \"../interface/IInterestModel.sol\";\n\ncontract TripleSlopeModel is IInterestModel {\n    /****************************\n     * POLICY CONSTANT SECTIONS *\n     ****************************/\n\n    uint256 public constant DENOM = 1e18;\n\n    uint256 public constant CEIL_SLOPE_1 = 60 * DENOM;\n    uint256 public constant CEIL_SLOPE_2 = 90 * DENOM;\n    uint256 public constant CEIL_SLOPE_3 = 100 * DENOM;\n\n    uint256 public constant MAX_INTEREST_SLOPE_1 = (20 * DENOM) / 100;\n    uint256 public constant MAX_INTEREST_SLOPE_2 = (20 * DENOM) / 100;\n    uint256 public constant MAX_INTEREST_SLOPE_3 = (150 * DENOM) / 100;\n\n    /// @dev Intrest Rate per Second 계산하여 반환\n    /// @dev 가동률 = debt / (debt + floating)\n    /// @param debt 대출되어 나간돈\n    /// @param floating 대기자금\n    /// @return IR per 365days, denominator = 1e18\n    function calcInterestRate(uint256 debt, uint256 floating)\n        external\n        pure\n        override\n        returns (uint256)\n    {\n        if (debt == 0 && floating == 0) return 0;\n\n        uint256 total = debt + floating;\n        uint256 utilization = (debt * (100 * DENOM)) / (total);\n\n        // 구간별 이자율\n        if (utilization < CEIL_SLOPE_1) {\n            // utilization(0~60%) - 0%~20% APY\n            return\n                (utilization * MAX_INTEREST_SLOPE_1) / CEIL_SLOPE_1 / 365 days;\n        } else if (utilization < CEIL_SLOPE_2) {\n            // utilization(60%~90%) - 20% APY\n            return uint256(MAX_INTEREST_SLOPE_2) / 365 days;\n        } else if (utilization < CEIL_SLOPE_3) {\n            // utilization(90%~100%) - 20%~150% APY\n            return\n                (MAX_INTEREST_SLOPE_2 +\n                    ((utilization - CEIL_SLOPE_2) *\n                        (MAX_INTEREST_SLOPE_3 - MAX_INTEREST_SLOPE_2)) /\n                    (CEIL_SLOPE_3 - CEIL_SLOPE_2)) / 365 days;\n        } else {\n            // 그 외 모든 상황 - 150% APY\n            // 사실상 이 조건으로 들어올 수 없음\n            return MAX_INTEREST_SLOPE_3 / 365 days;\n        }\n    }\n}\n"
    },
    "contracts/interface/IStakedEvmos.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\ninterface IStakedEvmos { \n\n    event Lock(address user, uint256 lockedUntil);\n    event Supply(uint256 amount);\n    event Withdraw(address user, uint256 amount);\n\n    function withdrawable() external view returns (uint256);\n\n    function mintLockedToken(\n        address to,\n        uint256 lockedUntil\n    ) external;\n\n    function supplyUnstakedToken() payable external;\n\n    function minter() external view returns(address);\n    function setMinter(address newMinter) external;\n\n}"
    },
    "contracts/mock/EvmoSwapRouter.sol": {
      "content": "// // Dependency file: contracts/interfaces/IWETH.sol\n\n// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.6.12;\n\n// interface IWETH {\n//     function deposit() external payable;\n//     function transfer(address to, uint value) external returns (bool);\n//     function withdraw(uint) external;\n// }\n\n\n// // Dependency file: contracts/interfaces/IERC20.sol\n\n// // pragma solidity ^0.8.4;\n\n// interface IERC20 {\n//     event Approval(address indexed owner, address indexed spender, uint value);\n//     event Transfer(address indexed from, address indexed to, uint value);\n\n//     function name() external view returns (string memory);\n//     function symbol() external view returns (string memory);\n//     function decimals() external view returns (uint8);\n//     function totalSupply() external view returns (uint);\n//     function balanceOf(address owner) external view returns (uint);\n//     function allowance(address owner, address spender) external view returns (uint);\n\n//     function approve(address spender, uint value) external returns (bool);\n//     function transfer(address to, uint value) external returns (bool);\n//     function transferFrom(address from, address to, uint value) external returns (bool);\n// }\n\n\n// // Dependency file: contracts/libraries/SafeMath.sol\n\n// // pragma solidity >=0.5.16;\n\n// // a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\n// library SafeMath {\n//     function add(uint x, uint y) internal pure returns (uint z) {\n//         require((z = x + y) >= x, 'ds-math-add-overflow');\n//     }\n\n//     function sub(uint x, uint y) internal pure returns (uint z) {\n//         require((z = x - y) <= x, 'ds-math-sub-underflow');\n//     }\n\n//     function mul(uint x, uint y) internal pure returns (uint z) {\n//         require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n//     }\n// }\n\n\n// // Dependency file: contracts/libraries/TransferHelper.sol\n\n\n// // pragma solidity >=0.6.0;\n\n// // helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n// library TransferHelper {\n//     function safeApprove(\n//         address token,\n//         address to,\n//         uint256 value\n//     ) internal {\n//         // bytes4(keccak256(bytes('approve(address,uint256)')));\n//         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n//         require(\n//             success && (data.length == 0 || abi.decode(data, (bool))),\n//             'TransferHelper::safeApprove: approve failed'\n//         );\n//     }\n\n//     function safeTransfer(\n//         address token,\n//         address to,\n//         uint256 value\n//     ) internal {\n//         // bytes4(keccak256(bytes('transfer(address,uint256)')));\n//         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n//         require(\n//             success && (data.length == 0 || abi.decode(data, (bool))),\n//             'TransferHelper::safeTransfer: transfer failed'\n//         );\n//     }\n\n//     function safeTransferFrom(\n//         address token,\n//         address from,\n//         address to,\n//         uint256 value\n//     ) internal {\n//         // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n//         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n//         require(\n//             success && (data.length == 0 || abi.decode(data, (bool))),\n//             'TransferHelper::transferFrom: transferFrom failed'\n//         );\n//     }\n\n//     function safeTransferETH(address to, uint256 value) internal {\n//         (bool success, ) = to.call{value: value}(new bytes(0));\n//         require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n//     }\n// }\n\n// // Dependency file: contracts/interfaces/IEvmoSwapFactory.sol\n\n// // pragma solidity ^0.8.4;\n\n// interface IEvmoSwapFactory {\n//     event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n//     function feeTo() external view returns (address);\n//     function feeToSetter() external view returns (address);\n\n//     function getPair(address tokenA, address tokenB) external view returns (address pair);\n//     function allPairs(uint) external view returns (address pair);\n//     function allPairsLength() external view returns (uint);\n\n//     function createPair(address tokenA, address tokenB) external returns (address pair);\n\n//     function setFeeTo(address) external;\n//     function setFeeToSetter(address) external;\n//     function setPairFee(address pair, uint32 pairFee) external;\n// }\n\n// // Dependency file: contracts/interfaces/IEvmoSwapRouter01.sol\n\n// // pragma solidity >=0.6.2;\n\n// interface IEvmoSwapRouter01 {\n//     function factory() external pure returns (address);\n//     function WETH() external pure returns (address);\n\n//     function addLiquidity(\n//         address tokenA,\n//         address tokenB,\n//         uint amountADesired,\n//         uint amountBDesired,\n//         uint amountAMin,\n//         uint amountBMin,\n//         address to,\n//         uint deadline\n//     ) external returns (uint amountA, uint amountB, uint liquidity);\n//     function addLiquidityETH(\n//         address token,\n//         uint amountTokenDesired,\n//         uint amountTokenMin,\n//         uint amountETHMin,\n//         address to,\n//         uint deadline\n//     ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n//     function removeLiquidity(\n//         address tokenA,\n//         address tokenB,\n//         uint liquidity,\n//         uint amountAMin,\n//         uint amountBMin,\n//         address to,\n//         uint deadline\n//     ) external returns (uint amountA, uint amountB);\n//     function removeLiquidityETH(\n//         address token,\n//         uint liquidity,\n//         uint amountTokenMin,\n//         uint amountETHMin,\n//         address to,\n//         uint deadline\n//     ) external returns (uint amountToken, uint amountETH);\n//     function removeLiquidityWithPermit(\n//         address tokenA,\n//         address tokenB,\n//         uint liquidity,\n//         uint amountAMin,\n//         uint amountBMin,\n//         address to,\n//         uint deadline,\n//         bool approveMax, uint8 v, bytes32 r, bytes32 s\n//     ) external returns (uint amountA, uint amountB);\n//     function removeLiquidityETHWithPermit(\n//         address token,\n//         uint liquidity,\n//         uint amountTokenMin,\n//         uint amountETHMin,\n//         address to,\n//         uint deadline,\n//         bool approveMax, uint8 v, bytes32 r, bytes32 s\n//     ) external returns (uint amountToken, uint amountETH);\n//     function swapExactTokensForTokens(\n//         uint amountIn,\n//         uint amountOutMin,\n//         address[] calldata path,\n//         address to,\n//         uint deadline\n//     ) external returns (uint[] memory amounts);\n//     function swapTokensForExactTokens(\n//         uint amountOut,\n//         uint amountInMax,\n//         address[] calldata path,\n//         address to,\n//         uint deadline\n//     ) external returns (uint[] memory amounts);\n//     function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n//         external\n//         payable\n//         returns (uint[] memory amounts);\n//     function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n//         external\n//         returns (uint[] memory amounts);\n//     function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n//         external\n//         returns (uint[] memory amounts);\n//     function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n//         external\n//         payable\n//         returns (uint[] memory amounts);\n\n//     function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n//     function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint pairFee) external pure returns (uint amountOut);\n//     function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint pairFee) external pure returns (uint amountIn);\n//     function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n//     function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n// }\n\n\n// // Dependency file: contracts/interfaces/IEvmoSwapRouter02.sol\n\n// // pragma solidity >=0.6.2;\n\n// // import 'contracts/interfaces/IEvmoSwapRouter01.sol';\n\n// interface IEvmoSwapRouter02 is IEvmoSwapRouter01 {\n//     function removeLiquidityETHSupportingFeeOnTransferTokens(\n//         address token,\n//         uint liquidity,\n//         uint amountTokenMin,\n//         uint amountETHMin,\n//         address to,\n//         uint deadline\n//     ) external returns (uint amountETH);\n//     function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n//         address token,\n//         uint liquidity,\n//         uint amountTokenMin,\n//         uint amountETHMin,\n//         address to,\n//         uint deadline,\n//         bool approveMax, uint8 v, bytes32 r, bytes32 s\n//     ) external returns (uint amountETH);\n\n//     function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n//         uint amountIn,\n//         uint amountOutMin,\n//         address[] calldata path,\n//         address to,\n//         uint deadline\n//     ) external;\n//     function swapExactETHForTokensSupportingFeeOnTransferTokens(\n//         uint amountOutMin,\n//         address[] calldata path,\n//         address to,\n//         uint deadline\n//     ) external payable;\n//     function swapExactTokensForETHSupportingFeeOnTransferTokens(\n//         uint amountIn,\n//         uint amountOutMin,\n//         address[] calldata path,\n//         address to,\n//         uint deadline\n//     ) external;\n// }\n\n\n// // Dependency file: contracts/interfaces/IEvmoSwapPair.sol\n\n// // pragma solidity ^0.8.4;\n\n// interface IEvmoSwapPair {\n//     event Approval(address indexed owner, address indexed spender, uint value);\n//     event Transfer(address indexed from, address indexed to, uint value);\n\n//     function name() external pure returns (string memory);\n//     function symbol() external pure returns (string memory);\n//     function decimals() external pure returns (uint8);\n//     function totalSupply() external view returns (uint);\n//     function balanceOf(address owner) external view returns (uint);\n//     function allowance(address owner, address spender) external view returns (uint);\n\n//     function approve(address spender, uint value) external returns (bool);\n//     function transfer(address to, uint value) external returns (bool);\n//     function transferFrom(address from, address to, uint value) external returns (bool);\n\n//     function DOMAIN_SEPARATOR() external view returns (bytes32);\n//     function PERMIT_TYPEHASH() external pure returns (bytes32);\n//     function nonces(address owner) external view returns (uint);\n\n//     function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n//     event Mint(address indexed sender, uint amount0, uint amount1);\n//     event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n//     event Swap(\n//         address indexed sender,\n//         uint amount0In,\n//         uint amount1In,\n//         uint amount0Out,\n//         uint amount1Out,\n//         address indexed to\n//     );\n//     event Sync(uint112 reserve0, uint112 reserve1);\n\n//     function MINIMUM_LIQUIDITY() external pure returns (uint);\n//     function factory() external view returns (address);\n//     function token0() external view returns (address);\n//     function token1() external view returns (address);\n//     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n//     function price0CumulativeLast() external view returns (uint);\n//     function price1CumulativeLast() external view returns (uint);\n//     function kLast() external view returns (uint);\n//     function pairFee() external view returns (uint32);\n\n//     function mint(address to) external returns (uint liquidity);\n//     function burn(address to) external returns (uint amount0, uint amount1);\n//     function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n//     function skim(address to) external;\n//     function sync() external;\n\n//     function initialize(address, address) external;\n//     function setPairFee(uint32) external;\n// }\n\n\n// // Dependency file: contracts/libraries/EvmoSwapLibrary.sol\n\n// // pragma solidity ^0.8.4;\n\n// // import \"contracts/libraries/SafeMath.sol\";\n// // import 'contracts/interfaces/IEvmoSwapPair.sol';\n\n// library EvmoSwapLibrary {\n//     using SafeMath for uint;\n\n//     // returns sorted token addresses, used to handle return values from pairs sorted in this order\n//     function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n//         require(tokenA != tokenB, 'EvmoSwapLibrary: IDENTICAL_ADDRESSES');\n//         (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n//         require(token0 != address(0), 'EvmoSwapLibrary: ZERO_ADDRESS');\n//     }\n\n//     // calculates the CREATE2 address for a pair without making any external calls\n//     function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n//         (address token0, address token1) = sortTokens(tokenA, tokenB);\n//         pair = address(uint(keccak256(abi.encodePacked(\n//                 hex'ff',\n//                 factory,\n//                 keccak256(abi.encodePacked(token0, token1)),\n//                 hex'1a74734eea11bc0ee7528f77a3306d46a0e9015d2eca65dd5651259a4b2eefe1' // init code hash\n//             ))));\n//     }\n\n//     function getPairFee(address factory, address tokenA, address tokenB) internal view returns (uint pairFee) {\n//         pairFee = IEvmoSwapPair(pairFor(factory, tokenA, tokenB)).pairFee();\n//     }\n\n//     // fetches and sorts the reserves for a pair\n//     function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n//         (address token0,) = sortTokens(tokenA, tokenB);\n//         pairFor(factory, tokenA, tokenB);\n//         (uint reserve0, uint reserve1,) = IEvmoSwapPair(pairFor(factory, tokenA, tokenB)).getReserves();\n//         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n//     }\n\n//     // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n//     function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n//         require(amountA > 0, 'EvmoSwapLibrary: INSUFFICIENT_AMOUNT');\n//         require(reserveA > 0 && reserveB > 0, 'EvmoSwapLibrary: INSUFFICIENT_LIQUIDITY');\n//         amountB = amountA.mul(reserveB) / reserveA;\n//     }\n\n//     // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n//     function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint pairFee) internal pure returns (uint amountOut) {\n//         require(amountIn > 0, 'EvmoSwapLibrary: INSUFFICIENT_INPUT_AMOUNT');\n//         require(reserveIn > 0 && reserveOut > 0, 'EvmoSwapLibrary: INSUFFICIENT_LIQUIDITY');\n//         uint amountInWithFee = amountIn.mul(uint(10000).sub(pairFee));\n//         uint numerator = amountInWithFee.mul(reserveOut);\n//         uint denominator = reserveIn.mul(10000).add(amountInWithFee);\n//         amountOut = numerator / denominator;\n//     }\n\n//     // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n//     function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint pairFee) internal pure returns (uint amountIn) {\n//         require(amountOut > 0, 'EvmoSwapLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\n//         require(reserveIn > 0 && reserveOut > 0, 'EvmoSwapLibrary: INSUFFICIENT_LIQUIDITY');\n//         uint numerator = reserveIn.mul(amountOut).mul(10000);\n//         uint denominator = reserveOut.sub(amountOut).mul(uint(10000).sub(pairFee));\t\n//         amountIn = (numerator / denominator).add(1);\n//     }\n\n//     // performs chained getAmountOut calculations on any number of pairs\n//     function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n//         require(path.length >= 2, 'EvmoSwapLibrary: INVALID_PATH');\n//         amounts = new uint[](path.length);\n//         amounts[0] = amountIn;\n//         for (uint i; i < path.length - 1; i++) {\n//             (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n//             amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, getPairFee(factory, path[i], path[i + 1]));\t\n//         }\n//     }\n\n//     // performs chained getAmountIn calculations on any number of pairs\n//     function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n//         require(path.length >= 2, 'EvmoSwapLibrary: INVALID_PATH');\n//         amounts = new uint[](path.length);\n//         amounts[amounts.length - 1] = amountOut;\n//         for (uint i = path.length - 1; i > 0; i--) {\n//             (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n//             amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, getPairFee(factory, path[i - 1], path[i]));\t\n//         }\n//     }\n// }\n\n\n// // Root file: contracts/swap/EvmoSwapRouter.sol\n\n// // import 'contracts/interfaces/IWETH.sol';\n// // import 'contracts/interfaces/IERC20.sol';\n// // import 'contracts/libraries/SafeMath.sol';\n// // import 'contracts/libraries/TransferHelper.sol';\n// // import 'contracts/interfaces/IEvmoSwapFactory.sol';\n// // import 'contracts/interfaces/IEvmoSwapRouter02.sol';\n// // import 'contracts/libraries/EvmoSwapLibrary.sol';\n\n// contract EvmoSwapRouter is IEvmoSwapRouter02 {\n//     using SafeMath for uint;\n\n//     address public immutable override factory;\n//     address public immutable override WETH;\n\n//     modifier ensure(uint deadline) {\n//         require(deadline >= block.timestamp, 'EvmoSwapRouter: EXPIRED');\n//         _;\n//     }\n\n//     constructor(address _factory, address _WETH) public {\n//         factory = _factory;\n//         WETH = _WETH;\n//     }\n\n//     receive() external payable {\n//         assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n//     }\n\n//     // **** ADD LIQUIDITY ****\n//     function _addLiquidity(\n//         address tokenA,\n//         address tokenB,\n//         uint amountADesired,\n//         uint amountBDesired,\n//         uint amountAMin,\n//         uint amountBMin\n//     ) internal virtual returns (uint amountA, uint amountB) {\n//         // create the pair if it doesn't exist yet\n//         if (IEvmoSwapFactory(factory).getPair(tokenA, tokenB) == address(0)) {\n//             IEvmoSwapFactory(factory).createPair(tokenA, tokenB);\n//         }\n//         (uint reserveA, uint reserveB) = EvmoSwapLibrary.getReserves(factory, tokenA, tokenB);\n//         if (reserveA == 0 && reserveB == 0) {\n//             (amountA, amountB) = (amountADesired, amountBDesired);\n//         } else {\n//             uint amountBOptimal = EvmoSwapLibrary.quote(amountADesired, reserveA, reserveB);\n//             if (amountBOptimal <= amountBDesired) {\n//                 require(amountBOptimal >= amountBMin, 'EvmoSwapRouter: INSUFFICIENT_B_AMOUNT');\n//                 (amountA, amountB) = (amountADesired, amountBOptimal);\n//             } else {\n//                 uint amountAOptimal = EvmoSwapLibrary.quote(amountBDesired, reserveB, reserveA);\n//                 assert(amountAOptimal <= amountADesired);\n//                 require(amountAOptimal >= amountAMin, 'EvmoSwapRouter: INSUFFICIENT_A_AMOUNT');\n//                 (amountA, amountB) = (amountAOptimal, amountBDesired);\n//             }\n//         }\n//     }\n\n//     function addLiquidity(\n//         address tokenA,\n//         address tokenB,\n//         uint amountADesired,\n//         uint amountBDesired,\n//         uint amountAMin,\n//         uint amountBMin,\n//         address to,\n//         uint deadline\n//     ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\n//         (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n//         address pair = EvmoSwapLibrary.pairFor(factory, tokenA, tokenB);\n//         TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n//         TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n//         liquidity = IEvmoSwapPair(pair).mint(to);\n//     }\n\n//     function addLiquidityETH(\n//         address token,\n//         uint amountTokenDesired,\n//         uint amountTokenMin,\n//         uint amountETHMin,\n//         address to,\n//         uint deadline\n//     ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n//         (amountToken, amountETH) = _addLiquidity(\n//             token,\n//             WETH,\n//             amountTokenDesired,\n//             msg.value,\n//             amountTokenMin,\n//             amountETHMin\n//         );\n//         address pair = EvmoSwapLibrary.pairFor(factory, token, WETH);\n//         TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n//         IWETH(WETH).deposit{value: amountETH}();\n//         assert(IWETH(WETH).transfer(pair, amountETH));\n//         liquidity = IEvmoSwapPair(pair).mint(to);\n//         // refund dust eth, if any\n//         if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n//     }\n\n//     // **** REMOVE LIQUIDITY ****\n//     function removeLiquidity(\n//         address tokenA,\n//         address tokenB,\n//         uint liquidity,\n//         uint amountAMin,\n//         uint amountBMin,\n//         address to,\n//         uint deadline\n//     ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\n//         address pair = EvmoSwapLibrary.pairFor(factory, tokenA, tokenB);\n//         IEvmoSwapPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n//         (uint amount0, uint amount1) = IEvmoSwapPair(pair).burn(to);\n//         (address token0,) = EvmoSwapLibrary.sortTokens(tokenA, tokenB);\n//         (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n//         require(amountA >= amountAMin, 'EvmoSwapRouter: INSUFFICIENT_A_AMOUNT');\n//         require(amountB >= amountBMin, 'EvmoSwapRouter: INSUFFICIENT_B_AMOUNT');\n//     }\n\n//     function removeLiquidityETH(\n//         address token,\n//         uint liquidity,\n//         uint amountTokenMin,\n//         uint amountETHMin,\n//         address to,\n//         uint deadline\n//     ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\n//         (amountToken, amountETH) = removeLiquidity(\n//             token,\n//             WETH,\n//             liquidity,\n//             amountTokenMin,\n//             amountETHMin,\n//             address(this),\n//             deadline\n//         );\n//         TransferHelper.safeTransfer(token, to, amountToken);\n//         IWETH(WETH).withdraw(amountETH);\n//         TransferHelper.safeTransferETH(to, amountETH);\n//     }\n\n//     function removeLiquidityWithPermit(\n//         address tokenA,\n//         address tokenB,\n//         uint liquidity,\n//         uint amountAMin,\n//         uint amountBMin,\n//         address to,\n//         uint deadline,\n//         bool approveMax, uint8 v, bytes32 r, bytes32 s\n//     ) external virtual override returns (uint amountA, uint amountB) {\n//         address pair = EvmoSwapLibrary.pairFor(factory, tokenA, tokenB);\n//         uint value = approveMax ? uint(-1) : liquidity;\n//         IEvmoSwapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n//         (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n//     }\n\n//     function removeLiquidityETHWithPermit(\n//         address token,\n//         uint liquidity,\n//         uint amountTokenMin,\n//         uint amountETHMin,\n//         address to,\n//         uint deadline,\n//         bool approveMax, uint8 v, bytes32 r, bytes32 s\n//     ) external virtual override returns (uint amountToken, uint amountETH) {\n//         address pair = EvmoSwapLibrary.pairFor(factory, token, WETH);\n//         uint value = approveMax ? uint(-1) : liquidity;\n//         IEvmoSwapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n//         (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\n//     }\n\n//     // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n//     function removeLiquidityETHSupportingFeeOnTransferTokens(\n//         address token,\n//         uint liquidity,\n//         uint amountTokenMin,\n//         uint amountETHMin,\n//         address to,\n//         uint deadline\n//     ) public virtual override ensure(deadline) returns (uint amountETH) {\n//         (, amountETH) = removeLiquidity(\n//             token,\n//             WETH,\n//             liquidity,\n//             amountTokenMin,\n//             amountETHMin,\n//             address(this),\n//             deadline\n//         );\n//         TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n//         IWETH(WETH).withdraw(amountETH);\n//         TransferHelper.safeTransferETH(to, amountETH);\n//     }\n\n//     function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n//         address token,\n//         uint liquidity,\n//         uint amountTokenMin,\n//         uint amountETHMin,\n//         address to,\n//         uint deadline,\n//         bool approveMax, uint8 v, bytes32 r, bytes32 s\n//     ) external virtual override returns (uint amountETH) {\n//         address pair = EvmoSwapLibrary.pairFor(factory, token, WETH);\n//         uint value = approveMax ? uint(-1) : liquidity;\n//         IEvmoSwapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n//         amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n//             token, liquidity, amountTokenMin, amountETHMin, to, deadline\n//         );\n//     }\n\n//     // **** SWAP ****\n//     // requires the initial amount to have already been sent to the first pair\n//     function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\n//         for (uint i; i < path.length - 1; i++) {\n//             (address input, address output) = (path[i], path[i + 1]);\n//             (address token0,) = EvmoSwapLibrary.sortTokens(input, output);\n//             uint amountOut = amounts[i + 1];\n//             (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n//             address to = i < path.length - 2 ? EvmoSwapLibrary.pairFor(factory, output, path[i + 2]) : _to;\n//             IEvmoSwapPair(EvmoSwapLibrary.pairFor(factory, input, output)).swap(\n//                 amount0Out, amount1Out, to, new bytes(0)\n//             );\n//         }\n//     }\n\n//     function swapExactTokensForTokens(\n//         uint amountIn,\n//         uint amountOutMin,\n//         address[] calldata path,\n//         address to,\n//         uint deadline\n//     ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n//         amounts = EvmoSwapLibrary.getAmountsOut(factory, amountIn, path);\n//         require(amounts[amounts.length - 1] >= amountOutMin, 'EvmoSwapRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n//         TransferHelper.safeTransferFrom(\n//             path[0], msg.sender, EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n//         );\n//         _swap(amounts, path, to);\n//     }\n\n//     function swapTokensForExactTokens(\n//         uint amountOut,\n//         uint amountInMax,\n//         address[] calldata path,\n//         address to,\n//         uint deadline\n//     ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n//         amounts = EvmoSwapLibrary.getAmountsIn(factory, amountOut, path);\n//         require(amounts[0] <= amountInMax, 'EvmoSwapRouter: EXCESSIVE_INPUT_AMOUNT');\n//         TransferHelper.safeTransferFrom(\n//             path[0], msg.sender, EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n//         );\n//         _swap(amounts, path, to);\n//     }\n\n//     function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n//         external\n//         virtual\n//         override\n//         payable\n//         ensure(deadline)\n//         returns (uint[] memory amounts)\n//     {\n//         require(path[0] == WETH, 'EvmoSwapRouter: INVALID_PATH');\n//         amounts = EvmoSwapLibrary.getAmountsOut(factory, msg.value, path);\n//         require(amounts[amounts.length - 1] >= amountOutMin, 'EvmoSwapRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n//         IWETH(WETH).deposit{value: amounts[0]}();\n//         assert(IWETH(WETH).transfer(EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n//         _swap(amounts, path, to);\n//     }\n\n//     function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n//         external\n//         virtual\n//         override\n//         ensure(deadline)\n//         returns (uint[] memory amounts)\n//     {\n//         require(path[path.length - 1] == WETH, 'EvmoSwapRouter: INVALID_PATH');\n//         amounts = EvmoSwapLibrary.getAmountsIn(factory, amountOut, path);\n//         require(amounts[0] <= amountInMax, 'EvmoSwapRouter: EXCESSIVE_INPUT_AMOUNT');\n//         TransferHelper.safeTransferFrom(\n//             path[0], msg.sender, EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n//         );\n//         _swap(amounts, path, address(this));\n//         IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n//         TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n//     }\n\n//     function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n//         external\n//         virtual\n//         override\n//         ensure(deadline)\n//         returns (uint[] memory amounts)\n//     {\n//         require(path[path.length - 1] == WETH, 'EvmoSwapRouter: INVALID_PATH');\n//         amounts = EvmoSwapLibrary.getAmountsOut(factory, amountIn, path);\n//         require(amounts[amounts.length - 1] >= amountOutMin, 'EvmoSwapRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n//         TransferHelper.safeTransferFrom(\n//             path[0], msg.sender, EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n//         );\n//         _swap(amounts, path, address(this));\n//         IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n//         TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n//     }\n\n//     function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n//         external\n//         virtual\n//         override\n//         payable\n//         ensure(deadline)\n//         returns (uint[] memory amounts)\n//     {\n//         require(path[0] == WETH, 'EvmoSwapRouter: INVALID_PATH');\n//         amounts = EvmoSwapLibrary.getAmountsIn(factory, amountOut, path);\n//         require(amounts[0] <= msg.value, 'EvmoSwapRouter: EXCESSIVE_INPUT_AMOUNT');\n//         IWETH(WETH).deposit{value: amounts[0]}();\n//         assert(IWETH(WETH).transfer(EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n//         _swap(amounts, path, to);\n//         // refund dust eth, if any\n//         if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n//     }\n\n//     // **** SWAP (supporting fee-on-transfer tokens) ****\n//     // requires the initial amount to have already been sent to the first pair\n//     function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\n//         for (uint i; i < path.length - 1; i++) {\n//             (address input, address output) = (path[i], path[i + 1]);\n//             (address token0,) = EvmoSwapLibrary.sortTokens(input, output);\n//             IEvmoSwapPair pair = IEvmoSwapPair(EvmoSwapLibrary.pairFor(factory, input, output));\n//             uint amountInput;\n//             uint amountOutput;\n//             { // scope to avoid stack too deep errors\n//             (uint reserve0, uint reserve1,) = pair.getReserves();\n//             (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n//             amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\n//             amountOutput = EvmoSwapLibrary.getAmountOut(amountInput, reserveInput, reserveOutput, pair.pairFee());\n//             }\n//             (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\n//             address to = i < path.length - 2 ? EvmoSwapLibrary.pairFor(factory, output, path[i + 2]) : _to;\n//             pair.swap(amount0Out, amount1Out, to, new bytes(0));\n//         }\n//     }\n\n//     function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n//         uint amountIn,\n//         uint amountOutMin,\n//         address[] calldata path,\n//         address to,\n//         uint deadline\n//     ) external virtual override ensure(deadline) {\n//         TransferHelper.safeTransferFrom(\n//             path[0], msg.sender, EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amountIn\n//         );\n//         uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n//         _swapSupportingFeeOnTransferTokens(path, to);\n//         require(\n//             IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n//             'EvmoSwapRouter: INSUFFICIENT_OUTPUT_AMOUNT'\n//         );\n//     }\n\n//     function swapExactETHForTokensSupportingFeeOnTransferTokens(\n//         uint amountOutMin,\n//         address[] calldata path,\n//         address to,\n//         uint deadline\n//     )\n//         external\n//         virtual\n//         override\n//         payable\n//         ensure(deadline)\n//     {\n//         require(path[0] == WETH, 'EvmoSwapRouter: INVALID_PATH');\n//         uint amountIn = msg.value;\n//         IWETH(WETH).deposit{value: amountIn}();\n//         assert(IWETH(WETH).transfer(EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amountIn));\n//         uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n//         _swapSupportingFeeOnTransferTokens(path, to);\n//         require(\n//             IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n//             'EvmoSwapRouter: INSUFFICIENT_OUTPUT_AMOUNT'\n//         );\n//     }\n\n//     function swapExactTokensForETHSupportingFeeOnTransferTokens(\n//         uint amountIn,\n//         uint amountOutMin,\n//         address[] calldata path,\n//         address to,\n//         uint deadline\n//     )\n//         external\n//         virtual\n//         override\n//         ensure(deadline)\n//     {\n//         require(path[path.length - 1] == WETH, 'EvmoSwapRouter: INVALID_PATH');\n//         TransferHelper.safeTransferFrom(\n//             path[0], msg.sender, EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amountIn\n//         );\n//         _swapSupportingFeeOnTransferTokens(path, address(this));\n//         uint amountOut = IERC20(WETH).balanceOf(address(this));\n//         require(amountOut >= amountOutMin, 'EvmoSwapRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n//         IWETH(WETH).withdraw(amountOut);\n//         TransferHelper.safeTransferETH(to, amountOut);\n//     }\n\n//     // **** LIBRARY FUNCTIONS ****\n//     function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\n//         return EvmoSwapLibrary.quote(amountA, reserveA, reserveB);\n//     }\n\n//     function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint pairFee)\n//         public\n//         pure\n//         virtual\n//         override\n//         returns (uint amountOut)\n//     {\n//         return EvmoSwapLibrary.getAmountOut(amountIn, reserveIn, reserveOut, pairFee);\n//     }\n\n//     function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint pairFee)\n//         public\n//         pure\n//         virtual\n//         override\n//         returns (uint amountIn)\n//     {\n//         return EvmoSwapLibrary.getAmountIn(amountOut, reserveIn, reserveOut, pairFee);\n//     }\n\n//     function getAmountsOut(uint amountIn, address[] memory path)\n//         public\n//         view\n//         virtual\n//         override\n//         returns (uint[] memory amounts)\n//     {\n//         return EvmoSwapLibrary.getAmountsOut(factory, amountIn, path);\n//     }\n\n//     function getAmountsIn(uint amountOut, address[] memory path)\n//         public\n//         view\n//         virtual\n//         override\n//         returns (uint[] memory amounts)\n//     {\n//         return EvmoSwapLibrary.getAmountsIn(factory, amountOut, path);\n//     }\n// }\n"
    },
    "contracts/token/EvmoSwapHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.3;\n\ncontract EvmoSwapHelper {\n\n    address public router;\n\n    constructor (\n        address router_\n    ){\n        router = router_;\n    }\n\n    \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}