{
  "address": "0xFD296cCDB97C605bfdE514e9810eA05f421DEBc2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedIndex",
          "type": "uint256"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "returned",
          "type": "uint256"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unbondingInterval",
          "type": "uint256"
        }
      ],
      "name": "UpdateConfigs",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "UpdateMinterStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unbondingInterval_",
          "type": "uint256"
        }
      ],
      "name": "__UnbondedEvmos_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "amountToShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUnlockable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unlockable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockedId",
          "type": "uint256"
        }
      ],
      "name": "isKillable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockedId",
          "type": "uint256"
        }
      ],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUnbondedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedOf",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "front",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rear",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "locks",
      "outputs": [
        {
          "internalType": "bool",
          "name": "received",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locksLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtShare",
          "type": "uint256"
        }
      ],
      "name": "mintLockedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "shareToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyUnbondedToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unbondingInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minRepaid",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unbondingInterval",
          "type": "uint256"
        }
      ],
      "name": "updateConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "updateMinterStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x841bba63f46e0eff62aef235247259bdee591b42b3aba748145bd8e3ce3ed775",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xFD296cCDB97C605bfdE514e9810eA05f421DEBc2",
    "transactionIndex": 0,
    "gasUsed": "2768597",
    "logsBloom": "0x
    "blockHash": "0x0a81fea21e49c73743409c9af1cc351b9153e90f98f7e523780e17a7621b4f37",
    "transactionHash": "0x841bba63f46e0eff62aef235247259bdee591b42b3aba748145bd8e3ce3ed775",
    "logs": [],
    "blockNumber": 4966211,
    "cumulativeGasUsed": "2768597",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9a86b7b2a1561586849e4183f8a88675",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedIndex\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returned\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unbondingInterval\",\"type\":\"uint256\"}],\"name\":\"UpdateConfigs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateMinterStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unbondingInterval_\",\"type\":\"uint256\"}],\"name\":\"__UnbondedEvmos_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"amountToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUnlockable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedId\",\"type\":\"uint256\"}],\"name\":\"isKillable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedId\",\"type\":\"uint256\"}],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUnbondedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"front\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rear\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"received\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locksLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"name\":\"mintLockedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"shareToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyUnbondedToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unbondingInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRepaid\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingInterval\",\"type\":\"uint256\"}],\"name\":\"updateConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateMinterStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getUnlockable(address)\":{\"details\":\"calc user's unlockable uEVMOS(includes debt) & debt\"},\"mintLockedToken(address,address,uint256,uint256)\":{\"details\":\"mint & lock uEVMOS\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"__UnbondedEvmos_init(uint256)\":{\"notice\":\"should set minter (maybe Stayking) after deployed\"},\"isKillable(uint256)\":{\"notice\":\"TODO kor) \\uc720\\uc800\\uac00 \\uc77c\\ubd80\\ub9cc unstake \\uc694\\uccad\\ud558\\ub294 \\uacbd\\uc6b0, \\ube5a\\uc744 \\ub2e4 \\ubabb \\uac1a\\ub294 \\uacbd\\uc6b0\\uac00 \\ub2f9\\uc5f0\\ud788 \\ubc1c\\uc0dd\\ud55c\\ub2e4. \\uc77c\\ub2e8 \\ubd80\\ucc44\\ube44\\uc728\\uc774 100% \\ub118\\uae30\\ub294 \\uacbd\\uc6b0 \\uc6b0\\ub9ac\\uac00 unlock \\uc2dc\\ud0a4\\ub294 \\uac83\\ub9cc \\uad6c\\ud604.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/UnbondedEvmos.sol\":\"UnbondedEvmos\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/ISwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/************************************************************\\n * @dev\\n * Glossary\\n * X : Input Token\\n * Y : Output Token\\n * Dx : Amount of Input Token\\n * Dy : Amount of Output Token\\n *************************************************************/\\ninterface ISwapHelper {\\n\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) external view returns (uint256 dy);\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) external view returns (uint256 dx);\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 minDy\\n    ) payable external returns (uint256 dy);\\n}\",\"keccak256\":\"0xe085ce8733ebf477156c5859b597770ce042a1bc6f7fd04bf6d2055df3d88708\",\"license\":\"UNLICENSED\"},\"contracts/interface/IUnbondedEvmos.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.3;\\n\\ninterface IUnbondedEvmos { \\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalAmount() external view returns (uint256);\\n\\n    function lastUnbondedAt() external view returns (uint256);\\n\\n    function unbondingInterval() external view returns (uint256);\\n\\n    function mintLockedToken(\\n        address to,\\n        address vault,\\n        uint256 amount,\\n        uint256 debtShare\\n    ) external;\\n\\n    function unlock(uint256 minRepaid) external;\\n\\n    function supplyUnbondedToken() payable external;\\n\\n    function isMinter(address account) external view returns(bool);\\n    \\n    function updateMinterStatus(address account, bool status) external;\\n\\n    function getUnlockable(address account) external view returns(uint256 unlockable, uint256 debt);\\n\\n    function isKillable(uint256 lockedId) external returns (bool);\\n\\n    function kill(uint256 lockedId) external;\\n}   \",\"keccak256\":\"0x1c8cf9aa9f5ddca974f718d424b21d5cb55fe3defae490a03a548d386d00a808\",\"license\":\"UNLICENSED\"},\"contracts/interface/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"./ISwapHelper.sol\\\";\\n\\n\\ninterface IVault { \\n\\n    function token() external returns(address);\\n    \\n    function stayking() external returns(address);\\n\\n    function interestModel() external returns(address);\\n\\n    function totalAmount() external view returns(uint256);\\n\\n    function debtAmountOf(address user) external view returns(uint256);\\n\\n    function debtAmountInBase(address user) external view returns(uint256);\\n\\n    function totalDebtAmount() external view returns(uint256);\\n\\n    function utilizationRateBps() external view returns(uint256);\\n\\n    /// @dev denominator = 1E18 \\n    function getInterestRate() external view returns(uint256);\\n\\n    function saveUtilizationRateBps() external;\\n\\n    function deposit(uint256 amount) external returns(uint256 share);\\n\\n    function withdraw(uint256 share) external returns(uint256 amount);\\n\\n    function getPendingDebt(address user) external view returns(uint256 debt);\\n    \\n    function getPendingDebtInBase(address user) external view returns(uint256 debtInBase);\\n\\n    function getBaseIn(uint256 tokenOut) external view returns(uint256 baseIn);\\n\\n    function getBaseOut(uint256 tokenIn) external view returns(uint256 baseOut);\\n\\n    function getTokenIn(uint256 baseOut) external view returns(uint256 tokenIn);\\n\\n    function getTokenOut(uint256 baseIn) external view returns(uint256 tokenOut);\\n\\n    function pendingDebtAmountToShare(uint256 amount) external view returns(uint256);\\n\\n    function pendingDebtShareToAmount(uint256 share) external view returns(uint256);\\n\\n\\n    /******************************\\n     * Only for Stayking Contract *\\n     ******************************/\\n    function loan(address user, uint256 debtInBase) external returns(uint256 debt);\\n\\n    function repayInToken(address user, uint256 debt) external;\\n\\n    function repayInBase(\\n        address user, \\n        uint256 minRepaid\\n    ) payable external returns(uint256 repaid);\\n\\n    function takeDebtOwnership(\\n        address from,\\n        uint256 amount\\n    ) external;\\n\\n    function payInterest(uint256 minPaidInterest) external payable;\\n\\n    function pendRepay(\\n        address user,\\n        uint256 amount\\n    ) external returns(uint256 pendingDebtShare);\\n\\n    function repayPendingDebt(address user, uint256 minRepaidDebt) payable external returns(uint256);\\n\\n    function updateInterestModel(address newInterestModel) external;\\n    \\n    function updateSwapHelper(address newSwapHelper) external;\\n\\n    function updateMinReservedBps(uint256 newMinReservedBps) external;\\n}\",\"keccak256\":\"0xdd8c025d479e5d99ed829371560cc19d40e475bf04a8b473836e48b410760f00\",\"license\":\"UNLICENSED\"},\"contracts/lib/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b70b1f6277d3a48fa1e38e103d184c4edb1f64184517be75996c66d93a066d2\",\"license\":\"MIT\"},\"contracts/lib/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.2;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x52d45f0d640d13ef9abf76356936783dd226832343be4131c61823a580dc4b83\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b9c7ca79622c2fdd96700b95c69f6a3c407b961ab1624df360690fd69137bad\",\"license\":\"MIT\"},\"contracts/lib/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa4888dbbfe34205606c1332b112d077e8a5381313f962cd2f910afbda5c527b2\",\"license\":\"MIT\"},\"contracts/lib/utils/SafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary SafeToken {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeApprove\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransfer\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransferFrom\\\"\\n        );\\n    }\\n\\n    function safeTransferEVMOS(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"!safeTransferEVMOS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3673f957556a65d32c0b4fca4aafcb2decf960c9a064b5008c1a43acd5f11ca5\",\"license\":\"MIT\"},\"contracts/token/UnbondedEvmos.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.3;\\n\\nimport \\\"../interface/IUnbondedEvmos.sol\\\";\\nimport \\\"../interface/IVault.sol\\\";\\nimport \\\"../lib/OwnableUpgradeable.sol\\\";\\nimport \\\"../lib/utils/SafeToken.sol\\\";\\n\\ncontract UnbondedEvmos is IUnbondedEvmos, OwnableUpgradeable { \\n\\n    event Lock(address account, address vault, uint256 lockedIndex);\\n    event Unlock(address account, uint256 amount, uint256 returned);\\n    event Supply(uint256 amount);\\n    event Withdraw(address account, uint256 amount);\\n    event UpdateMinterStatus(address account, bool status);\\n    event UpdateConfigs(uint256 unbondingInterval);\\n\\n    mapping(address => bool) public override isMinter;\\n\\n    string public constant name = \\\"Unstaked EVMOS\\\";\\n    string public constant symbol = \\\"uEVMOS\\\";\\n    uint8 public constant decimals = 18;\\n\\n    uint256 public override lastUnbondedAt;\\n    uint256 public override unbondingInterval;   // maybe 14 + 2 days\\n\\n    /// @notice kor) \\ub17c\\uc758 \\ud544\\uc694\\n    // uint256 public unbondLimit = 7;\\n\\n    struct Locked {\\n        bool received;\\n        address account;\\n        address vault;\\n        uint256 share;\\n        // kor. token \\ub2e8\\uc704? evmos \\ub2e8\\uc704?\\n        uint256 debtShare;\\n        uint256 unlockedAt;\\n    }\\n\\n    Locked[] public locks;\\n    uint256 public locksLength;\\n\\n    /** @dev\\n     * kor) [\\ub17c\\uc758 \\ud544\\uc694] Locked[]\\ub97c \\uae38\\uc774\\uac00 7\\uc778 \\ud050\\ub85c \\uc9c0\\uc815.\\n     lockedIds: locks \\ubc30\\uc5f4\\uc5d0 \\ub4e4\\uc5b4\\uc788\\ub294 Lock \\uac1d\\uccb4\\uc758 array index\\n     accounts can request up to 7 unbonds for 14 days, \\n     just like when delegate EVMOS to Validator. \\n     */\\n    struct LockedQueue {\\n        uint128 front;\\n        uint128 rear;\\n        uint256[] lockedIds;\\n    }\\n    mapping(address => LockedQueue) public lockedOf;\\n    mapping(address => uint256) _balances;\\n\\n    uint256 public override totalSupply;\\n    uint256 public override totalAmount;\\n\\n    /// @notice should set minter (maybe Stayking) after deployed\\n    function __UnbondedEvmos_init(\\n        uint256 unbondingInterval_\\n    ) external initializer {\\n        __Ownable_init();\\n        updateConfigs(unbondingInterval_);\\n    }\\n\\n    /**************\\n        Modifier\\n     *************/\\n    modifier onlyMinter(){\\n        require(isMinter[msg.sender], \\\"uEVMOS: Not minter.\\\");\\n        _;\\n    }\\n\\n    /*******************\\n      Private functions\\n    ********************/\\n\\n    function updateMinterStatus(\\n        address account,\\n        bool status\\n    ) public override onlyOwner {\\n        isMinter[account] = status;\\n        emit UpdateMinterStatus(account, status);\\n    }\\n\\n    function updateConfigs(\\n        uint256 _unbondingInterval\\n    ) public onlyOwner {\\n        unbondingInterval = _unbondingInterval;\\n        emit UpdateConfigs(_unbondingInterval);\\n    }\\n\\n    /*******************\\n      Private functions\\n    ********************/\\n    function amountToShare(\\n        uint256 amount\\n    ) public view returns(uint256) {\\n        return (totalAmount == 0) ? amount :\\n            totalSupply * amount / totalAmount;\\n    }\\n\\n    function shareToAmount(\\n        uint256 share\\n    ) public view returns(uint256) {\\n        return (totalSupply == 0) ? share :\\n            totalAmount * share / totalSupply;\\n    }\\n\\n    /*******************\\n      Private functions\\n    ********************/\\n    function _mint(\\n        address account,\\n        uint256 share\\n    ) private{\\n        require(account != address(0), \\\"uEVMOS: mint to the zero address\\\");\\n        totalSupply += share;\\n        _balances[account] += share;\\n    }\\n\\n    function _burn(\\n        address account,\\n        uint256 amount\\n    ) private {\\n        require(account != address(0), \\\"uEVMOS: burn from the zero address\\\");\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"uEVMOS: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        totalSupply -= amount;\\n    }\\n\\n    /// @return unlocked     total unlocked EVMOS\\n    /// @return restUnlocked EVMOS amount that user can receive\\n    function _repayPendingDebt(\\n        Locked storage lock,\\n        uint256 minRepaid\\n    ) private returns (uint256, uint256) {\\n        IVault vault = IVault(lock.vault);\\n        address account = lock.account;\\n        uint256 amount = shareToAmount(lock.share);\\n\\n        uint256 pendingDebtInBase = vault.pendingDebtShareToAmount(lock.debtShare);\\n        lock.received = true;\\n        if(amount >= pendingDebtInBase){\\n            IVault(vault).repayInBase{value: pendingDebtInBase}(account, minRepaid);\\n            return (amount, amount - pendingDebtInBase);\\n        }\\n        else {\\n            vault.repayInBase{value: amount}(account, minRepaid);\\n            return (amount, 0);\\n        }\\n    }\\n\\n    /// @dev unlock all of unlockable uEVMOS\\n    function _unlock(\\n        address account,\\n        LockedQueue storage lockedQueue,\\n        uint256 minRepaid\\n    ) private {\\n        lockedQueue = lockedOf[account];\\n        uint128 front = lockedQueue.front; \\n        uint128 rear = lockedQueue.rear; \\n\\n        if(front == rear)   // no unlockable amounts\\n            return;\\n\\n        uint256 unlockable;\\n        uint256 returnable;\\n        uint128 i = front;\\n        \\n        // assert under 7 loop.\\n        for (i; i < rear; i++) {\\n            uint256 lockedId = lockedQueue.lockedIds[i];\\n            Locked storage lock = locks[lockedId];\\n            \\n            if(lock.unlockedAt <= block.timestamp){  /// @dev unlockable\\n                /// @dev kor) (\\uac1c\\uc120 \\ud544\\uc694) aggregate\\ud558\\uc5ec repay \\ud69f\\uc218 \\uc904\\uc774\\uae30\\n                (uint256 unlocked, uint256 returned) = _repayPendingDebt(\\n                    lock,\\n                    minRepaid\\n                );\\n                unlockable += unlocked;\\n                returnable += returned;\\n            }\\n            else \\n                break;\\n        }\\n\\n        // if unlockable > 0, front < i < rear\\n        if(unlockable > 0){\\n            lockedQueue.front = i + 1;           // 1. reset queue front\\n            _burn(account, amountToShare(unlockable));\\n\\n            // 3. return EVMOS is returnable exists\\n            if(returnable > 0){\\n                SafeToken.safeTransferEVMOS(account, returnable);\\n            }\\n            emit Unlock(account, unlockable, returnable);\\n        }\\n    }\\n\\n\\n    /****************** \\n       Core Functions\\n    *******************/\\n    function balanceOf(\\n        address account\\n    ) public view override returns(uint256) {\\n        return _balances[account];\\n    }\\n\\n\\n    /// @dev mint & lock uEVMOS\\n    ///\\n    function mintLockedToken(\\n        address to,\\n        address vault,\\n        uint256 amount,\\n        uint256 debtShare\\n    ) public override onlyMinter {\\n        require(amount > 0, \\\"mintLockedToken: amount <= 0\\\");\\n\\n        LockedQueue storage lockedQueue = lockedOf[to];\\n\\n        /// @dev consume all of unlock queue\\n        _unlock(to, lockedQueue, 1);\\n\\n        /// @dev limit queue size?\\n        // require(lockedQueue.rear - lockedQueue.front < unbondLimit, \\\"mintLockedToken: unbond limit exceeded.\\\" );\\n        uint256 share = amountToShare(amount);\\n        locks.push(\\n            Locked({\\n                account: msg.sender,\\n                vault: vault,\\n                share: share,\\n                debtShare: debtShare,\\n                // TODO \\uac1c\\uc120 \\ud544\\uc694\\n                unlockedAt: (\\n                    lastUnbondedAt > block.timestamp ? lastUnbondedAt : block.timestamp\\n                ) + unbondingInterval,\\n                received: false\\n            })\\n        );\\n\\n        locksLength = locks.length - 1;\\n        uint128 newlockedIndex = lockedQueue.rear;\\n        lockedQueue.lockedIds[newlockedIndex] = locksLength;\\n\\n        lockedQueue.rear = newlockedIndex + 1;\\n\\n        totalAmount += amount;\\n        _mint(to, share);\\n        emit Lock(to, vault, locksLength);\\n    }\\n\\n    // unlock all because of debt.\\n    function unlock(uint256 minRepaid) public override {\\n        LockedQueue storage lockedQueue = lockedOf[msg.sender];\\n        _unlock(msg.sender, lockedQueue, minRepaid);\\n    }\\n\\n    function supplyUnbondedToken() payable public override {\\n        /**\\n            @TODO\\n            maybe use delegate/undelegate tx ORACLE?\\n         */\\n        lastUnbondedAt = block.timestamp;\\n    }\\n\\n    /// @dev calc user's unlockable uEVMOS(includes debt) & debt\\n    function getUnlockable(\\n        address account\\n    ) public override view returns(uint256 unlockable, uint256 debt) {\\n        uint128 front = lockedOf[account].front; \\n        uint128 rear = lockedOf[account].rear; \\n        uint256[] memory lockedIds = lockedOf[account].lockedIds;\\n\\n        if(front == rear)   // no unlockable amounts\\n            return (0, 0);\\n        \\n        // TODO assert under 7 loop?\\n        // kor) \\uac00\\uc2a4\\ube44 \\ub108\\ubb34 \\ub9ce\\uc774 \\ub4e4\\uac8c \\ub418\\uba74 \\ud2b8\\ub79c\\uc7ad\\uc158 \\uc2e4\\ud328\\ud560\\ub4ef..\\n        for (uint128 i = front; i < rear; i++) {\\n            Locked memory lock = locks[lockedIds[i]];\\n            if(lock.unlockedAt <= block.timestamp){\\n                unlockable += shareToAmount(lock.share);\\n\\n                /// @dev kor) (\\uac1c\\uc120 \\ud544\\uc694) aggregate\\ud558\\uc5ec repay \\ud69f\\uc218 \\uc904\\uc774\\uae30\\n                debt += IVault(lock.vault).getPendingDebtInBase(account);\\n            }\\n            else \\n                break;\\n        }\\n    }\\n\\n    /// @notice TODO\\n    /// kor) \\uc720\\uc800\\uac00 \\uc77c\\ubd80\\ub9cc unstake \\uc694\\uccad\\ud558\\ub294 \\uacbd\\uc6b0, \\ube5a\\uc744 \\ub2e4 \\ubabb \\uac1a\\ub294 \\uacbd\\uc6b0\\uac00 \\ub2f9\\uc5f0\\ud788 \\ubc1c\\uc0dd\\ud55c\\ub2e4.\\n    /// \\uc77c\\ub2e8 \\ubd80\\ucc44\\ube44\\uc728\\uc774 100% \\ub118\\uae30\\ub294 \\uacbd\\uc6b0 \\uc6b0\\ub9ac\\uac00 unlock \\uc2dc\\ud0a4\\ub294 \\uac83\\ub9cc \\uad6c\\ud604.\\n    function isKillable(uint256 lockedId) public override view returns(bool) {\\n        Locked memory lock = locks[lockedId];\\n        if(lock.unlockedAt > block.timestamp)\\n            return false;\\n        uint256 debt = IVault(lock.vault).getPendingDebtInBase(lock.account);\\n        return debt >= shareToAmount(lock.share);\\n    }\\n\\n    function kill(uint256 lockedId) public override {\\n        Locked storage lock = locks[lockedId];\\n        require(lock.unlockedAt <= block.timestamp, \\\"uEVMOS Kill: Cannot Unlock.\\\");\\n        uint256 debt = IVault(lock.vault).getPendingDebtInBase(lock.account);\\n        uint256 lockedAmount = shareToAmount(lock.share);\\n        // liquidate threshold: 100%\\n        require(debt >= lockedAmount, \\\"uEVMOS Kill: Still safe.\\\");\\n        \\n        IVault(lock.vault).repayInBase{value: lockedAmount}(lock.account, 1);\\n        lock.received = true;\\n        /// @dev event Kill?\\n    }\\n\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n}\",\"keccak256\":\"0x0fc24b19a7f9cfcf0021bcd71faf08dd32214b97de9fcb89f84130d9080530be\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613154806100206000396000f3fe6080604052600436106101855760003560e01c806395d89b41116100d1578063c86301781161008a578063e158c1ac11610064578063e158c1ac146105a2578063efc8f3c8146105ac578063f2fde38b146105d5578063f4dadc61146105fe5761018c565b8063c863017814610512578063cc9bc4af14610550578063d29a0025146105795761018c565b806395d89b41146103d957806397e7381e146104045780639c6b289614610441578063a4086a8f1461046c578063a5f1e28214610497578063aa271e1a146104d55761018c565b80635bfc5a6e1161013e57806370a082311161011857806370a0823114610331578063715018a61461036e57806379564ace146103855780638da5cb5b146103ae5761018c565b80635bfc5a6e146102b45780636198e339146102df578063633235d0146103085761018c565b806306fdde031461018e57806318160ddd146101b95780631a39d8ef146101e45780632d4047e51461020f5780632d6f80131461024c578063313ce567146102895761018c565b3661018c57005b005b34801561019a57600080fd5b506101a3610640565b6040516101b09190612908565b60405180910390f35b3480156101c557600080fd5b506101ce610679565b6040516101db9190612ad3565b60405180910390f35b3480156101f057600080fd5b506101f961067f565b6040516102069190612ad3565b60405180910390f35b34801561021b57600080fd5b506102366004803603810190610231919061248d565b610685565b6040516102439190612ad3565b60405180910390f35b34801561025857600080fd5b50610273600480360381019061026e919061248d565b6106b9565b6040516102809190612ad3565b60405180910390f35b34801561029557600080fd5b5061029e6106ed565b6040516102ab9190612b17565b60405180910390f35b3480156102c057600080fd5b506102c96106f2565b6040516102d69190612ad3565b60405180910390f35b3480156102eb57600080fd5b506103066004803603810190610301919061248d565b6106f8565b005b34801561031457600080fd5b5061032f600480360381019061032a91906123ee565b61074a565b005b34801561033d57600080fd5b50610358600480360381019061035391906123c5565b610b35565b6040516103659190612ad3565b60405180910390f35b34801561037a57600080fd5b50610383610b7e565b005b34801561039157600080fd5b506103ac60048036038101906103a7919061248d565b610b92565b005b3480156103ba57600080fd5b506103c3610bdb565b6040516103d0919061276d565b60405180910390f35b3480156103e557600080fd5b506103ee610c05565b6040516103fb9190612908565b60405180910390f35b34801561041057600080fd5b5061042b6004803603810190610426919061248d565b610c3e565b6040516104389190612871565b60405180910390f35b34801561044d57600080fd5b50610456610e40565b6040516104639190612ad3565b60405180910390f35b34801561047857600080fd5b50610481610e46565b60405161048e9190612ad3565b60405180910390f35b3480156104a357600080fd5b506104be60048036038101906104b991906123c5565b610e4c565b6040516104cc929190612aaa565b60405180910390f35b3480156104e157600080fd5b506104fc60048036038101906104f791906123c5565b610ea8565b6040516105099190612871565b60405180910390f35b34801561051e57600080fd5b50610539600480360381019061053491906123c5565b610ec8565b604051610547929190612aee565b60405180910390f35b34801561055c57600080fd5b506105776004803603810190610572919061248d565b611309565b005b34801561058557600080fd5b506105a0600480360381019061059b919061248d565b611451565b005b6105aa611708565b005b3480156105b857600080fd5b506105d360048036038101906105ce9190612451565b611711565b005b3480156105e157600080fd5b506105fc60048036038101906105f791906123c5565b6117ad565b005b34801561060a57600080fd5b506106256004803603810190610620919061248d565b611831565b6040516106379695949392919061288c565b60405180910390f35b6040518060400160405280600e81526020017f556e7374616b65642045564d4f5300000000000000000000000000000000000081525081565b606c5481565b606d5481565b600080606d54146106b057606d5482606c546106a19190612c31565b6106ab9190612c00565b6106b2565b815b9050919050565b600080606c54146106e457606c5482606d546106d59190612c31565b6106df9190612c00565b6106e6565b815b9050919050565b601281565b60695481565b6000606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506107463382846118ca565b5050565b606560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cd90612a2a565b60405180910390fd5b60008211610819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081090612a0a565b60405180910390fd5b6000606a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610868858260016118ca565b600061087384610685565b905060686040518060c001604052806000151581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200183815260200185815260200160675442606654116108e157426108e5565b6066545b6108ef9190612baa565b815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600201556080820151816003015560a08201518160040155505060016068805490506109fb9190612c8b565b60698190555060008260000160109054906101000a90046fffffffffffffffffffffffffffffffff16905060695483600101826fffffffffffffffffffffffffffffffff1681548110610a77577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550600181610a929190612b64565b8360000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555084606d6000828254610ade9190612baa565b92505081905550610aef8783611b7e565b7fec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f38787606954604051610b2493929190612788565b60405180910390a150505050505050565b6000606b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b86611c61565b610b906000611cdf565b565b610b9a611c61565b806067819055507f78a3671679b68721aaad9eb74535be0be119bd34c0efa671eb6ab3210d1fe25781604051610bd09190612ad3565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6040518060400160405280600681526020017f7545564d4f53000000000000000000000000000000000000000000000000000081525081565b60008060688381548110610c7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815250509050428160a001511115610d91576000915050610e3b565b6000816040015173ffffffffffffffffffffffffffffffffffffffff16635eeff10183602001516040518263ffffffff1660e01b8152600401610dd4919061276d565b60206040518083038186803b158015610dec57600080fd5b505afa158015610e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2491906124b6565b9050610e3382606001516106b9565b811015925050505b919050565b60665481565b60675481565b606a6020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b60656020528060005260406000206000915054906101000a900460ff1681565b6000806000606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a90046fffffffffffffffffffffffffffffffff1690506000606a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff1690506000606a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010180548060200260200160405190810160405280929190818152602001828054801561101f57602002820191906000526020600020905b81548152602001906001019080831161100b575b50505050509050816fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff1614156110615760008094509450505050611304565b60008390505b826fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1610156112ff576000606883836fffffffffffffffffffffffffffffffff16815181106110e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181548110611121577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815250509050428160a00151116112e55761123981606001516106b9565b876112449190612baa565b9650806040015173ffffffffffffffffffffffffffffffffffffffff16635eeff101896040518263ffffffff1660e01b8152600401611283919061276d565b60206040518083038186803b15801561129b57600080fd5b505afa1580156112af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d391906124b6565b866112de9190612baa565b95506112eb565b506112ff565b5080806112f790612d87565b915050611067565b505050505b915091565b60008060019054906101000a900460ff1615905080801561133a5750600160008054906101000a900460ff1660ff16105b80611367575061134930611da5565b1580156113665750600160008054906101000a900460ff1660ff16145b5b6113a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139d9061296a565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156113e3576001600060016101000a81548160ff0219169083151502179055505b6113eb611dc8565b6113f482610b92565b801561144d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161144491906128ed565b60405180910390a15b5050565b60006068828154811061148d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060050201905042816004015411156114e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114db90612a8a565b60405180910390fd5b60008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635eeff1018360000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611567919061276d565b60206040518083038186803b15801561157f57600080fd5b505afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b791906124b6565b905060006115c883600201546106b9565b90508082101561160d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611604906129aa565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d2e6fcb828560000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016040518463ffffffff1660e01b81526004016116929291906127e8565b6020604051808303818588803b1580156116ab57600080fd5b505af11580156116bf573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906116e491906124b6565b5060018360000160006101000a81548160ff02191690831515021790555050505050565b42606681905550565b611719611c61565b80606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507ff6c10b2804d0174249f23bd4c462fb3e65ea16bf2b6896effe8a09f8f6a8e3b082826040516117a19291906127bf565b60405180910390a15050565b6117b5611c61565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181c9061292a565b60405180910390fd5b61182e81611cdf565b50565b6068818154811061184157600080fd5b90600052602060002090600502016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154905086565b606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020915060008260000160009054906101000a90046fffffffffffffffffffffffffffffffff16905060008360000160109054906101000a90046fffffffffffffffffffffffffffffffff169050806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff161415611988575050611b79565b60008060008490505b836fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161015611ac157600087600101826fffffffffffffffffffffffffffffffff1681548110611a0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050600060688281548110611a56577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060050201905042816004015411611aa557600080611a7e838b611e21565b915091508187611a8e9190612baa565b96508086611a9c9190612baa565b95505050611aac565b5050611ac1565b50508080611ab990612d87565b915050611991565b6000831115611b7357600181611ad79190612b64565b8760000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550611b2388611b1e85610685565b612087565b6000821115611b3757611b3688836121e2565b5b7ff7870c5b224cbc19873599e46ccfc7103934650509b1af0c3ce90138377c2004888484604051611b6a9392919061283a565b60405180910390a15b50505050505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be5906129ea565b60405180910390fd5b80606c6000828254611c009190612baa565b9250508190555080606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c569190612baa565b925050819055505050565b611c69612308565b73ffffffffffffffffffffffffffffffffffffffff16611c87610bdb565b73ffffffffffffffffffffffffffffffffffffffff1614611cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd4906129ca565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611e17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0e90612a6a565b60405180910390fd5b611e1f612310565b565b60008060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008560000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000611e8587600201546106b9565b905060008373ffffffffffffffffffffffffffffffffffffffff16631ce9ba3689600301546040518263ffffffff1660e01b8152600401611ec69190612ad3565b60206040518083038186803b158015611ede57600080fd5b505afa158015611ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1691906124b6565b905060018860000160006101000a81548160ff021916908315150217905550808210611fe5578373ffffffffffffffffffffffffffffffffffffffff16639d2e6fcb82858a6040518463ffffffff1660e01b8152600401611f78929190612811565b6020604051808303818588803b158015611f9157600080fd5b505af1158015611fa5573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611fca91906124b6565b50818183611fd89190612c8b565b9550955050505050612080565b8373ffffffffffffffffffffffffffffffffffffffff16639d2e6fcb83858a6040518463ffffffff1660e01b8152600401612021929190612811565b6020604051808303818588803b15801561203a57600080fd5b505af115801561204e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061207391906124b6565b5081600095509550505050505b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ee90612a4a565b60405180910390fd5b6000606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561217e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121759061294a565b60405180910390fd5b818103606b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081606c60008282546121d69190612c8b565b92505081905550505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561223d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561226f5781602001600182028036833780820191505090505b5060405161227d9190612756565b60006040518083038185875af1925050503d80600081146122ba576040519150601f19603f3d011682016040523d82523d6000602084013e6122bf565b606091505b5050905080612303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fa9061298a565b60405180910390fd5b505050565b600033905090565b600060019054906101000a900460ff1661235f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235690612a6a565b60405180910390fd5b61236f61236a612308565b611cdf565b565b600081359050612380816130d9565b92915050565b600081359050612395816130f0565b92915050565b6000813590506123aa81613107565b92915050565b6000815190506123bf81613107565b92915050565b6000602082840312156123d757600080fd5b60006123e584828501612371565b91505092915050565b6000806000806080858703121561240457600080fd5b600061241287828801612371565b945050602061242387828801612371565b93505060406124348782880161239b565b92505060606124458782880161239b565b91505092959194509250565b6000806040838503121561246457600080fd5b600061247285828601612371565b925050602061248385828601612386565b9150509250929050565b60006020828403121561249f57600080fd5b60006124ad8482850161239b565b91505092915050565b6000602082840312156124c857600080fd5b60006124d6848285016123b0565b91505092915050565b6124e881612cbf565b82525050565b6124f781612cd1565b82525050565b600061250882612b32565b6125128185612b48565b9350612522818560208601612d54565b80840191505092915050565b61253781612d30565b82525050565b61254681612d42565b82525050565b600061255782612b3d565b6125618185612b53565b9350612571818560208601612d54565b61257a81612e1e565b840191505092915050565b6000612592602683612b53565b915061259d82612e2f565b604082019050919050565b60006125b5602383612b53565b91506125c082612e7e565b604082019050919050565b60006125d8602e83612b53565b91506125e382612ecd565b604082019050919050565b60006125fb601283612b53565b915061260682612f1c565b602082019050919050565b600061261e601883612b53565b915061262982612f45565b602082019050919050565b6000612641602083612b53565b915061264c82612f6e565b602082019050919050565b6000612664602083612b53565b915061266f82612f97565b602082019050919050565b6000612687601c83612b53565b915061269282612fc0565b602082019050919050565b60006126aa601383612b53565b91506126b582612fe9565b602082019050919050565b60006126cd602283612b53565b91506126d882613012565b604082019050919050565b60006126f0602b83612b53565b91506126fb82613061565b604082019050919050565b6000612713601b83612b53565b915061271e826130b0565b602082019050919050565b61273281612cdd565b82525050565b61274181612d19565b82525050565b61275081612d23565b82525050565b600061276282846124fd565b915081905092915050565b600060208201905061278260008301846124df565b92915050565b600060608201905061279d60008301866124df565b6127aa60208301856124df565b6127b76040830184612738565b949350505050565b60006040820190506127d460008301856124df565b6127e160208301846124ee565b9392505050565b60006040820190506127fd60008301856124df565b61280a602083018461252e565b9392505050565b600060408201905061282660008301856124df565b6128336020830184612738565b9392505050565b600060608201905061284f60008301866124df565b61285c6020830185612738565b6128696040830184612738565b949350505050565b600060208201905061288660008301846124ee565b92915050565b600060c0820190506128a160008301896124ee565b6128ae60208301886124df565b6128bb60408301876124df565b6128c86060830186612738565b6128d56080830185612738565b6128e260a0830184612738565b979650505050505050565b6000602082019050612902600083018461253d565b92915050565b60006020820190508181036000830152612922818461254c565b905092915050565b6000602082019050818103600083015261294381612585565b9050919050565b60006020820190508181036000830152612963816125a8565b9050919050565b60006020820190508181036000830152612983816125cb565b9050919050565b600060208201905081810360008301526129a3816125ee565b9050919050565b600060208201905081810360008301526129c381612611565b9050919050565b600060208201905081810360008301526129e381612634565b9050919050565b60006020820190508181036000830152612a0381612657565b9050919050565b60006020820190508181036000830152612a238161267a565b9050919050565b60006020820190508181036000830152612a438161269d565b9050919050565b60006020820190508181036000830152612a63816126c0565b9050919050565b60006020820190508181036000830152612a83816126e3565b9050919050565b60006020820190508181036000830152612aa381612706565b9050919050565b6000604082019050612abf6000830185612729565b612acc6020830184612729565b9392505050565b6000602082019050612ae86000830184612738565b92915050565b6000604082019050612b036000830185612738565b612b106020830184612738565b9392505050565b6000602082019050612b2c6000830184612747565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000612b6f82612cdd565b9150612b7a83612cdd565b9250826fffffffffffffffffffffffffffffffff03821115612b9f57612b9e612dc0565b5b828201905092915050565b6000612bb582612d19565b9150612bc083612d19565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612bf557612bf4612dc0565b5b828201905092915050565b6000612c0b82612d19565b9150612c1683612d19565b925082612c2657612c25612def565b5b828204905092915050565b6000612c3c82612d19565b9150612c4783612d19565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c8057612c7f612dc0565b5b828202905092915050565b6000612c9682612d19565b9150612ca183612d19565b925082821015612cb457612cb3612dc0565b5b828203905092915050565b6000612cca82612cf9565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612d3b82612d19565b9050919050565b6000612d4d82612d23565b9050919050565b60005b83811015612d72578082015181840152602081019050612d57565b83811115612d81576000848401525b50505050565b6000612d9282612cdd565b91506fffffffffffffffffffffffffffffffff821415612db557612db4612dc0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f7545564d4f533a206275726e20616d6f756e7420657863656564732062616c6160008201527f6e63650000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f21736166655472616e7366657245564d4f530000000000000000000000000000600082015250565b7f7545564d4f53204b696c6c3a205374696c6c20736166652e0000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f7545564d4f533a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f6d696e744c6f636b6564546f6b656e3a20616d6f756e74203c3d203000000000600082015250565b7f7545564d4f533a204e6f74206d696e7465722e00000000000000000000000000600082015250565b7f7545564d4f533a206275726e2066726f6d20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f7545564d4f53204b696c6c3a2043616e6e6f7420556e6c6f636b2e0000000000600082015250565b6130e281612cbf565b81146130ed57600080fd5b50565b6130f981612cd1565b811461310457600080fd5b50565b61311081612d19565b811461311b57600080fd5b5056fea2646970667358221220732da8372b9966584df3427d3e1e2ea59ef86bc3a354bc8d31d7d769f9a9381264736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101855760003560e01c806395d89b41116100d1578063c86301781161008a578063e158c1ac11610064578063e158c1ac146105a2578063efc8f3c8146105ac578063f2fde38b146105d5578063f4dadc61146105fe5761018c565b8063c863017814610512578063cc9bc4af14610550578063d29a0025146105795761018c565b806395d89b41146103d957806397e7381e146104045780639c6b289614610441578063a4086a8f1461046c578063a5f1e28214610497578063aa271e1a146104d55761018c565b80635bfc5a6e1161013e57806370a082311161011857806370a0823114610331578063715018a61461036e57806379564ace146103855780638da5cb5b146103ae5761018c565b80635bfc5a6e146102b45780636198e339146102df578063633235d0146103085761018c565b806306fdde031461018e57806318160ddd146101b95780631a39d8ef146101e45780632d4047e51461020f5780632d6f80131461024c578063313ce567146102895761018c565b3661018c57005b005b34801561019a57600080fd5b506101a3610640565b6040516101b09190612908565b60405180910390f35b3480156101c557600080fd5b506101ce610679565b6040516101db9190612ad3565b60405180910390f35b3480156101f057600080fd5b506101f961067f565b6040516102069190612ad3565b60405180910390f35b34801561021b57600080fd5b506102366004803603810190610231919061248d565b610685565b6040516102439190612ad3565b60405180910390f35b34801561025857600080fd5b50610273600480360381019061026e919061248d565b6106b9565b6040516102809190612ad3565b60405180910390f35b34801561029557600080fd5b5061029e6106ed565b6040516102ab9190612b17565b60405180910390f35b3480156102c057600080fd5b506102c96106f2565b6040516102d69190612ad3565b60405180910390f35b3480156102eb57600080fd5b506103066004803603810190610301919061248d565b6106f8565b005b34801561031457600080fd5b5061032f600480360381019061032a91906123ee565b61074a565b005b34801561033d57600080fd5b50610358600480360381019061035391906123c5565b610b35565b6040516103659190612ad3565b60405180910390f35b34801561037a57600080fd5b50610383610b7e565b005b34801561039157600080fd5b506103ac60048036038101906103a7919061248d565b610b92565b005b3480156103ba57600080fd5b506103c3610bdb565b6040516103d0919061276d565b60405180910390f35b3480156103e557600080fd5b506103ee610c05565b6040516103fb9190612908565b60405180910390f35b34801561041057600080fd5b5061042b6004803603810190610426919061248d565b610c3e565b6040516104389190612871565b60405180910390f35b34801561044d57600080fd5b50610456610e40565b6040516104639190612ad3565b60405180910390f35b34801561047857600080fd5b50610481610e46565b60405161048e9190612ad3565b60405180910390f35b3480156104a357600080fd5b506104be60048036038101906104b991906123c5565b610e4c565b6040516104cc929190612aaa565b60405180910390f35b3480156104e157600080fd5b506104fc60048036038101906104f791906123c5565b610ea8565b6040516105099190612871565b60405180910390f35b34801561051e57600080fd5b50610539600480360381019061053491906123c5565b610ec8565b604051610547929190612aee565b60405180910390f35b34801561055c57600080fd5b506105776004803603810190610572919061248d565b611309565b005b34801561058557600080fd5b506105a0600480360381019061059b919061248d565b611451565b005b6105aa611708565b005b3480156105b857600080fd5b506105d360048036038101906105ce9190612451565b611711565b005b3480156105e157600080fd5b506105fc60048036038101906105f791906123c5565b6117ad565b005b34801561060a57600080fd5b506106256004803603810190610620919061248d565b611831565b6040516106379695949392919061288c565b60405180910390f35b6040518060400160405280600e81526020017f556e7374616b65642045564d4f5300000000000000000000000000000000000081525081565b606c5481565b606d5481565b600080606d54146106b057606d5482606c546106a19190612c31565b6106ab9190612c00565b6106b2565b815b9050919050565b600080606c54146106e457606c5482606d546106d59190612c31565b6106df9190612c00565b6106e6565b815b9050919050565b601281565b60695481565b6000606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506107463382846118ca565b5050565b606560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cd90612a2a565b60405180910390fd5b60008211610819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081090612a0a565b60405180910390fd5b6000606a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610868858260016118ca565b600061087384610685565b905060686040518060c001604052806000151581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200183815260200185815260200160675442606654116108e157426108e5565b6066545b6108ef9190612baa565b815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600201556080820151816003015560a08201518160040155505060016068805490506109fb9190612c8b565b60698190555060008260000160109054906101000a90046fffffffffffffffffffffffffffffffff16905060695483600101826fffffffffffffffffffffffffffffffff1681548110610a77577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550600181610a929190612b64565b8360000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555084606d6000828254610ade9190612baa565b92505081905550610aef8783611b7e565b7fec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f38787606954604051610b2493929190612788565b60405180910390a150505050505050565b6000606b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b86611c61565b610b906000611cdf565b565b610b9a611c61565b806067819055507f78a3671679b68721aaad9eb74535be0be119bd34c0efa671eb6ab3210d1fe25781604051610bd09190612ad3565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6040518060400160405280600681526020017f7545564d4f53000000000000000000000000000000000000000000000000000081525081565b60008060688381548110610c7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815250509050428160a001511115610d91576000915050610e3b565b6000816040015173ffffffffffffffffffffffffffffffffffffffff16635eeff10183602001516040518263ffffffff1660e01b8152600401610dd4919061276d565b60206040518083038186803b158015610dec57600080fd5b505afa158015610e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2491906124b6565b9050610e3382606001516106b9565b811015925050505b919050565b60665481565b60675481565b606a6020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b60656020528060005260406000206000915054906101000a900460ff1681565b6000806000606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a90046fffffffffffffffffffffffffffffffff1690506000606a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff1690506000606a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010180548060200260200160405190810160405280929190818152602001828054801561101f57602002820191906000526020600020905b81548152602001906001019080831161100b575b50505050509050816fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff1614156110615760008094509450505050611304565b60008390505b826fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1610156112ff576000606883836fffffffffffffffffffffffffffffffff16815181106110e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181548110611121577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815250509050428160a00151116112e55761123981606001516106b9565b876112449190612baa565b9650806040015173ffffffffffffffffffffffffffffffffffffffff16635eeff101896040518263ffffffff1660e01b8152600401611283919061276d565b60206040518083038186803b15801561129b57600080fd5b505afa1580156112af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d391906124b6565b866112de9190612baa565b95506112eb565b506112ff565b5080806112f790612d87565b915050611067565b505050505b915091565b60008060019054906101000a900460ff1615905080801561133a5750600160008054906101000a900460ff1660ff16105b80611367575061134930611da5565b1580156113665750600160008054906101000a900460ff1660ff16145b5b6113a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139d9061296a565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156113e3576001600060016101000a81548160ff0219169083151502179055505b6113eb611dc8565b6113f482610b92565b801561144d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161144491906128ed565b60405180910390a15b5050565b60006068828154811061148d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060050201905042816004015411156114e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114db90612a8a565b60405180910390fd5b60008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635eeff1018360000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611567919061276d565b60206040518083038186803b15801561157f57600080fd5b505afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b791906124b6565b905060006115c883600201546106b9565b90508082101561160d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611604906129aa565b60405180910390fd5b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d2e6fcb828560000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016040518463ffffffff1660e01b81526004016116929291906127e8565b6020604051808303818588803b1580156116ab57600080fd5b505af11580156116bf573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906116e491906124b6565b5060018360000160006101000a81548160ff02191690831515021790555050505050565b42606681905550565b611719611c61565b80606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507ff6c10b2804d0174249f23bd4c462fb3e65ea16bf2b6896effe8a09f8f6a8e3b082826040516117a19291906127bf565b60405180910390a15050565b6117b5611c61565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181c9061292a565b60405180910390fd5b61182e81611cdf565b50565b6068818154811061184157600080fd5b90600052602060002090600502016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154905086565b606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020915060008260000160009054906101000a90046fffffffffffffffffffffffffffffffff16905060008360000160109054906101000a90046fffffffffffffffffffffffffffffffff169050806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff161415611988575050611b79565b60008060008490505b836fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161015611ac157600087600101826fffffffffffffffffffffffffffffffff1681548110611a0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050600060688281548110611a56577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060050201905042816004015411611aa557600080611a7e838b611e21565b915091508187611a8e9190612baa565b96508086611a9c9190612baa565b95505050611aac565b5050611ac1565b50508080611ab990612d87565b915050611991565b6000831115611b7357600181611ad79190612b64565b8760000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550611b2388611b1e85610685565b612087565b6000821115611b3757611b3688836121e2565b5b7ff7870c5b224cbc19873599e46ccfc7103934650509b1af0c3ce90138377c2004888484604051611b6a9392919061283a565b60405180910390a15b50505050505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be5906129ea565b60405180910390fd5b80606c6000828254611c009190612baa565b9250508190555080606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c569190612baa565b925050819055505050565b611c69612308565b73ffffffffffffffffffffffffffffffffffffffff16611c87610bdb565b73ffffffffffffffffffffffffffffffffffffffff1614611cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd4906129ca565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611e17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0e90612a6a565b60405180910390fd5b611e1f612310565b565b60008060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008560000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000611e8587600201546106b9565b905060008373ffffffffffffffffffffffffffffffffffffffff16631ce9ba3689600301546040518263ffffffff1660e01b8152600401611ec69190612ad3565b60206040518083038186803b158015611ede57600080fd5b505afa158015611ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1691906124b6565b905060018860000160006101000a81548160ff021916908315150217905550808210611fe5578373ffffffffffffffffffffffffffffffffffffffff16639d2e6fcb82858a6040518463ffffffff1660e01b8152600401611f78929190612811565b6020604051808303818588803b158015611f9157600080fd5b505af1158015611fa5573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611fca91906124b6565b50818183611fd89190612c8b565b9550955050505050612080565b8373ffffffffffffffffffffffffffffffffffffffff16639d2e6fcb83858a6040518463ffffffff1660e01b8152600401612021929190612811565b6020604051808303818588803b15801561203a57600080fd5b505af115801561204e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061207391906124b6565b5081600095509550505050505b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ee90612a4a565b60405180910390fd5b6000606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561217e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121759061294a565b60405180910390fd5b818103606b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081606c60008282546121d69190612c8b565b92505081905550505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561223d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561226f5781602001600182028036833780820191505090505b5060405161227d9190612756565b60006040518083038185875af1925050503d80600081146122ba576040519150601f19603f3d011682016040523d82523d6000602084013e6122bf565b606091505b5050905080612303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fa9061298a565b60405180910390fd5b505050565b600033905090565b600060019054906101000a900460ff1661235f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235690612a6a565b60405180910390fd5b61236f61236a612308565b611cdf565b565b600081359050612380816130d9565b92915050565b600081359050612395816130f0565b92915050565b6000813590506123aa81613107565b92915050565b6000815190506123bf81613107565b92915050565b6000602082840312156123d757600080fd5b60006123e584828501612371565b91505092915050565b6000806000806080858703121561240457600080fd5b600061241287828801612371565b945050602061242387828801612371565b93505060406124348782880161239b565b92505060606124458782880161239b565b91505092959194509250565b6000806040838503121561246457600080fd5b600061247285828601612371565b925050602061248385828601612386565b9150509250929050565b60006020828403121561249f57600080fd5b60006124ad8482850161239b565b91505092915050565b6000602082840312156124c857600080fd5b60006124d6848285016123b0565b91505092915050565b6124e881612cbf565b82525050565b6124f781612cd1565b82525050565b600061250882612b32565b6125128185612b48565b9350612522818560208601612d54565b80840191505092915050565b61253781612d30565b82525050565b61254681612d42565b82525050565b600061255782612b3d565b6125618185612b53565b9350612571818560208601612d54565b61257a81612e1e565b840191505092915050565b6000612592602683612b53565b915061259d82612e2f565b604082019050919050565b60006125b5602383612b53565b91506125c082612e7e565b604082019050919050565b60006125d8602e83612b53565b91506125e382612ecd565b604082019050919050565b60006125fb601283612b53565b915061260682612f1c565b602082019050919050565b600061261e601883612b53565b915061262982612f45565b602082019050919050565b6000612641602083612b53565b915061264c82612f6e565b602082019050919050565b6000612664602083612b53565b915061266f82612f97565b602082019050919050565b6000612687601c83612b53565b915061269282612fc0565b602082019050919050565b60006126aa601383612b53565b91506126b582612fe9565b602082019050919050565b60006126cd602283612b53565b91506126d882613012565b604082019050919050565b60006126f0602b83612b53565b91506126fb82613061565b604082019050919050565b6000612713601b83612b53565b915061271e826130b0565b602082019050919050565b61273281612cdd565b82525050565b61274181612d19565b82525050565b61275081612d23565b82525050565b600061276282846124fd565b915081905092915050565b600060208201905061278260008301846124df565b92915050565b600060608201905061279d60008301866124df565b6127aa60208301856124df565b6127b76040830184612738565b949350505050565b60006040820190506127d460008301856124df565b6127e160208301846124ee565b9392505050565b60006040820190506127fd60008301856124df565b61280a602083018461252e565b9392505050565b600060408201905061282660008301856124df565b6128336020830184612738565b9392505050565b600060608201905061284f60008301866124df565b61285c6020830185612738565b6128696040830184612738565b949350505050565b600060208201905061288660008301846124ee565b92915050565b600060c0820190506128a160008301896124ee565b6128ae60208301886124df565b6128bb60408301876124df565b6128c86060830186612738565b6128d56080830185612738565b6128e260a0830184612738565b979650505050505050565b6000602082019050612902600083018461253d565b92915050565b60006020820190508181036000830152612922818461254c565b905092915050565b6000602082019050818103600083015261294381612585565b9050919050565b60006020820190508181036000830152612963816125a8565b9050919050565b60006020820190508181036000830152612983816125cb565b9050919050565b600060208201905081810360008301526129a3816125ee565b9050919050565b600060208201905081810360008301526129c381612611565b9050919050565b600060208201905081810360008301526129e381612634565b9050919050565b60006020820190508181036000830152612a0381612657565b9050919050565b60006020820190508181036000830152612a238161267a565b9050919050565b60006020820190508181036000830152612a438161269d565b9050919050565b60006020820190508181036000830152612a63816126c0565b9050919050565b60006020820190508181036000830152612a83816126e3565b9050919050565b60006020820190508181036000830152612aa381612706565b9050919050565b6000604082019050612abf6000830185612729565b612acc6020830184612729565b9392505050565b6000602082019050612ae86000830184612738565b92915050565b6000604082019050612b036000830185612738565b612b106020830184612738565b9392505050565b6000602082019050612b2c6000830184612747565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000612b6f82612cdd565b9150612b7a83612cdd565b9250826fffffffffffffffffffffffffffffffff03821115612b9f57612b9e612dc0565b5b828201905092915050565b6000612bb582612d19565b9150612bc083612d19565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612bf557612bf4612dc0565b5b828201905092915050565b6000612c0b82612d19565b9150612c1683612d19565b925082612c2657612c25612def565b5b828204905092915050565b6000612c3c82612d19565b9150612c4783612d19565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c8057612c7f612dc0565b5b828202905092915050565b6000612c9682612d19565b9150612ca183612d19565b925082821015612cb457612cb3612dc0565b5b828203905092915050565b6000612cca82612cf9565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612d3b82612d19565b9050919050565b6000612d4d82612d23565b9050919050565b60005b83811015612d72578082015181840152602081019050612d57565b83811115612d81576000848401525b50505050565b6000612d9282612cdd565b91506fffffffffffffffffffffffffffffffff821415612db557612db4612dc0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f7545564d4f533a206275726e20616d6f756e7420657863656564732062616c6160008201527f6e63650000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f21736166655472616e7366657245564d4f530000000000000000000000000000600082015250565b7f7545564d4f53204b696c6c3a205374696c6c20736166652e0000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f7545564d4f533a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f6d696e744c6f636b6564546f6b656e3a20616d6f756e74203c3d203000000000600082015250565b7f7545564d4f533a204e6f74206d696e7465722e00000000000000000000000000600082015250565b7f7545564d4f533a206275726e2066726f6d20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f7545564d4f53204b696c6c3a2043616e6e6f7420556e6c6f636b2e0000000000600082015250565b6130e281612cbf565b81146130ed57600080fd5b50565b6130f981612cd1565b811461310457600080fd5b50565b61311081612d19565b811461311b57600080fd5b5056fea2646970667358221220732da8372b9966584df3427d3e1e2ea59ef86bc3a354bc8d31d7d769f9a9381264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getUnlockable(address)": {
        "details": "calc user's unlockable uEVMOS(includes debt) & debt"
      },
      "mintLockedToken(address,address,uint256,uint256)": {
        "details": "mint & lock uEVMOS"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "__UnbondedEvmos_init(uint256)": {
        "notice": "should set minter (maybe Stayking) after deployed"
      },
      "isKillable(uint256)": {
        "notice": "TODO kor) 유저가 일부만 unstake 요청하는 경우, 빚을 다 못 갚는 경우가 당연히 발생한다. 일단 부채비율이 100% 넘기는 경우 우리가 unlock 시키는 것만 구현."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 733,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 736,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 725,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 888,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1008,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2882,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "isMinter",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2894,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "lastUnbondedAt",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 2897,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "unbondingInterval",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 2914,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "locks",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_struct(Locked)2910_storage)dyn_storage"
      },
      {
        "astId": 2916,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "locksLength",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 2929,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "lockedOf",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(LockedQueue)2924_storage)"
      },
      {
        "astId": 2933,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "_balances",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2936,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "totalSupply",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 2939,
        "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
        "label": "totalAmount",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Locked)2910_storage)dyn_storage": {
        "base": "t_struct(Locked)2910_storage",
        "encoding": "dynamic_array",
        "label": "struct UnbondedEvmos.Locked[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(LockedQueue)2924_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UnbondedEvmos.LockedQueue)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedQueue)2924_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Locked)2910_storage": {
        "encoding": "inplace",
        "label": "struct UnbondedEvmos.Locked",
        "members": [
          {
            "astId": 2899,
            "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
            "label": "received",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2901,
            "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
            "label": "account",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2903,
            "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
            "label": "vault",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2905,
            "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
            "label": "share",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2907,
            "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
            "label": "debtShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2909,
            "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
            "label": "unlockedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(LockedQueue)2924_storage": {
        "encoding": "inplace",
        "label": "struct UnbondedEvmos.LockedQueue",
        "members": [
          {
            "astId": 2918,
            "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
            "label": "front",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2920,
            "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
            "label": "rear",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2923,
            "contract": "contracts/token/UnbondedEvmos.sol:UnbondedEvmos",
            "label": "lockedIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}