{
  "language": "Solidity",
  "sources": {
    "contracts/token/Stayking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../interface/IStayking.sol\";\nimport \"../interface/IVault.sol\";\nimport \"../interface/ISwapHelper.sol\";\nimport \"../interface/IUnbondedEvmos.sol\";\nimport \"../lib/utils/SafeToken.sol\";\nimport \"../lib/OwnableUpgradeable.sol\";\nimport \"../lib/ReentrancyGuardUpgradeable.sol\";\n\ncontract Stayking is IStayking, OwnableUpgradeable, ReentrancyGuardUpgradeable {\n\n    address private constant BASE_TOKEN = address(0);\n\n    event Stake(address indexed delegator, address indexed user, uint256 amount, uint256 share);\n    event Unstake(address indexed delegator, address indexed user, uint256 amount, uint256 share);\n    event AddPosition(address indexed user, address indexed vault, uint256 equity, uint256 debtInBase, uint256 debt, uint256 share);\n    event RemovePosition(address indexed user, address indexed vault, uint256 equity, uint256 debtInBase, uint256 debt, uint256 share);\n    event PositionChanged(address indexed user, address indexed vault, uint256 amount, uint256 share, uint256 debt);\n    event Kill(address indexed killer, address indexed user, address vault, uint256 equity, uint256 debtInBase, uint256 debt, uint256 share);\n    event Accrue(address indexed delegator, uint256 amount);\n\n    // Operation Events\n    event AddVault(address token, address vault);\n    event UpdateVault(address token, address vault);\n    event UpdateConfigs(uint256 minDebtInBase, uint256 killFactorBps);\n    event ChangeDelegator(address delegator);\n\n    address public delegator;\n    mapping(address => bool) public whitelistedKiller;\n\n    mapping(address => address) public override tokenToVault;\n\n    /// @dev kor) 유저가 예치한 금액 + auto-compound된 금액\n    uint256 public totalAmount;\n    /// @dev kor) auto-compound되어도 totalShare는 변하지 않음.\n    ///  유저는 예치하는 시점에 (예치 금액/totalAmount) * totalShare에 해당하는 share를 받음.\n    uint256 public totalShare;\n\n    /// @dev min debtAmount in EVMOS (base token)\n    uint256 public override minDebtInBase;\n    uint256 public override killFactorBps;\n\n    IUnbondedEvmos public uEVMOS;\n\n    struct Position {\n        address user;\n        /// @dev totalShare * (equity + debtInBase) / totalAmount\n        uint256 share;\n    }\n\n    /// @dev userAddress => vaultAddress => positionId (array Index of position)\n    mapping(address => mapping(address => uint256)) public positionIdOf;\n    /// @dev vaultAddress => Position[]\n    mapping(address => Position[]) public positions;\n    mapping(address => uint256) public positionsLengthOf;\n\n    // debt To Vault\n    mapping (address => uint256) public totalDebtOf;\n\n    /*************\n     * Modifiers *\n    **************/\n\n    modifier onlyDelegator(){\n        require(\n            // whitelistedDelegator[msg.sender],\n            msg.sender == delegator,\n            \"Stayking: Not whitelisted delegator.\"\n        );\n        _;\n    }\n\n    modifier onlyKiller(){\n        require(\n            whitelistedKiller[msg.sender],\n            \"Stayking: Not whitelisted Killer.\"\n        );\n        _;\n    }\n\n    function __Stayking_init(\n        address delegator_,\n        address uEVMOS_\n    ) external initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        // @TODO policy\n        updateConfigs(\n            10e18,  // minDebtInBase (10EVMOS)\n            8000    // killFactorBps\n        );\n\n        uEVMOS = IUnbondedEvmos(uEVMOS_);\n        changeDelegator(delegator_);\n    }\n\n    /**********************\n     * Operate Functions *\n    ***********************/\n\n    function changeDelegator (\n        address _delegator\n    ) public override onlyOwner {\n        delegator = _delegator;\n        emit ChangeDelegator(_delegator);\n    }\n\n    function updateVault(\n        address token,\n        address vault\n    ) public override onlyOwner {\n        bool isNewVault = (tokenToVault[token] == address(0));\n\n        if(isNewVault)\n            emit AddVault(token, vault);\n        else {\n            require(\n                IVault(tokenToVault[token]).totalDebtAmount() == 0,\n                \"updateVault: Debt remains on the existing vault.\"\n            );\n            emit UpdateVault(token, vault);\n        }\n\n        tokenToVault[token] = vault;\n        // push null position\n        positions[vault].push(\n            Position({\n                user: address(0),\n                share: 0\n            })\n        );\n\n        positionsLengthOf[vault] = 1;\n    }\n\n    function updateConfigs(\n        uint256 _minDebtInBase,\n        uint256 _killFactorBps\n    ) public onlyOwner {\n        minDebtInBase = _minDebtInBase;\n        killFactorBps = _killFactorBps;\n        emit UpdateConfigs(_minDebtInBase, _killFactorBps);\n    }\n\n    /***********************\n     * Private Functions *\n    ************************/\n    function _stake(\n        Position storage p,\n        uint256 amount\n    ) private returns (uint256 share) {\n        share = amountToShare(amount);\n        p.share += share;\n        totalAmount += amount;\n        totalShare += share;\n        // send EVMOS to delegator\n        SafeToken.safeTransferEVMOS(delegator, amount);\n\n        emit Stake(delegator, p.user, amount, share);\n    }\n\n\n    /**\n     @param p           Position\n     @param vault       owed by the user\n     @param amount      unstaked amount\n     @param repaidDebtInBase  repaid amount in EVMOS ( repaidDebt <= amount = shareToAmount(amount) )\n     */\n    function _unstake(\n        Position storage p,\n        address vault,\n        uint256 amount,\n        uint256 repaidDebtInBase\n    ) private {\n        require(repaidDebtInBase <= amount, \"unstake: repaidDebtInBase > unstaked amount\");\n        uint256 share = amountToShare(amount);\n        p.share -= share;\n        totalAmount -= amount;\n        totalShare -= share;\n\n        uint256 pendingDebtShare = IVault(vault).pendRepay(p.user, repaidDebtInBase);\n\n        uEVMOS.mintLockedToken(\n            p.user,\n            vault,\n            amount,\n            pendingDebtShare\n        );\n\n        emit Unstake(delegator, p.user, amount, share);\n    }\n\n    function _unstakeAll(\n        Position storage p,\n        address vault\n    ) private returns(uint256 amount){\n        uint256 debtInBase = IVault(vault).debtAmountInBase(p.user);\n        amount = shareToAmount(p.share);\n        _unstake(p, vault, shareToAmount(p.share), debtInBase);\n    }\n\n    function _isHealthy(\n        address vault,\n        uint256 share,\n        uint256 debt\n    ) private view returns(bool healthy, uint256 debtInBase) {\n        debtInBase = IVault(vault).getBaseIn(debt);\n        healthy = debtInBase * 1e4 < shareToAmount(share) * killFactorBps;\n    }\n\n    /******************\n     * Util Functions *\n    *******************/\n    /// @notice\n    /// 유저는 예치하는 시점에 (예치 금액 / totalAmount) * totalShare에 해당하는 share를 받음.\n    function amountToShare(uint256 amount) public view returns(uint256) {\n        return (totalAmount == 0) ? amount : (totalShare * amount) / totalAmount;\n    }\n\n    function shareToAmount(uint256 share) public view returns(uint256) {\n        return (totalShare == 0) ? share : (totalAmount * share) / totalShare;\n    }\n\n    /******************************\n     * Interface implementations *\n    *******************************/\n    function debtAmountOf(\n        address user,\n        address vault\n    ) public view override returns(uint256) {\n        return IVault(vault).debtAmountOf(user);\n    }\n\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param equity       equityAmount in EVMOS\n    /// @param debtInBase   debtAmount in EVMOS\n    function addPosition(\n        address debtToken,\n        uint256 equity,\n        uint256 debtInBase\n    ) public payable override {\n        address vault = tokenToVault[debtToken];\n        require(positionIdOf[msg.sender][vault] == 0, \"addPosition: already have position\");\n        require(equity == msg.value, \"addPosition: msg.value != equity\");\n\n        uint256 amount = equity + debtInBase;\n        require(\n            debtInBase * 1e4 < amount * killFactorBps,\n            \"addPosition: bad debt, cannot open position\"\n        );\n\n        // borrow token from vault\n        uint256 debt = IVault(vault).loan(msg.sender, debtInBase);\n\n        positions[vault].push(\n            Position({\n                user: msg.sender,\n                share: 0\n            })\n        );\n\n        uint256 positionId = positionsLengthOf[vault];\n        positionsLengthOf[vault] += 1;\n        positionIdOf[msg.sender][vault] = positionId;\n\n        uint256 share = _stake(positions[vault][positionId], amount);\n\n        emit AddPosition(msg.sender, vault, equity, debtInBase, debt, share);\n    }\n\n\n    /// @dev remove all position of debtToken vault.\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @notice kor) 부채비율이 100%가 넘어가면 포지션을 직접 종료할 수 없다. -> 강제 청산만 가능.\n    function removePosition(\n        address debtToken\n    ) public override {\n        address vault = tokenToVault[debtToken];\n        Position storage p = positions[vault][positionIdOf[msg.sender][vault]];\n        require(p.share > 0, \"removePosition: No position for this token\");\n\n        uint256 debtAmount = debtAmountOf(msg.sender, vault);\n        // 1. check if user can repay debt\n        /// @dev amount in EVMOS that user have to repay\n        uint256 currentDebtInBase = IVault(vault).getBaseIn(debtAmount);\n\n        uint256 unstakedAmount = _unstakeAll(p, vault);\n        require(\n            unstakedAmount >= currentDebtInBase,\n            \"removePosition: Bad debt\"\n        );\n\n        emit RemovePosition(\n            msg.sender,\n            vault,\n            unstakedAmount - currentDebtInBase, // equity\n            currentDebtInBase,                  // debt\n            debtAmount,\n            p.share\n        );\n\n        positionIdOf[msg.sender][vault] = 0; // kor) positionId 초기화\n    }\n\n    /// @dev Borrow more debt (increase debt ratio)\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param extraDebtInBase  amount of additional debt in EVMOS\n    function addDebt(\n        address debtToken,\n        uint256 extraDebtInBase\n    ) public override {\n        require(extraDebtInBase > 0, \"addDebt: extraDebtInBase <= 0\");\n\n        address vault = tokenToVault[debtToken];\n        uint256 positionId = positionIdOf[msg.sender][vault];\n        require(positionId > 0, \"addDebt: no position\");\n\n        Position storage p = positions[vault][positionId];\n\n        // borrow token from vault\n        IVault(vault).loan(msg.sender, extraDebtInBase);\n        _stake(p, extraDebtInBase);\n\n        uint256 debtAmount = debtAmountOf(msg.sender, vault);\n        (bool healthy, ) = _isHealthy(vault, p.share, debtAmount);\n        require(healthy, \"addDebt: bad debt, cannot add more debt anymore.\");\n\n        emit PositionChanged(\n            msg.sender,\n            vault,\n            shareToAmount(p.share),\n            p.share,\n            debtAmount\n        );\n\n    }\n\n    /// @dev Repay debt (decrease debt ratio, total staked amount(or share) does not change)\n    /// @notice user should repay debt using debtToken\n    /// @notice user approve should be preceded\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param repaidDebt  amount of repaid debt in debtToken\n    function repayDebt(\n        address debtToken,\n        uint256 repaidDebt\n    ) public override {\n        address vault = tokenToVault[debtToken];\n        uint256 positionId = positionIdOf[msg.sender][vault];\n        require(positionId > 0, \"repayDebt: no position\");\n\n        Position storage p = positions[vault][positionId];\n        uint256 debtAmount = debtAmountOf(msg.sender, vault);\n\n        SafeToken.safeTransferFrom(\n            debtToken,\n            msg.sender,\n            address(this),\n            repaidDebt\n        );\n        SafeToken.safeApprove(debtToken, vault, repaidDebt);\n        IVault(vault).repayInToken(msg.sender, repaidDebt);\n\n        emit PositionChanged(\n            msg.sender,\n            vault,\n            shareToAmount(p.share),\n            p.share,\n            debtAmount - repaidDebt\n        );\n    }\n\n    /// @dev Repay debt with EVMOS (decrease debt ratio, total staked amount(or share) does not change)\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param minRepaid    minimum value to be repaid\n    /// @notice repaidDebtInBase = msg.value\n    function repayDebtInBase(\n        address debtToken,\n        uint256 minRepaid\n    ) public payable override {\n        address vault = tokenToVault[debtToken];\n        uint256 positionId = positionIdOf[msg.sender][vault];\n        require(positionId > 0, \"repayDebtInBase: no position\");\n\n        Position storage p = positions[vault][positionId];\n        uint256 debtAmount = debtAmountOf(msg.sender, vault);\n        uint256 repaidDebt = IVault(vault).repayInBase{value: msg.value}(msg.sender, minRepaid);\n        emit PositionChanged(\n            msg.sender,\n            vault,\n            shareToAmount(p.share),\n            p.share,\n            debtAmount - repaidDebt\n        );\n    }\n\n\n    /// @dev add additional equity (decrease debt ratio)\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param extraEquity  amount of additional equity\n    function addEquity(\n        address debtToken,\n        uint256 extraEquity\n    ) payable public override {\n        address vault = tokenToVault[debtToken];\n        uint256 positionId = positionIdOf[msg.sender][vault];\n        require(positionId > 0, \"addEquity: no position\");\n        Position storage p = positions[vault][positionId];\n\n        _stake(p, extraEquity);\n        emit PositionChanged(\n            msg.sender,\n            vault,\n            shareToAmount(p.share),\n            p.share,\n            debtAmountOf(msg.sender, vault)\n        );\n    }\n\n    /** @notice change position value\n        case 1. changeEquityInBase > 0 \n            - increase position value (call _stake function)\n            - decrease debt ratio\n        case 2. changeEquityInBase < 0 \n            - decrease position value (call _unstake function)\n            - increase debt ratio\n        case 3. changeDebt > 0 (borrow more debt)\n            - increase position value (call _stake function)\n            - increase debt ratio\n        case 4. changeEquity < 0 (repay debt by unstaking)\n            - decrease position value (call _unstake function)\n            - decrease debt ratio\n        case 5. repayDebt > 0 (repay debt with user's own token) \n                or msg.value > 0 (repay debt with user's own EVMOS)\n                @dev (msg.value - changeEquityInBase) equals to repayDebtInBase\n            - position value not changes (not call _stake/_unstake function)\n            - decrease debt ratio\n        @dev User should approve this first\n        @dev if msg.value > 0, changeEquityInBase >= 0\n             since msg.value = changeEquityInBase + repayDebtInBase\n     */\n\n     \n    function changePosition(\n        address debtToken,\n        int256  equityInBaseChanged,\n        int256  debtInBaseChanged,\n        uint256 repaidDebt\n    ) public payable {\n        address vault = tokenToVault[debtToken];\n        uint256 positionId = positionIdOf[msg.sender][vault];\n        require(positionId > 0, \"changePosition: no position\");\n\n        uint256 repaidDebtInBase;\n        uint256 stakedAmount; // can added if equityInBaseChanged > 0 or  debtInBaseChanged > 0 (add equity or borrow more debt)\n        uint256 unstakedAmount;\n        if(equityInBaseChanged > 0){    // stake more with own equity\n            require(\n                msg.value >= uint256(equityInBaseChanged), \n                \"changePosition: Not enough msg.value\"\n            );\n            unchecked {\n                repaidDebtInBase = msg.value - uint256(equityInBaseChanged);\n                stakedAmount = uint256(equityInBaseChanged);\n            }\n        } \n        else if(equityInBaseChanged < 0) { // partial close position made up of equity\n            unstakedAmount = uint256(-equityInBaseChanged);\n            // repaidDebtInBase = 0\n        }\n\n        if(debtInBaseChanged > 0){ // borrow more debt (stake more)\n            IVault(vault).loan(msg.sender, uint256(debtInBaseChanged));\n            stakedAmount += uint256(debtInBaseChanged);\n        }\n        else if(debtInBaseChanged < 0){ // partial close position made up of debt\n            unstakedAmount += uint256(-debtInBaseChanged);\n        }\n\n        /******************************************\n           Repay Debt (position value not change)\n         ******************************************/\n        if(repaidDebt > 0){ // repay debt for token, approve should be proceed\n            SafeToken.safeTransferFrom(debtToken, msg.sender, address(this), repaidDebt);\n            IVault(vault).repayInToken(msg.sender, repaidDebt);\n        }\n        if(repaidDebtInBase > 0){ // repay debt for EVMOS\n            repaidDebt += IVault(vault).repayInBase{value: repaidDebtInBase}(msg.sender, 1);\n        }\n\n        Position storage p = positions[vault][positionId];\n        if(stakedAmount >= unstakedAmount){\n            _stake(p, stakedAmount - unstakedAmount);\n        } else {\n            _unstake(\n                p,\n                vault,\n                unstakedAmount - stakedAmount,\n                debtInBaseChanged < 0 ? uint256(-debtInBaseChanged) : 0\n            );\n        }\n\n        emit PositionChanged(\n            msg.sender,\n            vault,\n            shareToAmount(p.share),\n            p.share,\n            debtAmountOf(msg.sender, vault)\n        );\n    }\n\n    /**\n        @dev returns position's value & debt value\n        position value: positionValueInBase\n        equity value: positionValueInBase - debtInBase\n        debt value: debtInBase\n        debt ratio: debtInBase / positionValueInBase * 100(%)\n        kill factor: killFactorBps / 100\n        safety buffer: (kill factor) - (debt ratio)\n     */\n    function positionInfo(\n        address user,\n        address debtToken\n    ) public override view returns (uint256 positionValueInBase, uint256 debtInBase, uint256 debt) {\n        address vault = tokenToVault[debtToken];\n        uint256 positionId = positionIdOf[user][vault];\n        Position memory p = positions[vault][positionId];\n\n        positionValueInBase = shareToAmount(p.share);\n\n        debt = IVault(vault).debtAmountOf(user);\n        debtInBase = IVault(vault).getBaseIn(debt);\n    }\n\n    function isKillable(\n        address debtToken,\n        uint256 positionId\n    ) public override view returns(bool healthy) {\n        address vault = tokenToVault[debtToken];\n        Position memory p = positions[vault][positionId];\n\n        if(p.share == 0)    /// @dev removed position\n            return false;\n        (healthy, ) = _isHealthy(vault, p.share, debtAmountOf(p.user, vault));\n    }\n\n    function kill(\n        address debtToken,\n        uint256 positionId\n    ) public override onlyKiller {\n        address vault = tokenToVault[debtToken];\n        Position storage p = positions[vault][positionId];\n        require(p.share > 0, \"kill: removed position\");\n\n        uint256 debt = debtAmountOf(p.user, vault);\n        (bool healthy, uint256 debtInBase) = _isHealthy(vault, p.share, debt);\n        require(healthy, \"kill: still safe position.\");\n\n        uint256 unstakedAmount = _unstakeAll(p, vault);\n\n        emit Kill(\n            msg.sender,\n            p.user,\n            vault,\n            unstakedAmount - debtInBase,\n            debtInBase,\n            debt,\n            p.share\n        );\n\n    }\n\n    /***********************\n     * Only for Delegator *\n     ***********************/\n    function accrue(\n        uint256 currentTotalStaked\n    ) payable public onlyDelegator override {\n        //// WARN!!\n        //// kor) delegator가 잘못 param을 넘겨주면 전체 유저의 수익이 좌지우지될 수 있음..!!\n        require(currentTotalStaked >= totalAmount, \"accrue: currentTotalStaked < totalAmount\");\n        uint256 compounded = currentTotalStaked - totalAmount;\n        totalAmount = currentTotalStaked;\n        emit Accrue(msg.sender, compounded);\n    }\n\n    /// @dev Fallback function to accept EVMOS.\n    receive() external payable {}\n\n    fallback() external payable {}\n}\n"
    },
    "contracts/interface/IStayking.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n\n/************************************************************\n * @dev\n * Glossary\n * debt : debtAmount in borrowing token (e.g. OSMO, ATOM)\n * debtInBase: debtAmount in EVMOS(Base Token)\n *************************************************************/\ninterface IStayking { \n\n    function updateVault(address token, address vault) external;\n    \n    function tokenToVault(address token) external view returns(address vault);\n\n    function changeDelegator(address delegator) external;\n    // function setWhitelistDelegatorStatus(address delegator, bool status) external;\n\n    /// @dev min debtAmount in EVMOS (base token)\n    function minDebtInBase() external view returns (uint256);\n\n    function killFactorBps() external view returns(uint256);\n\n    function debtAmountOf (\n        address user,\n        address vault\n    ) external view returns(uint256 debt);\n\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param equity       equityAmount in EVMOS\n    /// @param debtInBase   debtAmount in EVMOS\n    function addPosition(\n        address debtToken,\n        uint256 equity,\n        uint256 debtInBase\n    ) payable external;\n\n    /// @param debtToken    debtToken Address (not vault address)\n    function removePosition(address debtToken) external;\n\n    /// @dev Borrow more debt (increase debt ratio)\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param extraDebtInBase  amount of additional debt in EVMOS\n    function addDebt(\n        address debtToken,\n        uint256 extraDebtInBase\n    ) external;\n\n    /// @dev Repay debt (decrease debt ratio)\n    /// @notice user should repay debt using debtToken\n    /// @notice user approve should be preceded\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param repaidDebt  amount of repaid debt in debtToken\n    function repayDebt(\n        address debtToken,\n        uint256 repaidDebt\n    ) external;\n\n    function repayDebtInBase(\n        address debtToken,\n        uint256 minRepaid\n    ) payable external;\n\n    /// @dev add additional equity (decrease debt ratio)\n    /// @param debtToken    debtToken Address (not vault address)\n    /// @param extraEquity  amount of additional equity\n    function addEquity(\n        address debtToken,\n        uint256 extraEquity\n    ) payable external;\n\n    function positionInfo(\n        address user,\n        address vault\n    ) external view returns (uint256 equityInBase, uint256 debtInBase, uint256 debt);\n\n    function isKillable(address debtToken, uint256 positionId) external view returns(bool);\n    \n    function kill(address debtToken, uint256 positionId) external;\n\n    /***********************\n     * Only for Delegator *\n     ***********************/\n    function accrue(uint256 currentTotalStaked) payable external;\n\n}"
    },
    "contracts/interface/IVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\nimport \"./ISwapHelper.sol\";\n\n\ninterface IVault { \n\n    function token() external returns(address);\n    \n    function stayking() external returns(address);\n\n    function interestModel() external returns(address);\n\n    function totalAmount() external view returns(uint256);\n\n    function debtAmountOf(address user) external view returns(uint256);\n\n    function debtAmountInBase(address user) external view returns(uint256);\n\n    function totalDebtAmount() external view returns(uint256);\n\n    function utilizationRateBps() external view returns(uint256);\n\n    /// @dev denominator = 1E18 \n    function getInterestRate() external view returns(uint256);\n\n    function saveUtilizationRateBps() external;\n\n    function deposit(uint256 amount) external returns(uint256 share);\n\n    function withdraw(uint256 share) external returns(uint256 amount);\n\n    function getPendingDebt(address user) external view returns(uint256 debt);\n    \n    function getPendingDebtInBase(address user) external view returns(uint256 debtInBase);\n\n    function getBaseIn(uint256 tokenOut) external view returns(uint256 baseIn);\n\n    function getBaseOut(uint256 tokenIn) external view returns(uint256 baseOut);\n\n    function getTokenIn(uint256 baseOut) external view returns(uint256 tokenIn);\n\n    function getTokenOut(uint256 baseIn) external view returns(uint256 tokenOut);\n\n    function pendingDebtAmountToShare(uint256 amount) external view returns(uint256);\n\n    function pendingDebtShareToAmount(uint256 share) external view returns(uint256);\n\n\n    /******************************\n     * Only for Stayking Contract *\n     ******************************/\n    function loan(address user, uint256 debtInBase) external returns(uint256 debt);\n\n    function repayInToken(address user, uint256 debt) external;\n\n    function repayInBase(\n        address user, \n        uint256 minRepaid\n    ) payable external returns(uint256 repaid);\n\n    function takeDebtOwnership(\n        address from,\n        uint256 amount\n    ) external;\n\n    function payInterest(uint256 minPaidInterest) external payable;\n\n    function pendRepay(\n        address user,\n        uint256 amount\n    ) external returns(uint256 pendingDebtShare);\n\n    function repayPendingDebt(address user, uint256 minRepaidDebt) payable external returns(uint256);\n\n    function updateInterestModel(address newInterestModel) external;\n    \n    function updateSwapHelper(address newSwapHelper) external;\n\n    function updateMinReservedBps(uint256 newMinReservedBps) external;\n}"
    },
    "contracts/interface/ISwapHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/************************************************************\n * @dev\n * Glossary\n * X : Input Token\n * Y : Output Token\n * Dx : Amount of Input Token\n * Dy : Amount of Output Token\n *************************************************************/\ninterface ISwapHelper {\n\n    function getDy(\n        address tokenX,\n        address tokenY,\n        uint256 dx\n    ) external view returns (uint256 dy);\n\n    function getDx(\n        address tokenX,\n        address tokenY,\n        uint256 dy\n    ) external view returns (uint256 dx);\n\n    function exchange(\n        address tokenX,\n        address tokenY,\n        uint256 dx,\n        uint256 minDy\n    ) payable external returns (uint256 dy);\n}"
    },
    "contracts/interface/IUnbondedEvmos.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\ninterface IUnbondedEvmos { \n\n    function balanceOf(address account) external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function totalAmount() external view returns (uint256);\n\n    function lastUnbondedAt() external view returns (uint256);\n\n    function unbondingInterval() external view returns (uint256);\n\n    function mintLockedToken(\n        address to,\n        address vault,\n        uint256 amount,\n        uint256 debtShare\n    ) external;\n\n    function unlock(uint256 minRepaid) external;\n\n    function supplyUnbondedToken() payable external;\n\n    function isMinter(address account) external view returns(bool);\n    \n    function updateMinterStatus(address account, bool status) external;\n\n    function getUnlockable(address account) external view returns(uint256 unlockable, uint256 debt);\n\n    function isKillable(uint256 lockedId) external returns (bool);\n\n    function kill(uint256 lockedId) external;\n}   "
    },
    "contracts/lib/utils/SafeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nlibrary SafeToken {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeApprove\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeTransfer\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeTransferFrom\"\n        );\n    }\n\n    function safeTransferEVMOS(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"!safeTransferEVMOS\");\n    }\n}\n"
    },
    "contracts/lib/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ContextUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/lib/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"./Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/lib/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.2;\nimport \"./Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/lib/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"./AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "contracts/lib/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/token/UnbondedEvmos.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\nimport \"../interface/IUnbondedEvmos.sol\";\nimport \"../interface/IVault.sol\";\nimport \"../lib/OwnableUpgradeable.sol\";\nimport \"../lib/utils/SafeToken.sol\";\n\ncontract UnbondedEvmos is IUnbondedEvmos, OwnableUpgradeable { \n\n    event Lock(address account, address vault, uint256 lockedIndex);\n    event Unlock(address account, uint256 amount, uint256 returned);\n    event Supply(uint256 amount);\n    event Withdraw(address account, uint256 amount);\n    event UpdateMinterStatus(address account, bool status);\n    event UpdateConfigs(uint256 unbondingInterval);\n\n    mapping(address => bool) public override isMinter;\n\n    string public constant name = \"Unstaked EVMOS\";\n    string public constant symbol = \"uEVMOS\";\n    uint8 public constant decimals = 18;\n\n    uint256 public override lastUnbondedAt;\n    uint256 public override unbondingInterval;   // maybe 14 + 2 days\n\n    /// @notice kor) 논의 필요\n    // uint256 public unbondLimit = 7;\n\n    struct Locked {\n        bool received;\n        address account;\n        address vault;\n        uint256 share;\n        // kor. token 단위? evmos 단위?\n        uint256 debtShare;\n        uint256 unlockedAt;\n    }\n\n    Locked[] public locks;\n    uint256 public locksLength;\n\n    /** @dev\n     * kor) [논의 필요] Locked[]를 길이가 7인 큐로 지정.\n     lockedIds: locks 배열에 들어있는 Lock 객체의 array index\n     accounts can request up to 7 unbonds for 14 days, \n     just like when delegate EVMOS to Validator. \n     */\n    struct LockedQueue {\n        uint128 front;\n        uint128 rear;\n        uint256[] lockedIds;\n    }\n    mapping(address => LockedQueue) public lockedOf;\n    mapping(address => uint256) _balances;\n\n    uint256 public override totalSupply;\n    uint256 public override totalAmount;\n\n    /// @notice should set minter (maybe Stayking) after deployed\n    function __UnbondedEvmos_init(\n        uint256 unbondingInterval_\n    ) external initializer {\n        __Ownable_init();\n        updateConfigs(unbondingInterval_);\n    }\n\n    /**************\n        Modifier\n     *************/\n    modifier onlyMinter(){\n        require(isMinter[msg.sender], \"uEVMOS: Not minter.\");\n        _;\n    }\n\n    /*******************\n      Private functions\n    ********************/\n\n    function updateMinterStatus(\n        address account,\n        bool status\n    ) public override onlyOwner {\n        isMinter[account] = status;\n        emit UpdateMinterStatus(account, status);\n    }\n\n    function updateConfigs(\n        uint256 _unbondingInterval\n    ) public onlyOwner {\n        unbondingInterval = _unbondingInterval;\n        emit UpdateConfigs(_unbondingInterval);\n    }\n\n    /*******************\n      Private functions\n    ********************/\n    function amountToShare(\n        uint256 amount\n    ) public view returns(uint256) {\n        return (totalAmount == 0) ? amount :\n            totalSupply * amount / totalAmount;\n    }\n\n    function shareToAmount(\n        uint256 share\n    ) public view returns(uint256) {\n        return (totalSupply == 0) ? share :\n            totalAmount * share / totalSupply;\n    }\n\n    /*******************\n      Private functions\n    ********************/\n    function _mint(\n        address account,\n        uint256 share\n    ) private{\n        require(account != address(0), \"uEVMOS: mint to the zero address\");\n        totalSupply += share;\n        _balances[account] += share;\n    }\n\n    function _burn(\n        address account,\n        uint256 amount\n    ) private {\n        require(account != address(0), \"uEVMOS: burn from the zero address\");\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"uEVMOS: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        totalSupply -= amount;\n    }\n\n    /// @return unlocked     total unlocked EVMOS\n    /// @return restUnlocked EVMOS amount that user can receive\n    function _repayPendingDebt(\n        Locked storage lock,\n        uint256 minRepaid\n    ) private returns (uint256, uint256) {\n        IVault vault = IVault(lock.vault);\n        address account = lock.account;\n        uint256 amount = shareToAmount(lock.share);\n\n        uint256 pendingDebtInBase = vault.pendingDebtShareToAmount(lock.debtShare);\n        lock.received = true;\n        if(amount >= pendingDebtInBase){\n            IVault(vault).repayInBase{value: pendingDebtInBase}(account, minRepaid);\n            return (amount, amount - pendingDebtInBase);\n        }\n        else {\n            vault.repayInBase{value: amount}(account, minRepaid);\n            return (amount, 0);\n        }\n    }\n\n    /// @dev unlock all of unlockable uEVMOS\n    function _unlock(\n        address account,\n        LockedQueue storage lockedQueue,\n        uint256 minRepaid\n    ) private {\n        lockedQueue = lockedOf[account];\n        uint128 front = lockedQueue.front; \n        uint128 rear = lockedQueue.rear; \n\n        if(front == rear)   // no unlockable amounts\n            return;\n\n        uint256 unlockable;\n        uint256 returnable;\n        uint128 i = front;\n        \n        // assert under 7 loop.\n        for (i; i < rear; i++) {\n            uint256 lockedId = lockedQueue.lockedIds[i];\n            Locked storage lock = locks[lockedId];\n            \n            if(lock.unlockedAt <= block.timestamp){  /// @dev unlockable\n                /// @dev kor) (개선 필요) aggregate하여 repay 횟수 줄이기\n                (uint256 unlocked, uint256 returned) = _repayPendingDebt(\n                    lock,\n                    minRepaid\n                );\n                unlockable += unlocked;\n                returnable += returned;\n            }\n            else \n                break;\n        }\n\n        // if unlockable > 0, front < i < rear\n        if(unlockable > 0){\n            lockedQueue.front = i + 1;           // 1. reset queue front\n            _burn(account, amountToShare(unlockable));\n\n            // 3. return EVMOS is returnable exists\n            if(returnable > 0){\n                SafeToken.safeTransferEVMOS(account, returnable);\n            }\n            emit Unlock(account, unlockable, returnable);\n        }\n    }\n\n\n    /****************** \n       Core Functions\n    *******************/\n    function balanceOf(\n        address account\n    ) public view override returns(uint256) {\n        return _balances[account];\n    }\n\n\n    /// @dev mint & lock uEVMOS\n    ///\n    function mintLockedToken(\n        address to,\n        address vault,\n        uint256 amount,\n        uint256 debtShare\n    ) public override onlyMinter {\n        require(amount > 0, \"mintLockedToken: amount <= 0\");\n\n        LockedQueue storage lockedQueue = lockedOf[to];\n\n        /// @dev consume all of unlock queue\n        _unlock(to, lockedQueue, 1);\n\n        /// @dev limit queue size?\n        // require(lockedQueue.rear - lockedQueue.front < unbondLimit, \"mintLockedToken: unbond limit exceeded.\" );\n        uint256 share = amountToShare(amount);\n        locks.push(\n            Locked({\n                account: msg.sender,\n                vault: vault,\n                share: share,\n                debtShare: debtShare,\n                // TODO 개선 필요\n                unlockedAt: (\n                    lastUnbondedAt > block.timestamp ? lastUnbondedAt : block.timestamp\n                ) + unbondingInterval,\n                received: false\n            })\n        );\n\n        locksLength = locks.length - 1;\n        uint128 newlockedIndex = lockedQueue.rear;\n        lockedQueue.lockedIds[newlockedIndex] = locksLength;\n\n        lockedQueue.rear = newlockedIndex + 1;\n\n        totalAmount += amount;\n        _mint(to, share);\n        emit Lock(to, vault, locksLength);\n    }\n\n    // unlock all because of debt.\n    function unlock(uint256 minRepaid) public override {\n        LockedQueue storage lockedQueue = lockedOf[msg.sender];\n        _unlock(msg.sender, lockedQueue, minRepaid);\n    }\n\n    function supplyUnbondedToken() payable public override {\n        /**\n            @TODO\n            maybe use delegate/undelegate tx ORACLE?\n         */\n        lastUnbondedAt = block.timestamp;\n    }\n\n    /// @dev calc user's unlockable uEVMOS(includes debt) & debt\n    function getUnlockable(\n        address account\n    ) public override view returns(uint256 unlockable, uint256 debt) {\n        uint128 front = lockedOf[account].front; \n        uint128 rear = lockedOf[account].rear; \n        uint256[] memory lockedIds = lockedOf[account].lockedIds;\n\n        if(front == rear)   // no unlockable amounts\n            return (0, 0);\n        \n        // TODO assert under 7 loop?\n        // kor) 가스비 너무 많이 들게 되면 트랜잭션 실패할듯..\n        for (uint128 i = front; i < rear; i++) {\n            Locked memory lock = locks[lockedIds[i]];\n            if(lock.unlockedAt <= block.timestamp){\n                unlockable += shareToAmount(lock.share);\n\n                /// @dev kor) (개선 필요) aggregate하여 repay 횟수 줄이기\n                debt += IVault(lock.vault).getPendingDebtInBase(account);\n            }\n            else \n                break;\n        }\n    }\n\n    /// @notice TODO\n    /// kor) 유저가 일부만 unstake 요청하는 경우, 빚을 다 못 갚는 경우가 당연히 발생한다.\n    /// 일단 부채비율이 100% 넘기는 경우 우리가 unlock 시키는 것만 구현.\n    function isKillable(uint256 lockedId) public override view returns(bool) {\n        Locked memory lock = locks[lockedId];\n        if(lock.unlockedAt > block.timestamp)\n            return false;\n        uint256 debt = IVault(lock.vault).getPendingDebtInBase(lock.account);\n        return debt >= shareToAmount(lock.share);\n    }\n\n    function kill(uint256 lockedId) public override {\n        Locked storage lock = locks[lockedId];\n        require(lock.unlockedAt <= block.timestamp, \"uEVMOS Kill: Cannot Unlock.\");\n        uint256 debt = IVault(lock.vault).getPendingDebtInBase(lock.account);\n        uint256 lockedAmount = shareToAmount(lock.share);\n        // liquidate threshold: 100%\n        require(debt >= lockedAmount, \"uEVMOS Kill: Still safe.\");\n        \n        IVault(lock.vault).repayInBase{value: lockedAmount}(lock.account, 1);\n        lock.received = true;\n        /// @dev event Kill?\n    }\n\n\n    receive() external payable {}\n\n    fallback() external payable {}\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}