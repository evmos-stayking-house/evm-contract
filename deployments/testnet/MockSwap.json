{
  "address": "0x08Be1FDf4A512fc6caA7aE1Be029b922d05EA5B3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "EVMOSpriceBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRatio",
          "type": "uint256"
        }
      ],
      "name": "changeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "name": "getDx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "getDy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x060d8ed5a81da1f4a6ab76484b40833cbc6c9db3625138ad2fd8c2025d74742f",
  "receipt": {
    "to": null,
    "from": "0x4888e2649F32B9946c382f0D68f8De586fc8A256",
    "contractAddress": "0x08Be1FDf4A512fc6caA7aE1Be029b922d05EA5B3",
    "transactionIndex": 0,
    "gasUsed": "665786",
    "logsBloom": "0x
    "blockHash": "0x905534021e835ee7d285fde633331ae448d021d9903e4135cf2ff0862eb17171",
    "transactionHash": "0x060d8ed5a81da1f4a6ab76484b40833cbc6c9db3625138ad2fd8c2025d74742f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5912217,
        "transactionHash": "0x060d8ed5a81da1f4a6ab76484b40833cbc6c9db3625138ad2fd8c2025d74742f",
        "address": "0x08Be1FDf4A512fc6caA7aE1Be029b922d05EA5B3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004888e2649f32b9946c382f0d68f8de586fc8a256"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x905534021e835ee7d285fde633331ae448d021d9903e4135cf2ff0862eb17171"
      }
    ],
    "blockNumber": 5912217,
    "cumulativeGasUsed": "665786",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0000000000000000000000000000000000000000",
      "0x9218b75D53612212137890354B1a16163Abb9DE3"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "9917b00fd9f4299e276b4c4ce0240f75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"EVMOSpriceBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"changeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"name\":\"getDx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"getDy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"isSupported\":{\"details\":\"\\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub294 \\ub85c\\uceec \\ub178\\ub4dc \\ubc30\\ud3ec\\uc6a9 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c, EvmoSwapRouter\\uacfc \\uc720\\uc0ac\\ud55c \\uc5ed\\ud560\\uc744 \\ud558\\ub294 DEX\\ub77c\\uace0 \\uc0dd\\uac01\\ud558\\uba74 \\ub429\\ub2c8\\ub2e4. native token(EVMOS)\\uacfc \\ub098\\uba38\\uc9c0 \\ubaa8\\ub4e0 \\ud1a0\\ud070\\uc758 \\uad50\\ud658\\ube44\\ub294 \\uc784\\uc758\\ub85c 1: 2\\ub77c\\uace0 \\ub193\\uc558\\uc2b5\\ub2c8\\ub2e4. (EVMOS\\uc758 \\uac00\\uce58 = \\ub2e4\\ub978 \\ud1a0\\ud070\\uc758 \\uac00\\uce58 * 2) TODO \\ubc30\\ud3ec \\ud6c4 \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c \\uc720\\ub3d9\\uc131 \\ucd94\\uac00\\ud574 \\uc8fc\\uc5b4\\uc57c \\ud568. ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/MockSwap.sol\":\"MockSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x8c163fb0fb6e09d4ece34ede2d749086faeaa8438c07cf5529e5fbca680043e2\",\"license\":\"MIT\"},\"contracts/lib/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9e8a7188d698eea914eb3d07817fc539bdc152bee0b66567b6e911fd3293ce8d\",\"license\":\"MIT\"},\"contracts/lib/utils/SafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary SafeToken {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeApprove\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransfer\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransferFrom\\\"\\n        );\\n    }\\n\\n    function safeTransferEVMOS(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"!safeTransferEVMOS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3673f957556a65d32c0b4fca4aafcb2decf960c9a064b5008c1a43acd5f11ca5\",\"license\":\"MIT\"},\"contracts/mock/MockSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"../lib/interface/IERC20.sol\\\";\\nimport \\\"../lib/utils/SafeToken.sol\\\";\\nimport \\\"../lib/Ownable.sol\\\";\\n\\n\\ncontract MockSwap is Ownable {\\n    \\n    /**\\n        @dev \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub294 \\ub85c\\uceec \\ub178\\ub4dc \\ubc30\\ud3ec\\uc6a9 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c,\\n        EvmoSwapRouter\\uacfc \\uc720\\uc0ac\\ud55c \\uc5ed\\ud560\\uc744 \\ud558\\ub294 DEX\\ub77c\\uace0 \\uc0dd\\uac01\\ud558\\uba74 \\ub429\\ub2c8\\ub2e4.\\n\\n        native token(EVMOS)\\uacfc \\ub098\\uba38\\uc9c0 \\ubaa8\\ub4e0 \\ud1a0\\ud070\\uc758 \\uad50\\ud658\\ube44\\ub294 \\uc784\\uc758\\ub85c 1: 2\\ub77c\\uace0 \\ub193\\uc558\\uc2b5\\ub2c8\\ub2e4.\\n        (EVMOS\\uc758 \\uac00\\uce58 = \\ub2e4\\ub978 \\ud1a0\\ud070\\uc758 \\uac00\\uce58 * 2)\\n\\n        TODO \\ubc30\\ud3ec \\ud6c4 \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c \\uc720\\ub3d9\\uc131 \\ucd94\\uac00\\ud574 \\uc8fc\\uc5b4\\uc57c \\ud568.\\n        ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);\\n     */\\n\\n    mapping(address => bool) public isSupported;\\n    uint256 public EVMOSpriceBps;\\n\\n    constructor (\\n        address[] memory tokens\\n    ){\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            isSupported[tokens[i]] = true;\\n        }\\n\\n        EVMOSpriceBps = 20000;\\n    }\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) public view returns (uint256) {\\n        if(tokenX == address(0))\\n            return dy * 1E4 / EVMOSpriceBps;\\n        else if(tokenY == address(0))\\n            return dy * EVMOSpriceBps / 1E4;\\n        else\\n            return dy;\\n    }\\n\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) public view returns (uint256) {\\n        if(tokenX == address(0))\\n            return dx * EVMOSpriceBps / 1E4;\\n        else if(tokenY == address(0))\\n            return dx * 1E4 / EVMOSpriceBps;\\n        else\\n            return dx;\\n    }\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 /* minDy */\\n    ) public payable returns(uint256 dy) {\\n        if(tokenX == address(0)){\\n            require(msg.value == dx, \\\"MockSwap: msg.value != dx\\\");\\n        } else {\\n            SafeToken.safeTransferFrom(tokenX, msg.sender, address(this), dx);\\n        }\\n\\n        dy = getDy(tokenX, tokenY, dx);\\n        if(tokenY == address(0)){\\n            SafeToken.safeTransferEVMOS(msg.sender, dy);\\n        } else {\\n            SafeToken.safeTransfer(tokenY, msg.sender, dy);\\n        }\\n    }\\n\\n    // sweep in-contract EVMOS\\n    function sweep() public onlyOwner {\\n        SafeToken.safeTransferEVMOS(msg.sender, address(this).balance);\\n    }\\n\\n    function changeRatio(\\n        uint256 newRatio\\n    ) public onlyOwner {\\n        require(newRatio > 0, \\\"newRatio <= 0\\\");\\n        EVMOSpriceBps = newRatio;\\n    }\\n\\n    fallback() external payable {}\\n\\n    /// @dev Fallback function to accept EVMOS.\\n    receive() external payable {}\\n}\",\"keccak256\":\"0xd6c2353f373a465c384b84ebfc7efd077a1b88bc0a3760fcdb06379852bed432\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162000b7e38038062000b7e83398101604081905261003191610128565b61003a336100bc565b60005b81518110156100af57600180600084848151811061006b57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806100a7816101ee565b91505061003d565b5050614e2060025561022b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461012357600080fd5b919050565b6000602080838503121561013a578182fd5b82516001600160401b0380821115610150578384fd5b818501915085601f830112610163578384fd5b81518181111561017557610175610215565b8060051b604051601f19603f8301168101818110858211171561019a5761019a610215565b604052828152858101935084860182860187018a10156101b8578788fd5b8795505b838610156101e1576101cd8161010c565b8552600195909501949386019386016101bc565b5098975050505050505050565b600060001982141561020e57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b610943806200023b6000396000f3fe60806040526004361061008f5760003560e01c8063715018a611610056578063715018a6146101495780637dceefee1461015e5780638da5cb5b1461017e578063f2fde38b146101a6578063f6a33253146101c657005b80630ed2fc951461009857806335faa416146100be5780634f119bbd146100d35780634f129c53146100f3578063684cf3961461013357005b3661009657005b005b6100ab6100a6366004610810565b6101e6565b6040519081526020015b60405180910390f35b3480156100ca57600080fd5b50610096610298565b3480156100df57600080fd5b506100ab6100ee3660046107d5565b6102ac565b3480156100ff57600080fd5b5061012361010e3660046107bb565b60016020526000908152604090205460ff1681565b60405190151581526020016100b5565b34801561013f57600080fd5b506100ab60025481565b34801561015557600080fd5b50610096610305565b34801561016a57600080fd5b506100ab6101793660046107d5565b610317565b34801561018a57600080fd5b506000546040516001600160a01b0390911681526020016100b5565b3480156101b257600080fd5b506100966101c13660046107bb565b610355565b3480156101d257600080fd5b506100966101e1366004610871565b6103ce565b60006001600160a01b03851661024f5782341461024a5760405162461bcd60e51b815260206004820152601960248201527f4d6f636b537761703a206d73672e76616c756520213d2064780000000000000060448201526064015b60405180910390fd5b61025b565b61025b8533308661041b565b6102668585856102ac565b90506001600160a01b038416610285576102803382610533565b610290565b6102908433836105ea565b949350505050565b6102a06106f5565b6102aa3347610533565b565b60006001600160a01b0384166102de57612710600254836102cd91906108e2565b6102d791906108c2565b90506102fe565b6001600160a01b0383166102fb576002546102cd836127106108e2565b50805b9392505050565b61030d6106f5565b6102aa600061074f565b60006001600160a01b038416610336576002546102cd836127106108e2565b6001600160a01b0383166102fb57612710600254836102cd91906108e2565b61035d6106f5565b6001600160a01b0381166103c25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610241565b6103cb8161074f565b50565b6103d66106f5565b600081116104165760405162461bcd60e51b815260206004820152600d60248201526c06e6577526174696f203c3d203609c1b6044820152606401610241565b600255565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161047f9190610889565b6000604051808303816000865af19150503d80600081146104bc576040519150601f19603f3d011682016040523d82523d6000602084013e6104c1565b606091505b50915091508180156104eb5750805115806104eb5750808060200190518101906104eb9190610851565b61052b5760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b6044820152606401610241565b505050505050565b604080516000808252602082019092526001600160a01b03841690839060405161055d9190610889565b60006040518083038185875af1925050503d806000811461059a576040519150601f19603f3d011682016040523d82523d6000602084013e61059f565b606091505b50509050806105e55760405162461bcd60e51b815260206004820152601260248201527121736166655472616e7366657245564d4f5360701b6044820152606401610241565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916106469190610889565b6000604051808303816000865af19150503d8060008114610683576040519150601f19603f3d011682016040523d82523d6000602084013e610688565b606091505b50915091508180156106b25750805115806106b25750808060200190518101906106b29190610851565b6106ee5760405162461bcd60e51b815260206004820152600d60248201526c10b9b0b332aa3930b739b332b960991b6044820152606401610241565b5050505050565b6000546001600160a01b031633146102aa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610241565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146107b657600080fd5b919050565b6000602082840312156107cc578081fd5b6102fe8261079f565b6000806000606084860312156107e9578182fd5b6107f28461079f565b92506108006020850161079f565b9150604084013590509250925092565b60008060008060808587031215610825578081fd5b61082e8561079f565b935061083c6020860161079f565b93969395505050506040820135916060013590565b600060208284031215610862578081fd5b815180151581146102fe578182fd5b600060208284031215610882578081fd5b5035919050565b60008251815b818110156108a9576020818601810151858301520161088f565b818111156108b75782828501525b509190910192915050565b6000826108dd57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561090857634e487b7160e01b81526011600452602481fd5b50029056fea26469706673582212206ff2aa05cb16b2b9d0f956250b41d4f5f59df09e6e80c548356f86831bbf021a64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061008f5760003560e01c8063715018a611610056578063715018a6146101495780637dceefee1461015e5780638da5cb5b1461017e578063f2fde38b146101a6578063f6a33253146101c657005b80630ed2fc951461009857806335faa416146100be5780634f119bbd146100d35780634f129c53146100f3578063684cf3961461013357005b3661009657005b005b6100ab6100a6366004610810565b6101e6565b6040519081526020015b60405180910390f35b3480156100ca57600080fd5b50610096610298565b3480156100df57600080fd5b506100ab6100ee3660046107d5565b6102ac565b3480156100ff57600080fd5b5061012361010e3660046107bb565b60016020526000908152604090205460ff1681565b60405190151581526020016100b5565b34801561013f57600080fd5b506100ab60025481565b34801561015557600080fd5b50610096610305565b34801561016a57600080fd5b506100ab6101793660046107d5565b610317565b34801561018a57600080fd5b506000546040516001600160a01b0390911681526020016100b5565b3480156101b257600080fd5b506100966101c13660046107bb565b610355565b3480156101d257600080fd5b506100966101e1366004610871565b6103ce565b60006001600160a01b03851661024f5782341461024a5760405162461bcd60e51b815260206004820152601960248201527f4d6f636b537761703a206d73672e76616c756520213d2064780000000000000060448201526064015b60405180910390fd5b61025b565b61025b8533308661041b565b6102668585856102ac565b90506001600160a01b038416610285576102803382610533565b610290565b6102908433836105ea565b949350505050565b6102a06106f5565b6102aa3347610533565b565b60006001600160a01b0384166102de57612710600254836102cd91906108e2565b6102d791906108c2565b90506102fe565b6001600160a01b0383166102fb576002546102cd836127106108e2565b50805b9392505050565b61030d6106f5565b6102aa600061074f565b60006001600160a01b038416610336576002546102cd836127106108e2565b6001600160a01b0383166102fb57612710600254836102cd91906108e2565b61035d6106f5565b6001600160a01b0381166103c25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610241565b6103cb8161074f565b50565b6103d66106f5565b600081116104165760405162461bcd60e51b815260206004820152600d60248201526c06e6577526174696f203c3d203609c1b6044820152606401610241565b600255565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161047f9190610889565b6000604051808303816000865af19150503d80600081146104bc576040519150601f19603f3d011682016040523d82523d6000602084013e6104c1565b606091505b50915091508180156104eb5750805115806104eb5750808060200190518101906104eb9190610851565b61052b5760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b6044820152606401610241565b505050505050565b604080516000808252602082019092526001600160a01b03841690839060405161055d9190610889565b60006040518083038185875af1925050503d806000811461059a576040519150601f19603f3d011682016040523d82523d6000602084013e61059f565b606091505b50509050806105e55760405162461bcd60e51b815260206004820152601260248201527121736166655472616e7366657245564d4f5360701b6044820152606401610241565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916106469190610889565b6000604051808303816000865af19150503d8060008114610683576040519150601f19603f3d011682016040523d82523d6000602084013e610688565b606091505b50915091508180156106b25750805115806106b25750808060200190518101906106b29190610851565b6106ee5760405162461bcd60e51b815260206004820152600d60248201526c10b9b0b332aa3930b739b332b960991b6044820152606401610241565b5050505050565b6000546001600160a01b031633146102aa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610241565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146107b657600080fd5b919050565b6000602082840312156107cc578081fd5b6102fe8261079f565b6000806000606084860312156107e9578182fd5b6107f28461079f565b92506108006020850161079f565b9150604084013590509250925092565b60008060008060808587031215610825578081fd5b61082e8561079f565b935061083c6020860161079f565b93969395505050506040820135916060013590565b600060208284031215610862578081fd5b815180151581146102fe578182fd5b600060208284031215610882578081fd5b5035919050565b60008251815b818110156108a9576020818601810151858301520161088f565b818111156108b75782828501525b509190910192915050565b6000826108dd57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561090857634e487b7160e01b81526011600452602481fd5b50029056fea26469706673582212206ff2aa05cb16b2b9d0f956250b41d4f5f59df09e6e80c548356f86831bbf021a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "isSupported": {
        "details": "본 컨트랙트는 로컬 노드 배포용 컨트랙트로, EvmoSwapRouter과 유사한 역할을 하는 DEX라고 생각하면 됩니다. native token(EVMOS)과 나머지 모든 토큰의 교환비는 임의로 1: 2라고 놓았습니다. (EVMOS의 가치 = 다른 토큰의 가치 * 2) TODO 배포 후 본 컨트랙트로 유동성 추가해 주어야 함. ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2552,
        "contract": "contracts/mock/MockSwap.sol:MockSwap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3116,
        "contract": "contracts/mock/MockSwap.sol:MockSwap",
        "label": "isSupported",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3118,
        "contract": "contracts/mock/MockSwap.sol:MockSwap",
        "label": "EVMOSpriceBps",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}