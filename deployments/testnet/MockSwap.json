{
  "address": "0x8d375dE3D5DDde8d8caAaD6a4c31bD291756180b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "name": "getDx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "getDy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x64342e72767c0f959124a034cf842e906489d8fcac4333d30057153555c26da7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8d375dE3D5DDde8d8caAaD6a4c31bD291756180b",
    "transactionIndex": 0,
    "gasUsed": "1080228",
    "logsBloom": "0x
    "blockHash": "0xed057438f7e99447d7ae57ec0e5e2b7c404fb897c5623c91441f3533ade9f7ab",
    "transactionHash": "0x64342e72767c0f959124a034cf842e906489d8fcac4333d30057153555c26da7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4966185,
        "transactionHash": "0x64342e72767c0f959124a034cf842e906489d8fcac4333d30057153555c26da7",
        "address": "0x8d375dE3D5DDde8d8caAaD6a4c31bD291756180b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xed057438f7e99447d7ae57ec0e5e2b7c404fb897c5623c91441f3533ade9f7ab"
      }
    ],
    "blockNumber": 4966185,
    "cumulativeGasUsed": "1080228",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0000000000000000000000000000000000000000",
      "0x575D3d18666B28680255a202fB5d482D1949bB32"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "e84571cd6b55be5cf6d2a0f823bae990",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"name\":\"getDx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"getDy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"isSupported\":{\"details\":\"\\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub294 \\ub85c\\uceec \\ub178\\ub4dc \\ubc30\\ud3ec\\uc6a9 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c, EvmoSwapRouter\\uacfc \\uc720\\uc0ac\\ud55c \\uc5ed\\ud560\\uc744 \\ud558\\ub294 DEX\\ub77c\\uace0 \\uc0dd\\uac01\\ud558\\uba74 \\ub429\\ub2c8\\ub2e4. native token(EVMOS)\\uacfc \\ub098\\uba38\\uc9c0 \\ubaa8\\ub4e0 \\ud1a0\\ud070\\uc758 \\uad50\\ud658\\ube44\\ub294 \\uc784\\uc758\\ub85c 1: 2\\ub77c\\uace0 \\ub193\\uc558\\uc2b5\\ub2c8\\ub2e4. (EVMOS\\uc758 \\uac00\\uce58 = \\ub2e4\\ub978 \\ud1a0\\ud070\\uc758 \\uac00\\uce58 * 2) TODO \\ubc30\\ud3ec \\ud6c4 \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c \\uc720\\ub3d9\\uc131 \\ucd94\\uac00\\ud574 \\uc8fc\\uc5b4\\uc57c \\ud568. ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/MockSwap.sol\":\"MockSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x8c163fb0fb6e09d4ece34ede2d749086faeaa8438c07cf5529e5fbca680043e2\",\"license\":\"MIT\"},\"contracts/lib/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9e8a7188d698eea914eb3d07817fc539bdc152bee0b66567b6e911fd3293ce8d\",\"license\":\"MIT\"},\"contracts/lib/utils/SafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary SafeToken {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeApprove\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransfer\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransferFrom\\\"\\n        );\\n    }\\n\\n    function safeTransferEVMOS(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"!safeTransferEVMOS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3673f957556a65d32c0b4fca4aafcb2decf960c9a064b5008c1a43acd5f11ca5\",\"license\":\"MIT\"},\"contracts/mock/MockSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"../lib/interface/IERC20.sol\\\";\\nimport \\\"../lib/utils/SafeToken.sol\\\";\\nimport \\\"../lib/Ownable.sol\\\";\\n\\n\\ncontract MockSwap is Ownable {\\n    \\n    /**\\n        @dev \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub294 \\ub85c\\uceec \\ub178\\ub4dc \\ubc30\\ud3ec\\uc6a9 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c,\\n        EvmoSwapRouter\\uacfc \\uc720\\uc0ac\\ud55c \\uc5ed\\ud560\\uc744 \\ud558\\ub294 DEX\\ub77c\\uace0 \\uc0dd\\uac01\\ud558\\uba74 \\ub429\\ub2c8\\ub2e4.\\n\\n        native token(EVMOS)\\uacfc \\ub098\\uba38\\uc9c0 \\ubaa8\\ub4e0 \\ud1a0\\ud070\\uc758 \\uad50\\ud658\\ube44\\ub294 \\uc784\\uc758\\ub85c 1: 2\\ub77c\\uace0 \\ub193\\uc558\\uc2b5\\ub2c8\\ub2e4.\\n        (EVMOS\\uc758 \\uac00\\uce58 = \\ub2e4\\ub978 \\ud1a0\\ud070\\uc758 \\uac00\\uce58 * 2)\\n\\n        TODO \\ubc30\\ud3ec \\ud6c4 \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c \\uc720\\ub3d9\\uc131 \\ucd94\\uac00\\ud574 \\uc8fc\\uc5b4\\uc57c \\ud568.\\n        ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);\\n     */\\n\\n    mapping(address => bool) public isSupported;\\n\\n    constructor (\\n        address[] memory tokens\\n    ){\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            isSupported[tokens[i]] = true;\\n        }\\n    }\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) public pure returns (uint256) {\\n        if(tokenX == address(0))\\n            return dy / 2;\\n        else if(tokenY == address(0))\\n            return dy * 2;\\n        else\\n            return dy;\\n    }\\n\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) public pure returns (uint256) {\\n        if(tokenX == address(0))\\n            return dx * 2;\\n        else if(tokenY == address(0))\\n            return dx / 2;\\n        else\\n            return dx;\\n    }\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 /* minDy */\\n    ) public payable returns(uint256 dy) {\\n        if(tokenX == address(0)){\\n            require(msg.value == dx, \\\"MockSwap: msg.value != dx\\\");\\n        } else {\\n            SafeToken.safeTransferFrom(tokenX, msg.sender, address(this), dx);\\n        }\\n\\n        dy = getDy(tokenX, tokenY, dx);\\n        if(tokenY == address(0)){\\n            SafeToken.safeTransferEVMOS(msg.sender, dy);\\n        } else {\\n            SafeToken.safeTransfer(tokenY, msg.sender, dy);\\n        }\\n    }\\n\\n    function sweep() public onlyOwner {\\n        SafeToken.safeTransferEVMOS(owner(), address(this).balance);\\n    }\\n\\n    fallback() external payable {}\\n\\n    /// @dev Fallback function to accept EVMOS.\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x6c9276f98f176f0ba6c96ee5cb569ab2f19c3ce5ffb160bef9a9ef21a8b143be\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620015ab380380620015ab83398181016040528101906200003791906200029f565b620000576200004b6200011a60201b60201c565b6200012260201b60201c565b60005b815181101562000112576001806000848481518110620000a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806200010990620003b0565b9150506200005a565b505062000487565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000620001fd620001f7846200030d565b620002e4565b905080838252602082019050828560208602820111156200021d57600080fd5b60005b858110156200025157816200023688826200025b565b84526020840193506020830192505060018101905062000220565b5050509392505050565b6000815190506200026c816200046d565b92915050565b600082601f8301126200028457600080fd5b815162000296848260208601620001e6565b91505092915050565b600060208284031215620002b257600080fd5b600082015167ffffffffffffffff811115620002cd57600080fd5b620002db8482850162000272565b91505092915050565b6000620002f062000303565b9050620002fe82826200037a565b919050565b6000604051905090565b600067ffffffffffffffff8211156200032b576200032a6200042d565b5b602082029050602081019050919050565b6000620003498262000350565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b62000385826200045c565b810181811067ffffffffffffffff82111715620003a757620003a66200042d565b5b80604052505050565b6000620003bd8262000370565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620003f357620003f2620003fe565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b62000478816200033c565b81146200048457600080fd5b50565b61111480620004976000396000f3fe60806040526004361061007f5760003560e01c8063715018a61161004e578063715018a6146101495780637dceefee146101605780638da5cb5b1461019d578063f2fde38b146101c857610086565b80630ed2fc951461008857806335faa416146100b85780634f119bbd146100cf5780634f129c531461010c57610086565b3661008657005b005b6100a2600480360381019061009d9190610aae565b6101f1565b6040516100af9190610dd7565b60405180910390f35b3480156100c457600080fd5b506100cd6102e0565b005b3480156100db57600080fd5b506100f660048036038101906100f19190610a5f565b6102fb565b6040516101039190610dd7565b60405180910390f35b34801561011857600080fd5b50610133600480360381019061012e9190610a36565b610399565b6040516101409190610cfc565b60405180910390f35b34801561015557600080fd5b5061015e6103b9565b005b34801561016c57600080fd5b5061018760048036038101906101829190610a5f565b6103cd565b6040516101949190610dd7565b60405180910390f35b3480156101a957600080fd5b506101b261046b565b6040516101bf9190610c81565b60405180910390f35b3480156101d457600080fd5b506101ef60048036038101906101ea9190610a36565b610494565b005b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561026e57823414610269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026090610d97565b60405180910390fd5b61027b565b61027a85333086610518565b5b6102868585856102fb565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156102cc576102c73382610651565b6102d8565b6102d7843383610777565b5b949350505050565b6102e86108ad565b6102f96102f361046b565b47610651565b565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156103455760028261033e9190610e4a565b9050610392565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561038e576002826103879190610e19565b9050610392565b8190505b9392505050565b60016020528060005260406000206000915054906101000a900460ff1681565b6103c16108ad565b6103cb600061092b565b565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610417576002826104109190610e19565b9050610464565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610460576002826104599190610e4a565b9050610464565b8190505b9392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61049c6108ad565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390610d17565b60405180910390fd5b6105158161092b565b50565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161054c93929190610c9c565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161059a9190610c6a565b6000604051808303816000865af19150503d80600081146105d7576040519150601f19603f3d011682016040523d82523d6000602084013e6105dc565b606091505b509150915081801561060a57506000815114806106095750808060200190518101906106089190610b11565b5b5b610649576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064090610db7565b60405180910390fd5b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156106ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156106de5781602001600182028036833780820191505090505b506040516106ec9190610c6a565b60006040518083038185875af1925050503d8060008114610729576040519150601f19603f3d011682016040523d82523d6000602084013e61072e565b606091505b5050905080610772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076990610d37565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016107a9929190610cd3565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107f79190610c6a565b6000604051808303816000865af19150503d8060008114610834576040519150601f19603f3d011682016040523d82523d6000602084013e610839565b606091505b509150915081801561086757506000815114806108665750808060200190518101906108659190610b11565b5b5b6108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d90610d57565b60405180910390fd5b5050505050565b6108b56109ef565b73ffffffffffffffffffffffffffffffffffffffff166108d361046b565b73ffffffffffffffffffffffffffffffffffffffff1614610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092090610d77565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081359050610a0681611099565b92915050565b600081519050610a1b816110b0565b92915050565b600081359050610a30816110c7565b92915050565b600060208284031215610a4857600080fd5b6000610a56848285016109f7565b91505092915050565b600080600060608486031215610a7457600080fd5b6000610a82868287016109f7565b9350506020610a93868287016109f7565b9250506040610aa486828701610a21565b9150509250925092565b60008060008060808587031215610ac457600080fd5b6000610ad2878288016109f7565b9450506020610ae3878288016109f7565b9350506040610af487828801610a21565b9250506060610b0587828801610a21565b91505092959194509250565b600060208284031215610b2357600080fd5b6000610b3184828501610a0c565b91505092915050565b610b4381610ea4565b82525050565b610b5281610eb6565b82525050565b6000610b6382610df2565b610b6d8185610dfd565b9350610b7d818560208601610eec565b80840191505092915050565b6000610b96602683610e08565b9150610ba182610f7d565b604082019050919050565b6000610bb9601283610e08565b9150610bc482610fcc565b602082019050919050565b6000610bdc600d83610e08565b9150610be782610ff5565b602082019050919050565b6000610bff602083610e08565b9150610c0a8261101e565b602082019050919050565b6000610c22601983610e08565b9150610c2d82611047565b602082019050919050565b6000610c45601183610e08565b9150610c5082611070565b602082019050919050565b610c6481610ee2565b82525050565b6000610c768284610b58565b915081905092915050565b6000602082019050610c966000830184610b3a565b92915050565b6000606082019050610cb16000830186610b3a565b610cbe6020830185610b3a565b610ccb6040830184610c5b565b949350505050565b6000604082019050610ce86000830185610b3a565b610cf56020830184610c5b565b9392505050565b6000602082019050610d116000830184610b49565b92915050565b60006020820190508181036000830152610d3081610b89565b9050919050565b60006020820190508181036000830152610d5081610bac565b9050919050565b60006020820190508181036000830152610d7081610bcf565b9050919050565b60006020820190508181036000830152610d9081610bf2565b9050919050565b60006020820190508181036000830152610db081610c15565b9050919050565b60006020820190508181036000830152610dd081610c38565b9050919050565b6000602082019050610dec6000830184610c5b565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610e2482610ee2565b9150610e2f83610ee2565b925082610e3f57610e3e610f4e565b5b828204905092915050565b6000610e5582610ee2565b9150610e6083610ee2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e9957610e98610f1f565b5b828202905092915050565b6000610eaf82610ec2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610f0a578082015181840152602081019050610eef565b83811115610f19576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f21736166655472616e7366657245564d4f530000000000000000000000000000600082015250565b7f21736166655472616e7366657200000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4d6f636b537761703a206d73672e76616c756520213d20647800000000000000600082015250565b7f21736166655472616e7366657246726f6d000000000000000000000000000000600082015250565b6110a281610ea4565b81146110ad57600080fd5b50565b6110b981610eb6565b81146110c457600080fd5b50565b6110d081610ee2565b81146110db57600080fd5b5056fea264697066735822122031e583d4ee2c483c60624fc724ab29f891049b1c4ad4e2b74b51908db79875c564736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063715018a61161004e578063715018a6146101495780637dceefee146101605780638da5cb5b1461019d578063f2fde38b146101c857610086565b80630ed2fc951461008857806335faa416146100b85780634f119bbd146100cf5780634f129c531461010c57610086565b3661008657005b005b6100a2600480360381019061009d9190610aae565b6101f1565b6040516100af9190610dd7565b60405180910390f35b3480156100c457600080fd5b506100cd6102e0565b005b3480156100db57600080fd5b506100f660048036038101906100f19190610a5f565b6102fb565b6040516101039190610dd7565b60405180910390f35b34801561011857600080fd5b50610133600480360381019061012e9190610a36565b610399565b6040516101409190610cfc565b60405180910390f35b34801561015557600080fd5b5061015e6103b9565b005b34801561016c57600080fd5b5061018760048036038101906101829190610a5f565b6103cd565b6040516101949190610dd7565b60405180910390f35b3480156101a957600080fd5b506101b261046b565b6040516101bf9190610c81565b60405180910390f35b3480156101d457600080fd5b506101ef60048036038101906101ea9190610a36565b610494565b005b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561026e57823414610269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026090610d97565b60405180910390fd5b61027b565b61027a85333086610518565b5b6102868585856102fb565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156102cc576102c73382610651565b6102d8565b6102d7843383610777565b5b949350505050565b6102e86108ad565b6102f96102f361046b565b47610651565b565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156103455760028261033e9190610e4a565b9050610392565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561038e576002826103879190610e19565b9050610392565b8190505b9392505050565b60016020528060005260406000206000915054906101000a900460ff1681565b6103c16108ad565b6103cb600061092b565b565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610417576002826104109190610e19565b9050610464565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610460576002826104599190610e4a565b9050610464565b8190505b9392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61049c6108ad565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390610d17565b60405180910390fd5b6105158161092b565b50565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161054c93929190610c9c565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161059a9190610c6a565b6000604051808303816000865af19150503d80600081146105d7576040519150601f19603f3d011682016040523d82523d6000602084013e6105dc565b606091505b509150915081801561060a57506000815114806106095750808060200190518101906106089190610b11565b5b5b610649576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064090610db7565b60405180910390fd5b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156106ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156106de5781602001600182028036833780820191505090505b506040516106ec9190610c6a565b60006040518083038185875af1925050503d8060008114610729576040519150601f19603f3d011682016040523d82523d6000602084013e61072e565b606091505b5050905080610772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076990610d37565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016107a9929190610cd3565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107f79190610c6a565b6000604051808303816000865af19150503d8060008114610834576040519150601f19603f3d011682016040523d82523d6000602084013e610839565b606091505b509150915081801561086757506000815114806108665750808060200190518101906108659190610b11565b5b5b6108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d90610d57565b60405180910390fd5b5050505050565b6108b56109ef565b73ffffffffffffffffffffffffffffffffffffffff166108d361046b565b73ffffffffffffffffffffffffffffffffffffffff1614610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092090610d77565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081359050610a0681611099565b92915050565b600081519050610a1b816110b0565b92915050565b600081359050610a30816110c7565b92915050565b600060208284031215610a4857600080fd5b6000610a56848285016109f7565b91505092915050565b600080600060608486031215610a7457600080fd5b6000610a82868287016109f7565b9350506020610a93868287016109f7565b9250506040610aa486828701610a21565b9150509250925092565b60008060008060808587031215610ac457600080fd5b6000610ad2878288016109f7565b9450506020610ae3878288016109f7565b9350506040610af487828801610a21565b9250506060610b0587828801610a21565b91505092959194509250565b600060208284031215610b2357600080fd5b6000610b3184828501610a0c565b91505092915050565b610b4381610ea4565b82525050565b610b5281610eb6565b82525050565b6000610b6382610df2565b610b6d8185610dfd565b9350610b7d818560208601610eec565b80840191505092915050565b6000610b96602683610e08565b9150610ba182610f7d565b604082019050919050565b6000610bb9601283610e08565b9150610bc482610fcc565b602082019050919050565b6000610bdc600d83610e08565b9150610be782610ff5565b602082019050919050565b6000610bff602083610e08565b9150610c0a8261101e565b602082019050919050565b6000610c22601983610e08565b9150610c2d82611047565b602082019050919050565b6000610c45601183610e08565b9150610c5082611070565b602082019050919050565b610c6481610ee2565b82525050565b6000610c768284610b58565b915081905092915050565b6000602082019050610c966000830184610b3a565b92915050565b6000606082019050610cb16000830186610b3a565b610cbe6020830185610b3a565b610ccb6040830184610c5b565b949350505050565b6000604082019050610ce86000830185610b3a565b610cf56020830184610c5b565b9392505050565b6000602082019050610d116000830184610b49565b92915050565b60006020820190508181036000830152610d3081610b89565b9050919050565b60006020820190508181036000830152610d5081610bac565b9050919050565b60006020820190508181036000830152610d7081610bcf565b9050919050565b60006020820190508181036000830152610d9081610bf2565b9050919050565b60006020820190508181036000830152610db081610c15565b9050919050565b60006020820190508181036000830152610dd081610c38565b9050919050565b6000602082019050610dec6000830184610c5b565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610e2482610ee2565b9150610e2f83610ee2565b925082610e3f57610e3e610f4e565b5b828204905092915050565b6000610e5582610ee2565b9150610e6083610ee2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e9957610e98610f1f565b5b828202905092915050565b6000610eaf82610ec2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610f0a578082015181840152602081019050610eef565b83811115610f19576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f21736166655472616e7366657245564d4f530000000000000000000000000000600082015250565b7f21736166655472616e7366657200000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4d6f636b537761703a206d73672e76616c756520213d20647800000000000000600082015250565b7f21736166655472616e7366657246726f6d000000000000000000000000000000600082015250565b6110a281610ea4565b81146110ad57600080fd5b50565b6110b981610eb6565b81146110c457600080fd5b50565b6110d081610ee2565b81146110db57600080fd5b5056fea264697066735822122031e583d4ee2c483c60624fc724ab29f891049b1c4ad4e2b74b51908db79875c564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "isSupported": {
        "details": "본 컨트랙트는 로컬 노드 배포용 컨트랙트로, EvmoSwapRouter과 유사한 역할을 하는 DEX라고 생각하면 됩니다. native token(EVMOS)과 나머지 모든 토큰의 교환비는 임의로 1: 2라고 놓았습니다. (EVMOS의 가치 = 다른 토큰의 가치 * 2) TODO 배포 후 본 컨트랙트로 유동성 추가해 주어야 함. ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/mock/MockSwap.sol:MockSwap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 440,
        "contract": "contracts/mock/MockSwap.sol:MockSwap",
        "label": "isSupported",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}