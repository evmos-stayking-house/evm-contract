{
  "address": "0x057cD3082EfED32d5C907801BF3628B27D88fD80",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "name": "getDx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "getDy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbb5968d262b1fa50f55b7253ca268ebf062ef08897eb65ecde98d5e3a0acede6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x057cD3082EfED32d5C907801BF3628B27D88fD80",
    "transactionIndex": 0,
    "gasUsed": "598889",
    "logsBloom": "0x
    "blockHash": "0x00f5d7a49056da165239bffe5ce19880b180721c1c5296123da2fc06e5ca2891",
    "transactionHash": "0xbb5968d262b1fa50f55b7253ca268ebf062ef08897eb65ecde98d5e3a0acede6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5205889,
        "transactionHash": "0xbb5968d262b1fa50f55b7253ca268ebf062ef08897eb65ecde98d5e3a0acede6",
        "address": "0x057cD3082EfED32d5C907801BF3628B27D88fD80",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x00f5d7a49056da165239bffe5ce19880b180721c1c5296123da2fc06e5ca2891"
      }
    ],
    "blockNumber": 5205889,
    "cumulativeGasUsed": "598889",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0000000000000000000000000000000000000000",
      "0xF357118EBd576f3C812c7875B1A1651a7f140E9C"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "d986b86957f665cc8046c8158b9e6879",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"name\":\"getDx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"getDy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"isSupported\":{\"details\":\"\\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub294 \\ub85c\\uceec \\ub178\\ub4dc \\ubc30\\ud3ec\\uc6a9 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c, EvmoSwapRouter\\uacfc \\uc720\\uc0ac\\ud55c \\uc5ed\\ud560\\uc744 \\ud558\\ub294 DEX\\ub77c\\uace0 \\uc0dd\\uac01\\ud558\\uba74 \\ub429\\ub2c8\\ub2e4. native token(EVMOS)\\uacfc \\ub098\\uba38\\uc9c0 \\ubaa8\\ub4e0 \\ud1a0\\ud070\\uc758 \\uad50\\ud658\\ube44\\ub294 \\uc784\\uc758\\ub85c 1: 2\\ub77c\\uace0 \\ub193\\uc558\\uc2b5\\ub2c8\\ub2e4. (EVMOS\\uc758 \\uac00\\uce58 = \\ub2e4\\ub978 \\ud1a0\\ud070\\uc758 \\uac00\\uce58 * 2) TODO \\ubc30\\ud3ec \\ud6c4 \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c \\uc720\\ub3d9\\uc131 \\ucd94\\uac00\\ud574 \\uc8fc\\uc5b4\\uc57c \\ud568. ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/MockSwap.sol\":\"MockSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x8c163fb0fb6e09d4ece34ede2d749086faeaa8438c07cf5529e5fbca680043e2\",\"license\":\"MIT\"},\"contracts/lib/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9e8a7188d698eea914eb3d07817fc539bdc152bee0b66567b6e911fd3293ce8d\",\"license\":\"MIT\"},\"contracts/lib/utils/SafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary SafeToken {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeApprove\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransfer\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransferFrom\\\"\\n        );\\n    }\\n\\n    function safeTransferEVMOS(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"!safeTransferEVMOS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3673f957556a65d32c0b4fca4aafcb2decf960c9a064b5008c1a43acd5f11ca5\",\"license\":\"MIT\"},\"contracts/mock/MockSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"../lib/interface/IERC20.sol\\\";\\nimport \\\"../lib/utils/SafeToken.sol\\\";\\nimport \\\"../lib/Ownable.sol\\\";\\n\\n\\ncontract MockSwap is Ownable {\\n    \\n    /**\\n        @dev \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub294 \\ub85c\\uceec \\ub178\\ub4dc \\ubc30\\ud3ec\\uc6a9 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c,\\n        EvmoSwapRouter\\uacfc \\uc720\\uc0ac\\ud55c \\uc5ed\\ud560\\uc744 \\ud558\\ub294 DEX\\ub77c\\uace0 \\uc0dd\\uac01\\ud558\\uba74 \\ub429\\ub2c8\\ub2e4.\\n\\n        native token(EVMOS)\\uacfc \\ub098\\uba38\\uc9c0 \\ubaa8\\ub4e0 \\ud1a0\\ud070\\uc758 \\uad50\\ud658\\ube44\\ub294 \\uc784\\uc758\\ub85c 1: 2\\ub77c\\uace0 \\ub193\\uc558\\uc2b5\\ub2c8\\ub2e4.\\n        (EVMOS\\uc758 \\uac00\\uce58 = \\ub2e4\\ub978 \\ud1a0\\ud070\\uc758 \\uac00\\uce58 * 2)\\n\\n        TODO \\ubc30\\ud3ec \\ud6c4 \\ubcf8 \\ucee8\\ud2b8\\ub799\\ud2b8\\ub85c \\uc720\\ub3d9\\uc131 \\ucd94\\uac00\\ud574 \\uc8fc\\uc5b4\\uc57c \\ud568.\\n        ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);\\n     */\\n\\n    mapping(address => bool) public isSupported;\\n\\n    constructor (\\n        address[] memory tokens\\n    ){\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            isSupported[tokens[i]] = true;\\n        }\\n    }\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) public pure returns (uint256) {\\n        if(tokenX == address(0))\\n            return dy / 2;\\n        else if(tokenY == address(0))\\n            return dy * 2;\\n        else\\n            return dy;\\n    }\\n\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) public pure returns (uint256) {\\n        if(tokenX == address(0))\\n            return dx * 2;\\n        else if(tokenY == address(0))\\n            return dx / 2;\\n        else\\n            return dx;\\n    }\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 /* minDy */\\n    ) public payable returns(uint256 dy) {\\n        if(tokenX == address(0)){\\n            require(msg.value == dx, \\\"MockSwap: msg.value != dx\\\");\\n        } else {\\n            SafeToken.safeTransferFrom(tokenX, msg.sender, address(this), dx);\\n        }\\n\\n        dy = getDy(tokenX, tokenY, dx);\\n        if(tokenY == address(0)){\\n            SafeToken.safeTransferEVMOS(msg.sender, dy);\\n        } else {\\n            SafeToken.safeTransfer(tokenY, msg.sender, dy);\\n        }\\n    }\\n\\n    // sweep in-contract EVMOS\\n    function sweep() public onlyOwner {\\n        SafeToken.safeTransferEVMOS(msg.sender, address(this).balance);\\n    }\\n\\n    fallback() external payable {}\\n\\n    /// @dev Fallback function to accept EVMOS.\\n    receive() external payable {}\\n}\",\"keccak256\":\"0xf358f674a97764a8c06bf60cd8f5b23aee85941209455c5a1aadef298f9ab6f9\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610aa6380380610aa683398101604081905261002f91610120565b610038336100b4565b60005b81518110156100ad57600180600084848151811061006957634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806100a5816101e6565b91505061003b565b5050610223565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461011b57600080fd5b919050565b60006020808385031215610132578182fd5b82516001600160401b0380821115610148578384fd5b818501915085601f83011261015b578384fd5b81518181111561016d5761016d61020d565b8060051b604051601f19603f830116810181811085821117156101925761019261020d565b604052828152858101935084860182860187018a10156101b0578788fd5b8795505b838610156101d9576101c581610104565b8552600195909501949386019386016101b4565b5098975050505050505050565b600060001982141561020657634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b610874806102326000396000f3fe6080604052600436106100795760003560e01c8063715018a61161004b578063715018a61461011d5780637dceefee146101325780638da5cb5b14610152578063f2fde38b1461017a57005b80630ed2fc951461008257806335faa416146100a85780634f119bbd146100bd5780634f129c53146100dd57005b3661008057005b005b610095610090366004610759565b61019a565b6040519081526020015b60405180910390f35b3480156100b457600080fd5b5061008061024c565b3480156100c957600080fd5b506100956100d836600461071e565b610260565b3480156100e957600080fd5b5061010d6100f8366004610704565b60016020526000908152604090205460ff1681565b604051901515815260200161009f565b34801561012957600080fd5b506100806102a5565b34801561013e57600080fd5b5061009561014d36600461071e565b6102b7565b34801561015e57600080fd5b506000546040516001600160a01b03909116815260200161009f565b34801561018657600080fd5b50610080610195366004610704565b6102eb565b60006001600160a01b038516610203578234146101fe5760405162461bcd60e51b815260206004820152601960248201527f4d6f636b537761703a206d73672e76616c756520213d2064780000000000000060448201526064015b60405180910390fd5b61020f565b61020f85333086610364565b61021a858585610260565b90506001600160a01b03841661023957610234338261047c565b610244565b610244843383610533565b949350505050565b61025461063e565b61025e334761047c565b565b60006001600160a01b0384166102825761027b826002610813565b905061029e565b6001600160a01b03831661029b5761027b6002836107f3565b50805b9392505050565b6102ad61063e565b61025e6000610698565b60006001600160a01b0384166102d25761027b6002836107f3565b6001600160a01b03831661029b5761027b826002610813565b6102f361063e565b6001600160a01b0381166103585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101f5565b61036181610698565b50565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916103c891906107ba565b6000604051808303816000865af19150503d8060008114610405576040519150601f19603f3d011682016040523d82523d6000602084013e61040a565b606091505b5091509150818015610434575080511580610434575080806020019051810190610434919061079a565b6104745760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b60448201526064016101f5565b505050505050565b604080516000808252602082019092526001600160a01b0384169083906040516104a691906107ba565b60006040518083038185875af1925050503d80600081146104e3576040519150601f19603f3d011682016040523d82523d6000602084013e6104e8565b606091505b505090508061052e5760405162461bcd60e51b815260206004820152601260248201527121736166655472616e7366657245564d4f5360701b60448201526064016101f5565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161058f91906107ba565b6000604051808303816000865af19150503d80600081146105cc576040519150601f19603f3d011682016040523d82523d6000602084013e6105d1565b606091505b50915091508180156105fb5750805115806105fb5750808060200190518101906105fb919061079a565b6106375760405162461bcd60e51b815260206004820152600d60248201526c10b9b0b332aa3930b739b332b960991b60448201526064016101f5565b5050505050565b6000546001600160a01b0316331461025e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101f5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146106ff57600080fd5b919050565b600060208284031215610715578081fd5b61029e826106e8565b600080600060608486031215610732578182fd5b61073b846106e8565b9250610749602085016106e8565b9150604084013590509250925092565b6000806000806080858703121561076e578081fd5b610777856106e8565b9350610785602086016106e8565b93969395505050506040820135916060013590565b6000602082840312156107ab578081fd5b8151801515811461029e578182fd5b60008251815b818110156107da57602081860181015185830152016107c0565b818111156107e85782828501525b509190910192915050565b60008261080e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561083957634e487b7160e01b81526011600452602481fd5b50029056fea264697066735822122014e09166d8d97739c6a0a04fd73d193e3fdd64b77d20e2c54d1b2508394147a564736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100795760003560e01c8063715018a61161004b578063715018a61461011d5780637dceefee146101325780638da5cb5b14610152578063f2fde38b1461017a57005b80630ed2fc951461008257806335faa416146100a85780634f119bbd146100bd5780634f129c53146100dd57005b3661008057005b005b610095610090366004610759565b61019a565b6040519081526020015b60405180910390f35b3480156100b457600080fd5b5061008061024c565b3480156100c957600080fd5b506100956100d836600461071e565b610260565b3480156100e957600080fd5b5061010d6100f8366004610704565b60016020526000908152604090205460ff1681565b604051901515815260200161009f565b34801561012957600080fd5b506100806102a5565b34801561013e57600080fd5b5061009561014d36600461071e565b6102b7565b34801561015e57600080fd5b506000546040516001600160a01b03909116815260200161009f565b34801561018657600080fd5b50610080610195366004610704565b6102eb565b60006001600160a01b038516610203578234146101fe5760405162461bcd60e51b815260206004820152601960248201527f4d6f636b537761703a206d73672e76616c756520213d2064780000000000000060448201526064015b60405180910390fd5b61020f565b61020f85333086610364565b61021a858585610260565b90506001600160a01b03841661023957610234338261047c565b610244565b610244843383610533565b949350505050565b61025461063e565b61025e334761047c565b565b60006001600160a01b0384166102825761027b826002610813565b905061029e565b6001600160a01b03831661029b5761027b6002836107f3565b50805b9392505050565b6102ad61063e565b61025e6000610698565b60006001600160a01b0384166102d25761027b6002836107f3565b6001600160a01b03831661029b5761027b826002610813565b6102f361063e565b6001600160a01b0381166103585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101f5565b61036181610698565b50565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916103c891906107ba565b6000604051808303816000865af19150503d8060008114610405576040519150601f19603f3d011682016040523d82523d6000602084013e61040a565b606091505b5091509150818015610434575080511580610434575080806020019051810190610434919061079a565b6104745760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b60448201526064016101f5565b505050505050565b604080516000808252602082019092526001600160a01b0384169083906040516104a691906107ba565b60006040518083038185875af1925050503d80600081146104e3576040519150601f19603f3d011682016040523d82523d6000602084013e6104e8565b606091505b505090508061052e5760405162461bcd60e51b815260206004820152601260248201527121736166655472616e7366657245564d4f5360701b60448201526064016101f5565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161058f91906107ba565b6000604051808303816000865af19150503d80600081146105cc576040519150601f19603f3d011682016040523d82523d6000602084013e6105d1565b606091505b50915091508180156105fb5750805115806105fb5750808060200190518101906105fb919061079a565b6106375760405162461bcd60e51b815260206004820152600d60248201526c10b9b0b332aa3930b739b332b960991b60448201526064016101f5565b5050505050565b6000546001600160a01b0316331461025e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101f5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146106ff57600080fd5b919050565b600060208284031215610715578081fd5b61029e826106e8565b600080600060608486031215610732578182fd5b61073b846106e8565b9250610749602085016106e8565b9150604084013590509250925092565b6000806000806080858703121561076e578081fd5b610777856106e8565b9350610785602086016106e8565b93969395505050506040820135916060013590565b6000602082840312156107ab578081fd5b8151801515811461029e578182fd5b60008251815b818110156107da57602081860181015185830152016107c0565b818111156107e85782828501525b509190910192915050565b60008261080e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561083957634e487b7160e01b81526011600452602481fd5b50029056fea264697066735822122014e09166d8d97739c6a0a04fd73d193e3fdd64b77d20e2c54d1b2508394147a564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "isSupported": {
        "details": "본 컨트랙트는 로컬 노드 배포용 컨트랙트로, EvmoSwapRouter과 유사한 역할을 하는 DEX라고 생각하면 됩니다. native token(EVMOS)과 나머지 모든 토큰의 교환비는 임의로 1: 2라고 놓았습니다. (EVMOS의 가치 = 다른 토큰의 가치 * 2) TODO 배포 후 본 컨트랙트로 유동성 추가해 주어야 함. ex) IERC20(tokenAddress).mint(address(this), MAX_UINT / 2);"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2565,
        "contract": "contracts/mock/MockSwap.sol:MockSwap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3129,
        "contract": "contracts/mock/MockSwap.sol:MockSwap",
        "label": "isSupported",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}