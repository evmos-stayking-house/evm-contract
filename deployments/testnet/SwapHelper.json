{
  "address": "0xB92807A22EE7294B8759F339be800c923d4374dd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "name": "getDx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "getDy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenA",
          "type": "uint256"
        }
      ],
      "name": "getSlippageFactorsFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x92b4fa80542dced5db1686ba4aeec4bab163faad8ef1a14023da811caaecc409",
  "receipt": {
    "to": null,
    "from": "0x4888e2649F32B9946c382f0D68f8De586fc8A256",
    "contractAddress": "0xB92807A22EE7294B8759F339be800c923d4374dd",
    "transactionIndex": 0,
    "gasUsed": "994984",
    "logsBloom": "0x
    "blockHash": "0x34d93f55b18349470f4fd5b72833b6a15d094ce4eb77182f8ffdd615d123f976",
    "transactionHash": "0x92b4fa80542dced5db1686ba4aeec4bab163faad8ef1a14023da811caaecc409",
    "logs": [],
    "blockNumber": 8727049,
    "cumulativeGasUsed": "994984",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x72bd489d3cF0e9cC36af6e306Ff53E56d0f9EFb4"
  ],
  "numDeployments": 1,
  "solcInputHash": "3b191f37d4848a695eaa02c2fc83b024",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"name\":\"getDx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"getDy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenA\",\"type\":\"uint256\"}],\"name\":\"getSlippageFactorsFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapHelper.sol\":\"SwapHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport './interface/ISwapHelper.sol';\\nimport './interface/swap/v2-periphery/IUniswapV2Router.sol';\\nimport './interface/swap/core/IUniswapV2Pair.sol';\\nimport './lib/utils/SafeToken.sol';\\n\\ncontract SwapHelper is ISwapHelper {\\n    IUniswapV2Router public router;\\n\\n    constructor(address _router) {\\n        router = IUniswapV2Router(_router);\\n    }\\n\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) public view override returns (uint256 dy) {\\n        address[] memory path = new address[](2);\\n        path[0] = tokenX == address(0) ? router.WETH() : tokenX;\\n        path[1] = tokenY == address(0) ? router.WETH() : tokenY;\\n\\n        uint256[] memory amounts = router.getAmountsOut(dx, path);\\n        return amounts[1];\\n    }\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) public view override returns (uint256 dx) {\\n        address[] memory path = new address[](2);\\n        path[0] = tokenX == address(0) ? router.WETH() : tokenX;\\n        path[1] = tokenY == address(0) ? router.WETH() : tokenY;\\n\\n        uint256[] memory amounts = router.getAmountsIn(dy, path);\\n        return amounts[0];\\n    }\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 minDy\\n    ) public payable override returns (uint256) {\\n        address[] memory path = new address[](2);\\n        uint256[] memory amounts;\\n\\n        // if tokenY == address(0) too, swapExactETHForTokens will be reverted.\\n        if (tokenX == address(0)) {\\n            require(dx == msg.value, 'exchange: invalid msg.value');\\n\\n            path[0] = router.WETH();\\n            path[1] = tokenY;\\n\\n            amounts = router.swapExactETHForTokens{value: dx}(\\n                minDy,\\n                path,\\n                msg.sender,\\n                block.timestamp + 600 // 10 minutes, \\uc218\\uce58\\ub294 \\uc870\\uc808\\ud574\\uc57c \\ud568\\n            );\\n\\n            return amounts[1];\\n        }\\n        else {\\n            /// @dev msg.sender should approve this helper contract first\\n            SafeToken.safeTransferFrom(tokenX, msg.sender, address(this), dx);\\n\\n            SafeToken.safeApprove(tokenX, address(router), dx);\\n\\n            path[0] = tokenX;\\n            path[1] = router.WETH();\\n\\n            amounts = router.swapExactTokensForETH(\\n                dx,\\n                minDy,\\n                path,\\n                msg.sender,\\n                block.timestamp + 600 // 10 minutes, \\uc218\\uce58\\ub294 \\uc870\\uc808\\ud574\\uc57c \\ud568\\n            );\\n\\n            return amounts[1];\\n        }\\n    }\\n\\n    function getSlippageFactorsFrom(\\n        address _pair, \\n        uint amountTokenA\\n    ) \\n        public \\n        view \\n        returns (uint, uint, uint, uint32) \\n    {\\n        (uint reserve0, uint reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(_pair).getReserves();\\n        require(block.timestamp > blockTimestampLast, \\\"timestamp is error\\\");\\n        require(reserve0 > 0 && reserve1 > 0, \\\"Insufficient Liquidity for the pair input\\\");\\n\\n        uint amountTokenB = router.quote(amountTokenA, reserve0, reserve1);\\n        return (amountTokenB, reserve0, reserve1, blockTimestampLast);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x3941dfd9648bf0f3af4080ec3e710dbe406b7fed31d85de7c76b2c193ea14251\",\"license\":\"MIT\"},\"contracts/interface/ISwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/************************************************************\\n * @dev\\n * Glossary\\n * X : Input Token\\n * Y : Output Token\\n * Dx : Amount of Input Token\\n * Dy : Amount of Output Token\\n *************************************************************/\\ninterface ISwapHelper {\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) external view returns (uint256 dy);\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) external view returns (uint256 dx);\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 minDy\\n    ) external payable returns (uint256 dy);\\n}\\n\",\"keccak256\":\"0x3d1deef0d44180d8e6a8e1f75b94d73abbefd3a58aa58fecbb49e967e9548ad8\",\"license\":\"UNLICENSED\"},\"contracts/interface/swap/core/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x506c650dfe2dfaf284cacfd05ba003521ce26cbcc2b1f881908068852a9d657e\",\"license\":\"MIT\"},\"contracts/interface/swap/v2-periphery/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router {\\n\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n    \\n}\",\"keccak256\":\"0x11b3a558c6d659672a75edee4582b7859d31213ff296122a853d399a397160c4\",\"license\":\"MIT\"},\"contracts/lib/utils/SafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary SafeToken {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            '!safeApprove'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            '!safeTransfer'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            '!safeTransferFrom'\\n        );\\n    }\\n\\n    function safeTransferEVMOS(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, '!safeTransferEVMOS');\\n    }\\n}\\n\",\"keccak256\":\"0xf9de084e8f082cf68034fccbfb1504cc7c5f086c484535decd5da7e881a60da2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161112d38038061112d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61109a806100936000396000f3fe60806040526004361061004a5760003560e01c80630ed2fc951461004f5780634f119bbd1461007557806361bd6468146100955780637dceefee146100db578063f887ea40146100fb575b600080fd5b61006261005d366004610cd8565b610133565b6040519081526020015b60405180910390f35b34801561008157600080fd5b50610062610090366004610d1e565b6104b1565b3480156100a157600080fd5b506100b56100b0366004610d5f565b6106cc565b6040805194855260208501939093529183015263ffffffff16606082015260800161006c565b3480156100e757600080fd5b506100626100f6366004610d1e565b610896565b34801561010757600080fd5b5060005461011b906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6040805160028082526060820183526000928392919060208301908036833701905050905060606001600160a01b038716610333573485146101bc5760405162461bcd60e51b815260206004820152601b60248201527f65786368616e67653a20696e76616c6964206d73672e76616c7565000000000060448201526064015b60405180910390fd5b60008054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561020d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102319190610da1565b8260008151811061024457610244610dc5565b60200260200101906001600160a01b031690816001600160a01b031681525050858260018151811061027857610278610dc5565b6001600160a01b03928316602091820292909201015260005416637ff36ab5868685336102a742610258610ddb565b6040518663ffffffff1660e01b81526004016102c69493929190610e46565b60006040518083038185885af11580156102e4573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261030d9190810190610e7b565b90508060018151811061032257610322610dc5565b6020026020010151925050506104a9565b61033f87333088610a9e565b6000546103579088906001600160a01b031687610bb6565b868260008151811061036b5761036b610dc5565b60200260200101906001600160a01b031690816001600160a01b03168152505060008054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104009190610da1565b8260018151811061041357610413610dc5565b6001600160a01b039283166020918202929092010152600054166318cbafe58686853361044242610258610ddb565b6040518663ffffffff1660e01b8152600401610462959493929190610f39565b6000604051808303816000875af1158015610481573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261030d9190810190610e7b565b949350505050565b604080516002808252606082018352600092839291906020830190803683370190505090506001600160a01b038516156104eb5784610560565b60008054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561053c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105609190610da1565b8160008151811061057357610573610dc5565b6001600160a01b039283166020918202929092010152841615610596578361060b565b60008054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190610da1565b8160018151811061061e5761061e610dc5565b6001600160a01b0392831660209182029290920101526000805460405163d06ca61f60e01b81529192169063d06ca61f9061065f9087908690600401610f75565b600060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106a49190810190610e7b565b9050806001815181106106b9576106b9610dc5565b6020026020010151925050509392505050565b6000806000806000806000886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610715573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107399190610faa565b92506001600160701b031692506001600160701b031692508063ffffffff16421161079b5760405162461bcd60e51b81526020600482015260126024820152713a34b6b2b9ba30b6b81034b99032b93937b960711b60448201526064016101b3565b6000831180156107ab5750600082115b6108095760405162461bcd60e51b815260206004820152602960248201527f496e73756666696369656e74204c697175696469747920666f72207468652070604482015268185a5c881a5b9c1d5d60ba1b60648201526084016101b3565b60008054604051632b58577b60e21b8152600481018b905260248101869052604481018590526001600160a01b039091169063ad615dec90606401602060405180830381865afa158015610861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108859190610ffa565b9a9399509197509550909350505050565b604080516002808252606082018352600092839291906020830190803683370190505090506001600160a01b038516156108d05784610945565b60008054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109459190610da1565b8160008151811061095857610958610dc5565b6001600160a01b03928316602091820292909201015284161561097b57836109f0565b60008054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f09190610da1565b81600181518110610a0357610a03610dc5565b6001600160a01b039283166020918202929092010152600080546040516307c0329d60e21b815291921690631f00ca7490610a449087908690600401610f75565b600060405180830381865afa158015610a61573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a899190810190610e7b565b9050806000815181106106b9576106b9610dc5565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691610b029190611013565b6000604051808303816000865af19150503d8060008114610b3f576040519150601f19603f3d011682016040523d82523d6000602084013e610b44565b606091505b5091509150818015610b6e575080511580610b6e575080806020019051810190610b6e9190611042565b610bae5760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b60448201526064016101b3565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691610c129190611013565b6000604051808303816000865af19150503d8060008114610c4f576040519150601f19603f3d011682016040523d82523d6000602084013e610c54565b606091505b5091509150818015610c7e575080511580610c7e575080806020019051810190610c7e9190611042565b610cb95760405162461bcd60e51b815260206004820152600c60248201526b2173616665417070726f766560a01b60448201526064016101b3565b5050505050565b6001600160a01b0381168114610cd557600080fd5b50565b60008060008060808587031215610cee57600080fd5b8435610cf981610cc0565b93506020850135610d0981610cc0565b93969395505050506040820135916060013590565b600080600060608486031215610d3357600080fd5b8335610d3e81610cc0565b92506020840135610d4e81610cc0565b929592945050506040919091013590565b60008060408385031215610d7257600080fd5b8235610d7d81610cc0565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610db357600080fd5b8151610dbe81610cc0565b9392505050565b634e487b7160e01b600052603260045260246000fd5b80820180821115610dfc57634e487b7160e01b600052601160045260246000fd5b92915050565b600081518084526020808501945080840160005b83811015610e3b5781516001600160a01b031687529582019590820190600101610e16565b509495945050505050565b848152608060208201526000610e5f6080830186610e02565b6001600160a01b03949094166040830152506060015292915050565b60006020808385031215610e8e57600080fd5b825167ffffffffffffffff80821115610ea657600080fd5b818501915085601f830112610eba57600080fd5b815181811115610ecc57610ecc610d8b565b8060051b604051601f19603f83011681018181108582111715610ef157610ef1610d8b565b604052918252848201925083810185019188831115610f0f57600080fd5b938501935b82851015610f2d57845184529385019392850192610f14565b98975050505050505050565b85815284602082015260a060408201526000610f5860a0830186610e02565b6001600160a01b0394909416606083015250608001529392505050565b8281526040602082015260006104a96040830184610e02565b80516001600160701b0381168114610fa557600080fd5b919050565b600080600060608486031215610fbf57600080fd5b610fc884610f8e565b9250610fd660208501610f8e565b9150604084015163ffffffff81168114610fef57600080fd5b809150509250925092565b60006020828403121561100c57600080fd5b5051919050565b6000825160005b81811015611034576020818601810151858301520161101a565b506000920191825250919050565b60006020828403121561105457600080fd5b81518015158114610dbe57600080fdfea26469706673582212205f634345e47f80554b71db8e4b3e7c3f03b585e553c7323321ca39682866ad5164736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c80630ed2fc951461004f5780634f119bbd1461007557806361bd6468146100955780637dceefee146100db578063f887ea40146100fb575b600080fd5b61006261005d366004610cd8565b610133565b6040519081526020015b60405180910390f35b34801561008157600080fd5b50610062610090366004610d1e565b6104b1565b3480156100a157600080fd5b506100b56100b0366004610d5f565b6106cc565b6040805194855260208501939093529183015263ffffffff16606082015260800161006c565b3480156100e757600080fd5b506100626100f6366004610d1e565b610896565b34801561010757600080fd5b5060005461011b906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6040805160028082526060820183526000928392919060208301908036833701905050905060606001600160a01b038716610333573485146101bc5760405162461bcd60e51b815260206004820152601b60248201527f65786368616e67653a20696e76616c6964206d73672e76616c7565000000000060448201526064015b60405180910390fd5b60008054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561020d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102319190610da1565b8260008151811061024457610244610dc5565b60200260200101906001600160a01b031690816001600160a01b031681525050858260018151811061027857610278610dc5565b6001600160a01b03928316602091820292909201015260005416637ff36ab5868685336102a742610258610ddb565b6040518663ffffffff1660e01b81526004016102c69493929190610e46565b60006040518083038185885af11580156102e4573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261030d9190810190610e7b565b90508060018151811061032257610322610dc5565b6020026020010151925050506104a9565b61033f87333088610a9e565b6000546103579088906001600160a01b031687610bb6565b868260008151811061036b5761036b610dc5565b60200260200101906001600160a01b031690816001600160a01b03168152505060008054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104009190610da1565b8260018151811061041357610413610dc5565b6001600160a01b039283166020918202929092010152600054166318cbafe58686853361044242610258610ddb565b6040518663ffffffff1660e01b8152600401610462959493929190610f39565b6000604051808303816000875af1158015610481573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261030d9190810190610e7b565b949350505050565b604080516002808252606082018352600092839291906020830190803683370190505090506001600160a01b038516156104eb5784610560565b60008054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561053c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105609190610da1565b8160008151811061057357610573610dc5565b6001600160a01b039283166020918202929092010152841615610596578361060b565b60008054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190610da1565b8160018151811061061e5761061e610dc5565b6001600160a01b0392831660209182029290920101526000805460405163d06ca61f60e01b81529192169063d06ca61f9061065f9087908690600401610f75565b600060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106a49190810190610e7b565b9050806001815181106106b9576106b9610dc5565b6020026020010151925050509392505050565b6000806000806000806000886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610715573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107399190610faa565b92506001600160701b031692506001600160701b031692508063ffffffff16421161079b5760405162461bcd60e51b81526020600482015260126024820152713a34b6b2b9ba30b6b81034b99032b93937b960711b60448201526064016101b3565b6000831180156107ab5750600082115b6108095760405162461bcd60e51b815260206004820152602960248201527f496e73756666696369656e74204c697175696469747920666f72207468652070604482015268185a5c881a5b9c1d5d60ba1b60648201526084016101b3565b60008054604051632b58577b60e21b8152600481018b905260248101869052604481018590526001600160a01b039091169063ad615dec90606401602060405180830381865afa158015610861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108859190610ffa565b9a9399509197509550909350505050565b604080516002808252606082018352600092839291906020830190803683370190505090506001600160a01b038516156108d05784610945565b60008054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109459190610da1565b8160008151811061095857610958610dc5565b6001600160a01b03928316602091820292909201015284161561097b57836109f0565b60008054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f09190610da1565b81600181518110610a0357610a03610dc5565b6001600160a01b039283166020918202929092010152600080546040516307c0329d60e21b815291921690631f00ca7490610a449087908690600401610f75565b600060405180830381865afa158015610a61573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a899190810190610e7b565b9050806000815181106106b9576106b9610dc5565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691610b029190611013565b6000604051808303816000865af19150503d8060008114610b3f576040519150601f19603f3d011682016040523d82523d6000602084013e610b44565b606091505b5091509150818015610b6e575080511580610b6e575080806020019051810190610b6e9190611042565b610bae5760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b60448201526064016101b3565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691610c129190611013565b6000604051808303816000865af19150503d8060008114610c4f576040519150601f19603f3d011682016040523d82523d6000602084013e610c54565b606091505b5091509150818015610c7e575080511580610c7e575080806020019051810190610c7e9190611042565b610cb95760405162461bcd60e51b815260206004820152600c60248201526b2173616665417070726f766560a01b60448201526064016101b3565b5050505050565b6001600160a01b0381168114610cd557600080fd5b50565b60008060008060808587031215610cee57600080fd5b8435610cf981610cc0565b93506020850135610d0981610cc0565b93969395505050506040820135916060013590565b600080600060608486031215610d3357600080fd5b8335610d3e81610cc0565b92506020840135610d4e81610cc0565b929592945050506040919091013590565b60008060408385031215610d7257600080fd5b8235610d7d81610cc0565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610db357600080fd5b8151610dbe81610cc0565b9392505050565b634e487b7160e01b600052603260045260246000fd5b80820180821115610dfc57634e487b7160e01b600052601160045260246000fd5b92915050565b600081518084526020808501945080840160005b83811015610e3b5781516001600160a01b031687529582019590820190600101610e16565b509495945050505050565b848152608060208201526000610e5f6080830186610e02565b6001600160a01b03949094166040830152506060015292915050565b60006020808385031215610e8e57600080fd5b825167ffffffffffffffff80821115610ea657600080fd5b818501915085601f830112610eba57600080fd5b815181811115610ecc57610ecc610d8b565b8060051b604051601f19603f83011681018181108582111715610ef157610ef1610d8b565b604052918252848201925083810185019188831115610f0f57600080fd5b938501935b82851015610f2d57845184529385019392850192610f14565b98975050505050505050565b85815284602082015260a060408201526000610f5860a0830186610e02565b6001600160a01b0394909416606083015250608001529392505050565b8281526040602082015260006104a96040830184610e02565b80516001600160701b0381168114610fa557600080fd5b919050565b600080600060608486031215610fbf57600080fd5b610fc884610f8e565b9250610fd660208501610f8e565b9150604084015163ffffffff81168114610fef57600080fd5b809150509250925092565b60006020828403121561100c57600080fd5b5051919050565b6000825160005b81811015611034576020818601810151858301520161101a565b506000920191825250919050565b60006020828403121561105457600080fd5b81518015158114610dbe57600080fdfea26469706673582212205f634345e47f80554b71db8e4b3e7c3f03b585e553c7323321ca39682866ad5164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/SwapHelper.sol:SwapHelper",
        "label": "router",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IUniswapV2Router)1037"
      }
    ],
    "types": {
      "t_contract(IUniswapV2Router)1037": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router",
        "numberOfBytes": "20"
      }
    }
  }
}