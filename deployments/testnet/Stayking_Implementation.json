{
  "address": "0xf2a8FDF74E37EBc533e79f550ffbBC7eE4DB8d7B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accrued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "name": "Accrue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "equity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtInBase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "AddPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "AddVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        }
      ],
      "name": "ChangeDelegator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "uEVMOS",
          "type": "address"
        }
      ],
      "name": "ChangeUEVMOS",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "killer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "equity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtInBase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Kill",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "name": "PositionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "equity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtInBase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "RemovePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDebtInBase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reservedBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultRewardBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "killFactorBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidateDebtFactorBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationFeeBps",
          "type": "uint256"
        }
      ],
      "name": "UpdateConfigs",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "UpdateVault",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uEVMOS_",
          "type": "address"
        }
      ],
      "name": "__Stayking_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "name": "accrue",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "equity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtInBase",
          "type": "uint256"
        }
      ],
      "name": "addPosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "amountToShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegator",
          "type": "address"
        }
      ],
      "name": "changeDelegator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "equityInBaseChanged",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "debtInBaseChanged",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "repaidDebt",
          "type": "uint256"
        }
      ],
      "name": "changePosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uevmos",
          "type": "address"
        }
      ],
      "name": "changeUnbondedEvmos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "debtAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "getAccruedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "isKillable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "killFactorBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidateDebtFactorBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDebtInBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "positionIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        }
      ],
      "name": "positionInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionValueInBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtInBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "positionsLengthOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        }
      ],
      "name": "removePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservedBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservedPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "shareToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalDebtOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uEVMOS",
      "outputs": [
        {
          "internalType": "contract IUnbondedEvmos",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDebtInBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reservedBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vaultRewardBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_killFactorBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidateDebtFactorBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationFeeBps",
          "type": "uint256"
        }
      ],
      "name": "updateConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "updateVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "killers",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "ok",
          "type": "bool"
        }
      ],
      "name": "updateWhitelistedKillerStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultRewardBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedKiller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x75d03f06d38bdf1f743b3565326ccd9e0eba3f2caab8934f16a7f5a231c666e2",
  "receipt": {
    "to": null,
    "from": "0x4888e2649F32B9946c382f0D68f8De586fc8A256",
    "contractAddress": "0xf2a8FDF74E37EBc533e79f550ffbBC7eE4DB8d7B",
    "transactionIndex": 20,
    "gasUsed": "2873019",
    "logsBloom": "0x
    "blockHash": "0x41ec0ca7b2abcd83da0183720035c8115b9b0620a3b519042b071ec691127579",
    "transactionHash": "0x75d03f06d38bdf1f743b3565326ccd9e0eba3f2caab8934f16a7f5a231c666e2",
    "logs": [],
    "blockNumber": 7060659,
    "cumulativeGasUsed": "5362999",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "173880e0ec13e2856cf38ce259e871c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accrued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"Accrue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"equity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtInBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"AddPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"AddVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"ChangeDelegator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"uEVMOS\",\"type\":\"address\"}],\"name\":\"ChangeUEVMOS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"killer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"equity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtInBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Kill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"PositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"equity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtInBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"RemovePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDebtInBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservedBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultRewardBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"killFactorBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidateDebtFactorBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationFeeBps\",\"type\":\"uint256\"}],\"name\":\"UpdateConfigs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"UpdateVault\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uEVMOS_\",\"type\":\"address\"}],\"name\":\"__Stayking_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"accrue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"equity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtInBase\",\"type\":\"uint256\"}],\"name\":\"addPosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"amountToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"changeDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"equityInBaseChanged\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"debtInBaseChanged\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"repaidDebt\",\"type\":\"uint256\"}],\"name\":\"changePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uevmos\",\"type\":\"address\"}],\"name\":\"changeUnbondedEvmos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"debtAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"getAccruedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"isKillable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killFactorBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateDebtFactorBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDebtInBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positionIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"positionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionValueInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positionsLengthOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"removePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"shareToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDebtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uEVMOS\",\"outputs\":[{\"internalType\":\"contract IUnbondedEvmos\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDebtInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservedBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultRewardBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_killFactorBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidateDebtFactorBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFeeBps\",\"type\":\"uint256\"}],\"name\":\"updateConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"updateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"killers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"updateWhitelistedKillerStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRewardBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedKiller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accrue(uint256)\":{\"details\":\"msg.value = all of staking reward\",\"params\":{\"totalStaked\":\"current total staked EVMOS (except staking reward)\"}},\"addPosition(address,uint256,uint256)\":{\"params\":{\"debtInBase\":\"debtAmount in EVMOS\",\"debtToken\":\"debtToken Address (not vault address)\",\"equity\":\"equityAmount in EVMOS\"}},\"changePosition(address,int256,int256,uint256)\":{\"details\":\"repayDebtInBase = msg.value - changeEquityInBaseUser should approve this firstif msg.value > 0, changeEquityInBase >= 0 since msg.value = changeEquityInBase + repayDebtInBase\"},\"getAccruedValue(uint256)\":{\"params\":{\"reward\":\"claimed staking reward\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"positionInfo(address,address)\":{\"details\":\"returns position's value & debt value position value: positionValueInBase equity value: positionValueInBase - debtInBase debt value: debtInBase debt ratio: debtInBase / positionValueInBase * 100(%) kill factor: killFactorBps / 100 safety buffer: (kill factor) - (debt ratio)\"},\"removePosition(address)\":{\"details\":\"remove all position of debtToken vault.\",\"params\":{\"debtToken\":\"debtToken Address (not vault address)\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"minDebtInBase\":{\"details\":\"min debtAmount in EVMOS (base token)\"},\"positionIdOf\":{\"details\":\"userAddress => vaultAddress => positionId (array Index of position)\"},\"positions\":{\"details\":\"vaultAddress => Position[]\"},\"reservedPool\":{\"details\":\"EVMOS amount reserved by Protocol\"},\"totalAmount\":{\"details\":\"kor) \\uc720\\uc800\\uac00 \\uc608\\uce58\\ud55c \\uae08\\uc561 + auto-compound\\ub41c \\uae08\\uc561\"},\"totalShare\":{\"details\":\"kor) auto-compound\\ub418\\uc5b4\\ub3c4 totalShare\\ub294 \\ubcc0\\ud558\\uc9c0 \\uc54a\\uc74c.  \\uc720\\uc800\\ub294 \\uc608\\uce58\\ud558\\ub294 \\uc2dc\\uc810\\uc5d0 (\\uc608\\uce58 \\uae08\\uc561/totalAmount) * totalShare\\uc5d0 \\ud574\\ub2f9\\ud558\\ub294 share\\ub97c \\ubc1b\\uc74c.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accrue(uint256)\":{\"notice\":\"kor) \\uc218\\uc775 \\ubd84\\ubc30 \\uc21c\\uc11c 1. \\ud504\\ub85c\\ud1a0\\ucf5c(Stayking) \\ub9e4\\ucd9c -> \\uc804\\uccb4 reward \\uc911 (reservedBps / 100)% \\ub9cc\\ud07c 2. Vault Interest(\\uc815\\uaddc \\uc774\\uc790 calc by interestModel) (1) \\\"\\uc804\\uccb4 reward \\uc911 N%\\\"\\uac00 \\uc544\\ub2cc \\uace0\\uc815\\ub41c \\uc591\\uc774\\ubbc0\\ub85c, \\ub0a8\\uc740 reward\\ub85c\\ub294 interest\\ub97c \\uc9c0\\uae09\\ud558\\uc9c0 \\ubabb\\ud560 \\uc218 \\uc788\\ub2e4. \\uc774 \\uacbd\\uc6b0, (\\uc804\\uccb4 reward - \\ub9e4\\ucd9c) \\uc804\\ub7c9\\uc744 Vault Interest\\ub85c \\uc9c0\\uae09. (2) \\uc815\\uc0c1\\uc801\\uc778 \\uacbd\\uc6b0 (\\ub9e4\\ucd9c\\uc744 \\uc81c\\uc678\\ud55c) reward\\uac00 Vault Interest\\ubcf4\\ub2e4 \\ud06c\\ub2e4. 3. Vault reward / Reinvested Amount 2-(2)\\uc758 \\uacbd\\uc6b0 reward\\uc5d0\\uc11c \\ub9e4\\ucd9c/\\uc774\\uc790\\ub97c \\uc81c\\ud558\\uace0 \\ub0a8\\uc740 \\uae08\\uc561 \\uc911 (vaultRewardBps / 100)%\\ub294 Vault\\uc5d0 \\ubcf4\\ub108\\uc2a4 reward\\ub85c \\uc9c0\\uae09\\ud558\\uace0, \\ub098\\uba38\\uc9c0\\ub294 Reinvest\\ud55c\\ub2e4.\"},\"amountToShare(uint256)\":{\"notice\":\"\\uc720\\uc800\\ub294 \\uc608\\uce58\\ud558\\ub294 \\uc2dc\\uc810\\uc5d0 (\\uc608\\uce58 \\uae08\\uc561 / totalAmount) * totalShare\\uc5d0 \\ud574\\ub2f9\\ud558\\ub294 share\\ub97c \\ubc1b\\uc74c.\"},\"changePosition(address,int256,int256,uint256)\":{\"notice\":\"change position value case 1. equityInBaseChanged > 0 - increase position value (stake more) - decrease debt ratio case 2. equityInBaseChanged < 0 - decrease position value (partial close) - increase debt ratio case 3. debtInBaseChanged > 0 (borrow more debt) - increase position value (stake more) - increase debt ratio case 4. debtInBaseChanged < 0 (repay debt by unstaking) - decrease position value (partial) - decrease debt ratio case 5. repaidDebt > 0 or repaidDebtInBase > 0 (repay debt with user's own token/EVMOS) - position value not changes (not call stake/unstake function) - decrease debt ratioIf equityInBaseChanged(=A) > 0 and debtInBaseChanged(=B) < 0, it is inefficient. e.g. A = 100 and B = -50, 50 EVMOS is Locked at uEVMOS. it produces the same result as if A = 50 and C = 50. (both increases equity by 50 EVMOS and repay debt by 50 EVMOS) Similarly, the case where equityInBaseChanged < 0 and debtInBaseChanged > 0 are also inefficient. So, we revert all cases where equityInBaseChanged * debtInBaseChanged < 0.\"},\"removePosition(address)\":{\"notice\":\"kor) \\ubd80\\ucc44\\ube44\\uc728\\uc774 100%\\uac00 \\ub118\\uc5b4\\uac00\\uba74 \\ud3ec\\uc9c0\\uc158\\uc744 \\uc9c1\\uc811 \\uc885\\ub8cc\\ud560 \\uc218 \\uc5c6\\ub2e4. -> \\uac15\\uc81c \\uccad\\uc0b0\\ub9cc \\uac00\\ub2a5.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stayking.sol\":\"Stayking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Stayking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport 'hardhat/console.sol';\\nimport './interface/IStayking.sol';\\nimport './interface/IVault.sol';\\nimport './interface/ISwapHelper.sol';\\nimport './interface/IUnbondedEvmos.sol';\\nimport './lib/utils/SafeToken.sol';\\nimport './lib/OwnableUpgradeable.sol';\\nimport './lib/ReentrancyGuardUpgradeable.sol';\\n\\ncontract Stayking is IStayking, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    address private constant BASE_TOKEN = address(0);\\n\\n    event Stake(\\n        address indexed delegator,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 share\\n    );\\n    event Unstake(\\n        address indexed delegator,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 share\\n    );\\n    event AddPosition(\\n        address indexed user,\\n        address indexed vault,\\n        uint256 equity,\\n        uint256 debtInBase,\\n        uint256 debt,\\n        uint256 share\\n    );\\n    event RemovePosition(\\n        address indexed user,\\n        address indexed vault,\\n        uint256 equity,\\n        uint256 debtInBase,\\n        uint256 debt,\\n        uint256 share\\n    );\\n    event PositionChanged(\\n        address indexed user,\\n        address indexed vault,\\n        uint256 amount,\\n        uint256 share,\\n        uint256 debt\\n    );\\n    event Kill(\\n        address indexed killer,\\n        address indexed user,\\n        address vault,\\n        uint256 equity,\\n        uint256 debtInBase,\\n        uint256 debt,\\n        uint256 share\\n    );\\n    event Accrue(\\n        address indexed delegator,\\n        uint256 accrued,\\n        uint256 totalStaked\\n    );\\n\\n    // Operation Events\\n    event AddVault(address token, address vault);\\n    event ChangeDelegator(address delegator);\\n    event UpdateVault(address token, address vault);\\n    event UpdateConfigs(\\n        uint256 minDebtInBase,\\n        uint256 reservedBps,\\n        uint256 vaultRewardBps,\\n        uint256 killFactorBps,\\n        uint256 liquidateDebtFactorBps,\\n        uint256 liquidationFeeBps\\n    );\\n    event ChangeUEVMOS(address uEVMOS);\\n\\n    address public delegator;\\n    mapping(address => bool) public whitelistedKiller;\\n\\n    mapping(address => address) public override tokenToVault;\\n    address[] public vaults;\\n\\n    /// @dev kor) \\uc720\\uc800\\uac00 \\uc608\\uce58\\ud55c \\uae08\\uc561 + auto-compound\\ub41c \\uae08\\uc561\\n    uint256 public override totalAmount;\\n    /// @dev kor) auto-compound\\ub418\\uc5b4\\ub3c4 totalShare\\ub294 \\ubcc0\\ud558\\uc9c0 \\uc54a\\uc74c.\\n    ///  \\uc720\\uc800\\ub294 \\uc608\\uce58\\ud558\\ub294 \\uc2dc\\uc810\\uc5d0 (\\uc608\\uce58 \\uae08\\uc561/totalAmount) * totalShare\\uc5d0 \\ud574\\ub2f9\\ud558\\ub294 share\\ub97c \\ubc1b\\uc74c.\\n    uint256 public override totalShare;\\n\\n    /// @dev min debtAmount in EVMOS (base token)\\n    uint256 public override minDebtInBase;\\n    uint256 public override reservedBps;\\n    uint256 public override vaultRewardBps;\\n    uint256 public override killFactorBps;\\n    uint256 public override liquidateDebtFactorBps;\\n    uint256 public override liquidationFeeBps;\\n\\n    /// @dev EVMOS amount reserved by Protocol\\n    uint256 public reservedPool;\\n\\n    IUnbondedEvmos public uEVMOS;\\n\\n    struct Position {\\n        address user;\\n        /// @dev totalShare * (equity + debtInBase) / totalAmount\\n        uint256 share;\\n    }\\n\\n    /// @dev userAddress => vaultAddress => positionId (array Index of position)\\n    mapping(address => mapping(address => uint256)) public positionIdOf;\\n    /// @dev vaultAddress => Position[]\\n    mapping(address => Position[]) public positions;\\n    mapping(address => uint256) public positionsLengthOf;\\n\\n    // debt To Vault\\n    mapping(address => uint256) public totalDebtOf;\\n\\n    /*************\\n     * Modifiers *\\n     **************/\\n\\n    modifier onlyDelegator() {\\n        require(\\n            // whitelistedDelegator[msg.sender],\\n            msg.sender == delegator,\\n            'Stayking: Not whitelisted delegator.'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyKiller() {\\n        require(\\n            whitelistedKiller[msg.sender],\\n            'Stayking: Not whitelisted Killer.'\\n        );\\n        _;\\n    }\\n\\n    function __Stayking_init(address delegator_, address uEVMOS_)\\n        external\\n        initializer\\n    {\\n        // todo\\n        liquidateDebtFactorBps = 10000;\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        // @TODO policy\\n        updateConfigs(\\n            1e16, // minDebtInBase (0.01EVMOS)\\n            3000, // reservedBps\\n            2000, // vaultRewardBps\\n            7500, // killFactorBps\\n            7500, // liquidateDebtFactorBps\\n            500 // liquidationFeeBps\\n        );\\n\\n        uEVMOS = IUnbondedEvmos(uEVMOS_);\\n        changeDelegator(delegator_);\\n        whitelistedKiller[delegator_] = true;\\n    }\\n\\n    /**********************\\n     * Operate Functions *\\n     ***********************/\\n\\n    function changeDelegator(address _delegator) public override onlyOwner {\\n        delegator = _delegator;\\n        emit ChangeDelegator(_delegator);\\n    }\\n\\n    function changeUnbondedEvmos(address _uevmos) public onlyOwner {\\n        uEVMOS = IUnbondedEvmos(_uevmos);\\n        emit ChangeUEVMOS(_uevmos);\\n    }\\n\\n    function updateVault(address token, address vault)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        address beforeVault = tokenToVault[token];\\n\\n        if (beforeVault == address(0)) {\\n            vaults.push(vault);\\n            emit AddVault(token, vault);\\n        } else {\\n            require(\\n                IVault(beforeVault).totalDebtAmount() == 0,\\n                'updateVault: Debt remains on the existing vault.'\\n            );\\n\\n            uint256 vaultsLength = vaults.length;\\n            bool vaultReplaced = false;\\n            for (uint256 i = 0; i < vaultsLength; i++) {\\n                if (vaults[i] == beforeVault) {\\n                    vaults[i] = vault;\\n                    vaultReplaced = true;\\n                    break;\\n                }\\n            }\\n            assert(vaultReplaced);\\n            emit UpdateVault(token, vault);\\n        }\\n\\n        tokenToVault[token] = vault;\\n        // push null position\\n        positions[vault].push(Position({user: address(0), share: 0}));\\n\\n        positionsLengthOf[vault] = 1;\\n    }\\n\\n    function updateConfigs(\\n        uint256 _minDebtInBase,\\n        uint256 _reservedBps,\\n        uint256 _vaultRewardBps,\\n        uint256 _killFactorBps,\\n        uint256 _liquidateDebtFactorBps,\\n        uint256 _liquidationFeeBps\\n    ) public onlyOwner {\\n        minDebtInBase = _minDebtInBase;\\n        reservedBps = _reservedBps;\\n        vaultRewardBps = _vaultRewardBps;\\n        killFactorBps = _killFactorBps;\\n        liquidateDebtFactorBps = _liquidateDebtFactorBps;\\n        liquidationFeeBps = _liquidationFeeBps;\\n        emit UpdateConfigs(\\n            _minDebtInBase,\\n            _reservedBps,\\n            _vaultRewardBps,\\n            _killFactorBps,\\n            _liquidateDebtFactorBps,\\n            _liquidationFeeBps\\n        );\\n    }\\n\\n    function updateWhitelistedKillerStatus(address[] calldata killers, bool ok)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < killers.length; i++) {\\n            whitelistedKiller[killers[i]] = ok;\\n        }\\n    }\\n\\n    /***********************\\n     * Private Functions *\\n     ************************/\\n    function _stake(Position storage p, uint256 amount)\\n        private\\n        returns (uint256 share)\\n    {\\n        share = amountToShare(amount);\\n        p.share += share;\\n        totalAmount += amount;\\n        totalShare += share;\\n        // send EVMOS to delegator\\n        SafeToken.safeTransferEVMOS(delegator, amount);\\n\\n        emit Stake(delegator, p.user, amount, share);\\n    }\\n\\n    /**\\n     @param p           Position\\n     @param vault       owed by the user\\n     @param amount      unstaked amount\\n     @param repaidDebt  repaid amount in token\\n     @param fee         unstake fee for force liquidation(kill)\\n\\n     @notice\\n     kor) Unstake\\ud560 \\ub54c, \\uac00\\uaca9\\ubcc0\\ub3d9 + \\ub300\\ucd9c\\uc774\\uc790\\ub85c \\uc778\\ud574 \\ube5a\\uc774 \\ub298\\uc5b4\\ub098\\ub294 \\uac83\\uc5d0 \\ub300\\ube44\\ud558\\uc5ec \\uc790\\uae30\\uc790\\ubcf8\\ub3c4 \\uc77c\\ubd80 unstake\\ud574\\uc57c \\ud55c\\ub2e4.\\n     kor) fee > 0\\uc774\\uba74 uEVMOS\\ub97c unlock\\ud560 \\ub54c fee\\ub9cc\\ud07c\\uc740 Stayking \\ucee8\\ud2b8\\ub799\\ud2b8 \\uba85\\uc758\\ub85c \\ub2ec\\uc544\\ub193\\ub294\\ub2e4.\\n     */\\n    function _unstake(\\n        Position storage p,\\n        address vault,\\n        uint256 amount,\\n        uint256 repaidDebt,\\n        uint256 fee\\n    ) private {\\n        uint256 share = amountToShare(amount);\\n\\n        p.share -= share;\\n        totalAmount -= amount;\\n        totalShare -= share;\\n\\n        uint256 pendingDebtShare = repaidDebt > 0\\n            ? IVault(vault).pendRepay(p.user, repaidDebt)\\n            : 0;\\n\\n        // uEVMOS.mintLockedToken(p.user, vault, amount - fee, pendingDebtShare);\\n        // if (fee > 0) {\\n        //     // Stayking\\uc5d0 \\ub300\\ud574 uEVMOS\\ub97c lock\\n        //     uEVMOS.mintLockedToken(address(this), vault, fee, 0);\\n        // }\\n\\n        emit Unstake(delegator, p.user, amount, share);\\n    }\\n\\n    function _isHealthy(\\n        address vault,\\n        uint256 share,\\n        uint256 debt\\n    ) private view returns (bool healthy, uint256 debtInBase) {\\n        debtInBase = IVault(vault).getBaseIn(debt);\\n        healthy = debtInBase * 1e4 < shareToAmount(share) * killFactorBps;\\n    }\\n\\n    /******************\\n     * Util Functions *\\n     *******************/\\n    /// @notice\\n    /// \\uc720\\uc800\\ub294 \\uc608\\uce58\\ud558\\ub294 \\uc2dc\\uc810\\uc5d0 (\\uc608\\uce58 \\uae08\\uc561 / totalAmount) * totalShare\\uc5d0 \\ud574\\ub2f9\\ud558\\ub294 share\\ub97c \\ubc1b\\uc74c.\\n    function amountToShare(uint256 amount) public view returns (uint256) {\\n        return\\n            (totalAmount == 0) ? amount : (totalShare * amount) / totalAmount;\\n    }\\n\\n    function shareToAmount(uint256 share) public view returns (uint256) {\\n        return (totalShare == 0) ? share : (totalAmount * share) / totalShare;\\n    }\\n\\n    /******************************\\n     * Interface implementations *\\n     *******************************/\\n    function debtAmountOf(address user, address vault)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return IVault(vault).debtAmountOf(user);\\n    }\\n\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @param equity       equityAmount in EVMOS\\n    /// @param debtInBase   debtAmount in EVMOS\\n    function addPosition(\\n        address debtToken,\\n        uint256 equity,\\n        uint256 debtInBase\\n    ) public payable override {\\n        address vault = tokenToVault[debtToken];\\n        require(\\n            positionIdOf[msg.sender][vault] == 0,\\n            'addPosition: already have position'\\n        );\\n        require(equity == msg.value, 'addPosition: msg.value != equity');\\n\\n        uint256 amount = equity + debtInBase;\\n        require(\\n            debtInBase * 1e4 < amount * killFactorBps,\\n            'addPosition: bad debt, cannot open position'\\n        );\\n\\n        // borrow token from vault\\n        // debtInBase == 0 -> 1x leverage\\n        uint256 debt = debtInBase > 0\\n            ? IVault(vault).loan(msg.sender, debtInBase)\\n            : 0;\\n\\n        positions[vault].push(Position({user: msg.sender, share: 0}));\\n\\n        uint256 positionId = positionsLengthOf[vault];\\n        positionsLengthOf[vault] += 1;\\n        positionIdOf[msg.sender][vault] = positionId;\\n\\n        uint256 share = _stake(positions[vault][positionId], amount);\\n\\n        emit AddPosition(msg.sender, vault, equity, debtInBase, debt, share);\\n    }\\n\\n    /// @dev remove all position of debtToken vault.\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @notice kor) \\ubd80\\ucc44\\ube44\\uc728\\uc774 100%\\uac00 \\ub118\\uc5b4\\uac00\\uba74 \\ud3ec\\uc9c0\\uc158\\uc744 \\uc9c1\\uc811 \\uc885\\ub8cc\\ud560 \\uc218 \\uc5c6\\ub2e4. -> \\uac15\\uc81c \\uccad\\uc0b0\\ub9cc \\uac00\\ub2a5.\\n    function removePosition(address debtToken) public override {\\n        address vault = tokenToVault[debtToken];\\n        Position storage p = positions[vault][positionIdOf[msg.sender][vault]];\\n        require(p.share > 0, 'removePosition: No position for this token');\\n\\n        uint256 debtAmount = debtAmountOf(msg.sender, vault);\\n        // 1. check if user can repay debt\\n        /// @dev amount in EVMOS that user have to repay\\n        uint256 currentDebtInBase = IVault(vault).getBaseIn(debtAmount);\\n\\n        uint256 unstakedAmount = shareToAmount(p.share);\\n        // unstake all\\n        _unstake(p, vault, unstakedAmount, debtAmount, 0);\\n\\n        /**\\n         kor)\\n         \\uc720\\uc800\\uac00 \\uc2a4\\uc2a4\\ub85c \\ud3ec\\uc9c0\\uc158\\uc744 \\uc885\\ub8cc\\ud560 \\ub54c,\\n         \\ubd80\\ucc44\\ube44\\uc728\\uc774 100% \\uc774\\ub0b4\\uc778 \\uacbd\\uc6b0\\ub9cc \\ud3ec\\uc9c0\\uc158 \\uc885\\ub8cc \\uac00\\ub2a5\\ud558\\ub3c4\\ub85d \\uc81c\\ud55c\\n         */\\n        require(\\n            unstakedAmount >= currentDebtInBase,\\n            'removePosition: Bad debt'\\n        );\\n\\n        emit RemovePosition(\\n            msg.sender,\\n            vault,\\n            unstakedAmount - currentDebtInBase, // equity\\n            currentDebtInBase, // debt\\n            debtAmount,\\n            p.share\\n        );\\n\\n        positionIdOf[msg.sender][vault] = 0; // kor) positionId \\ucd08\\uae30\\ud654\\n    }\\n\\n    function abs(int256 x) private pure returns (int256) {\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    function _adjustChangePositionArgs(\\n        int256 equityInBaseChanged,\\n        int256 debtInBaseChanged\\n    )\\n        private\\n        pure\\n        returns (\\n            bool isStaking,\\n            uint256 equity,\\n            uint256 debtInBase,\\n            int256 repaidDebtChanged\\n        )\\n    {\\n        // kor) \\ub17c\\uc758 \\ud544\\uc694\\n        require(\\n            equityInBaseChanged * debtInBaseChanged >= 0,\\n            'equityInBaseChanged * debtInBaseChanged < 0'\\n        );\\n\\n        /**\\n            @TODO\\n            \\uc544\\ub798 if\\ubb38\\uc740 equityInBaseChanged * debtInBaseChanged < 0 \\ucf00\\uc774\\uc2a4 \\uac00\\ub2a5\\ud55c \\uacbd\\uc6b0\\uc5d0 \\uc0ac\\uc6a9\\ud569\\ub2c8\\ub2e4. (\\uc544\\uc9c1 \\ubbf8\\uc644\\uc131)\\n            \\ubc14\\ub85c \\uc704 require\\ubb38\\uc744 \\uc0ac\\uc6a9\\ud558\\uac8c \\ub418\\uba74\\n            (equityInBaseChanged * debtInBaseChanged < 0\\uc778 \\ucf00\\uc774\\uc2a4\\ub97c \\ud5c8\\uc6a9\\ud558\\uc9c0 \\uc54a\\uac8c \\ub418\\uba74),\\n            \\uc544\\ub798 if\\ubb38\\uc740 \\uc0ad\\uc81c\\ud558\\uace0 else\\ubb38 \\ub0b4 \\ub85c\\uc9c1\\ub9cc \\uc0ac\\uc6a9\\ud558\\uba74 \\ub429\\ub2c8\\ub2e4. \\ub610\\ud55c \\uadf8 \\uacbd\\uc6b0\\uc5d0\\ub294 repaidDebtChanged\\uac12\\ub3c4 \\uace0\\ub824\\ud558\\uc9c0 \\uc54a\\uc544\\ub3c4 \\ub429\\ub2c8\\ub2e4.\\n            \\uadf8\\ub7f0 \\uacbd\\uc6b0\\ub77c\\uba74, \\uc774 _adjustChangePositionArgs \\ud568\\uc218 \\uc804\\uccb4\\ub97c changePosition \\ud568\\uc218\\uc5d0 \\ub123\\ub294 \\uac8c \\uc88b\\uc744 \\uac83 \\uac19\\uc2b5\\ub2c8\\ub2e4.\\n         */\\n        if (equityInBaseChanged * debtInBaseChanged < 0) {\\n            // current, unreachable\\n            bool isAddingEquity = equityInBaseChanged > 0;\\n            equity = uint256(abs(equityInBaseChanged));\\n            debtInBase = uint256(abs(debtInBaseChanged));\\n\\n            (isStaking, equity, debtInBase, repaidDebtChanged) = equity >\\n                debtInBase\\n                ? (\\n                    isAddingEquity,\\n                    equity - debtInBase,\\n                    uint256(0),\\n                    isAddingEquity ? int256(debtInBase) : -int256(debtInBase)\\n                )\\n                : (\\n                    !isAddingEquity,\\n                    uint256(0),\\n                    debtInBase - equity,\\n                    isAddingEquity ? int256(equity) : -int256(equity)\\n                );\\n        } else {\\n            equity = uint256(abs(equityInBaseChanged));\\n            debtInBase = uint256(abs(debtInBaseChanged));\\n            isStaking = (equityInBaseChanged > 0 || debtInBaseChanged > 0);\\n        }\\n    }\\n\\n    /** @notice change position value\\n        case 1. equityInBaseChanged > 0\\n            - increase position value (stake more)\\n            - decrease debt ratio\\n        case 2. equityInBaseChanged < 0\\n            - decrease position value (partial close)\\n            - increase debt ratio\\n        case 3. debtInBaseChanged > 0 (borrow more debt)\\n            - increase position value (stake more)\\n            - increase debt ratio\\n        case 4. debtInBaseChanged < 0 (repay debt by unstaking)\\n            - decrease position value (partial)\\n            - decrease debt ratio\\n        case 5. repaidDebt > 0 or repaidDebtInBase > 0 (repay debt with user's own token/EVMOS)\\n            - position value not changes (not call stake/unstake function)\\n            - decrease debt ratio\\n        @dev repayDebtInBase = msg.value - changeEquityInBase\\n        @dev User should approve this first\\n        @dev if msg.value > 0, changeEquityInBase >= 0\\n             since msg.value = changeEquityInBase + repayDebtInBase\\n        @notice\\n        If equityInBaseChanged(=A) > 0 and debtInBaseChanged(=B) < 0, it is inefficient.\\n            e.g. A = 100 and B = -50, 50 EVMOS is Locked at uEVMOS.\\n            it produces the same result as if A = 50 and C = 50.\\n        (both increases equity by 50 EVMOS and repay debt by 50 EVMOS)\\n        Similarly, the case where equityInBaseChanged < 0 and debtInBaseChanged > 0 are also inefficient.\\n        So, we revert all cases where equityInBaseChanged * debtInBaseChanged < 0.\\n     */\\n    function changePosition(\\n        address debtToken,\\n        int256 equityInBaseChanged,\\n        int256 debtInBaseChanged,\\n        uint256 repaidDebt\\n    ) public payable {\\n        address vault = tokenToVault[debtToken];\\n        uint256 positionId = positionIdOf[msg.sender][vault];\\n        require(positionId > 0, 'changePosition: no position');\\n\\n        Position storage p = positions[vault][positionId];\\n\\n        uint256 repaidDebtInBase;\\n        if (equityInBaseChanged >= 0) {\\n            // stake more with own equity\\n            require(\\n                msg.value >= uint256(equityInBaseChanged),\\n                'changePosition: Not enough msg.value'\\n            );\\n            unchecked {\\n                repaidDebtInBase = msg.value - uint256(equityInBaseChanged);\\n            }\\n        }\\n\\n        (\\n            bool isStaking,\\n            uint256 equity,\\n            uint256 debtInBase,\\n            int256 repaidDebtChanged\\n        ) = _adjustChangePositionArgs(equityInBaseChanged, debtInBaseChanged);\\n\\n        if (repaidDebtChanged >= 0) {\\n            repaidDebtInBase += uint256(repaidDebtChanged);\\n        } else {\\n            if (repaidDebtInBase >= uint256(-repaidDebtChanged)) {\\n                repaidDebtInBase -= uint256(-repaidDebtChanged);\\n            } else {\\n                repaidDebtInBase = 0;\\n                repaidDebtChanged += int256(repaidDebtInBase);\\n            }\\n        }\\n\\n        if (isStaking) {\\n            if (debtInBase > 0) {\\n                IVault(vault).loan(msg.sender, debtInBase);\\n            }\\n            _stake(p, equity + debtInBase);\\n        } else {\\n            // TODO repaidDebtChanged ?\\n            uint256 unstakedAmount = equity +\\n                debtInBase +\\n                (repaidDebtChanged < 0 ? uint256(-repaidDebtChanged) : 0);\\n            require(\\n                debtInBase * 1E4 <= unstakedAmount * liquidateDebtFactorBps,\\n                'unstake: too much debt in unstaked EVMOS'\\n            );\\n\\n            _unstake(\\n                p,\\n                vault,\\n                unstakedAmount,\\n                IVault(vault).getTokenOut(debtInBase),\\n                0\\n            );\\n        }\\n\\n        /******************************************\\n           Repay Debt (position value not change)\\n         ******************************************/\\n        if (repaidDebt > 0) {\\n            // repay debt for token, approve should be proceed\\n            SafeToken.safeTransferFrom(\\n                debtToken,\\n                msg.sender,\\n                address(this),\\n                repaidDebt\\n            );\\n            IVault(vault).repayInToken(msg.sender, repaidDebt);\\n        }\\n        if (repaidDebtInBase > 0) {\\n            // repay debt for EVMOS\\n            IVault(vault).repayInBase{value: repaidDebtInBase}(msg.sender, 1);\\n        }\\n\\n        {\\n            uint256 debtAmount = debtAmountOf(msg.sender, vault);\\n            (bool healthy, ) = _isHealthy(vault, p.share, debtAmount);\\n            require(healthy, 'changePosition: bad debt');\\n        }\\n\\n        emit PositionChanged(\\n            msg.sender,\\n            vault,\\n            shareToAmount(p.share),\\n            p.share,\\n            debtAmountOf(msg.sender, vault)\\n        );\\n    }\\n\\n    /**\\n        @dev returns position's value & debt value\\n        position value: positionValueInBase\\n        equity value: positionValueInBase - debtInBase\\n        debt value: debtInBase\\n        debt ratio: debtInBase / positionValueInBase * 100(%)\\n        kill factor: killFactorBps / 100\\n        safety buffer: (kill factor) - (debt ratio)\\n     */\\n    function positionInfo(address user, address debtToken)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 positionValueInBase,\\n            uint256 debtInBase,\\n            uint256 debt,\\n            uint256 positionId\\n        )\\n    {\\n        address vault = tokenToVault[debtToken];\\n        positionId = positionIdOf[user][vault];\\n        Position memory p = positions[vault][positionId];\\n\\n        positionValueInBase = shareToAmount(p.share);\\n\\n        debt = IVault(vault).debtAmountOf(user);\\n        debtInBase = IVault(vault).getBaseIn(debt);\\n    }\\n\\n    function isKillable(address debtToken, uint256 positionId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        address vault = tokenToVault[debtToken];\\n        Position memory p = positions[vault][positionId];\\n\\n        if (p.share == 0)\\n            /// @dev removed position\\n            return false;\\n        (bool healthy, ) = _isHealthy(\\n            vault,\\n            p.share,\\n            debtAmountOf(p.user, vault)\\n        );\\n        return !healthy;\\n    }\\n\\n    // if position is killed, fee will be charged.\\n    function kill(address debtToken, uint256 positionId)\\n        public\\n        override\\n        onlyKiller\\n    {\\n        address vault = tokenToVault[debtToken];\\n        Position storage p = positions[vault][positionId];\\n        require(p.share > 0, 'kill: removed position');\\n\\n        uint256 debt = debtAmountOf(p.user, vault);\\n        (bool healthy, uint256 debtInBase) = _isHealthy(vault, p.share, debt);\\n        require(!healthy, 'kill: still safe position.');\\n\\n        // unstaked amount\\n        uint256 amount = shareToAmount(p.share);\\n        uint256 liquidationFee = (amount * liquidationFeeBps) / 1E4;\\n        /**\\n         kor)\\n         \\uac15\\uc81c \\uccad\\uc0b0 \\uc2dc, \\uc77c\\ub2e8 Stayking \\ucee8\\ud2b8\\ub799\\ud2b8\\uc5d0\\uc11c liquidationFee\\ub97c \\uba3c\\uc800 \\ub5bc\\uc5b4\\uac00\\ub294 \\uac83\\uc73c\\ub85c \\uc2dc\\uc791\\ud588\\uc2b5\\ub2c8\\ub2e4.\\n         \\ub9cc\\uc57d liquidationFee = 5%\\uc778 \\uacbd\\uc6b0, unstake\\ub41c \\uc774\\ud6c4 pend\\ub41c \\ud3ec\\uc9c0\\uc158\\uc5d0 \\ub300\\ud574\\n         \\ubd80\\ucc44\\ube44\\uc728\\uc774 95%\\ub9cc \\ub118\\uc5b4\\uac00\\ub3c4 lender\\uac00 \\uc190\\ud574\\ub97c \\ubcf4\\uac8c \\ub429\\ub2c8\\ub2e4.\\n         _unstake\\uc758 4\\ubc88\\uc9f8 \\ud30c\\ub77c\\ubbf8\\ud130 \\uac12(\\uc804\\uccb4 unstake \\ub418\\ub294 \\uc591 \\uc911 \\ubd80\\ucc44\\uac00 \\ucc28\\uc9c0\\ud558\\ub294 \\ube44\\uc728)\\uacfc\\n         uEVMOS.mintLockedToken\\uc758 4\\ubc88\\uc9f8 \\ud30c\\ub77c\\ubbf8\\ud130 \\uac12\\uc744 \\uc870\\uc815\\ud558\\uc5ec \\uc774\\ub97c \\ud574\\uc18c\\ud560 \\uc218 \\uc788\\uc2b5\\ub2c8\\ub2e4.\\n         */\\n        _unstake(p, vault, amount, debt, liquidationFee);\\n\\n        emit Kill(\\n            msg.sender,\\n            p.user,\\n            vault,\\n            debtInBase > amount ? 0 : amount - debtInBase,\\n            debtInBase,\\n            debt,\\n            p.share\\n        );\\n\\n        positionIdOf[p.user][vault] = 0; // kor) positionId \\ucd08\\uae30\\ud654\\n    }\\n\\n    /***********************\\n     * Only for Delegator *\\n     ***********************/\\n    /// @param reward  claimed staking reward\\n    function getAccruedValue(uint256 reward)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 reserved = (reward * reservedBps) / 1E4;\\n\\n        uint256 vaultsLength = vaults.length;\\n        uint256 interest = 0;\\n        for (uint256 i = 0; i < vaultsLength; i++) {\\n            interest += IVault(vaults[i]).getInterestInBase();\\n        }\\n\\n        if (reserved + interest >= reward) {\\n            return reward;\\n        } else {\\n            return\\n                ((reward - reserved - interest) * (1E4 - vaultRewardBps)) / 1E4;\\n        }\\n    }\\n\\n    /**\\n     @dev msg.value = all of staking reward\\n     @param totalStaked  current total staked EVMOS (except staking reward)\\n     @notice kor) \\uc218\\uc775 \\ubd84\\ubc30 \\uc21c\\uc11c\\n        1. \\ud504\\ub85c\\ud1a0\\ucf5c(Stayking) \\ub9e4\\ucd9c\\n          -> \\uc804\\uccb4 reward \\uc911 (reservedBps / 100)% \\ub9cc\\ud07c\\n        2. Vault Interest(\\uc815\\uaddc \\uc774\\uc790 calc by interestModel)\\n            (1) \\\"\\uc804\\uccb4 reward \\uc911 N%\\\"\\uac00 \\uc544\\ub2cc \\uace0\\uc815\\ub41c \\uc591\\uc774\\ubbc0\\ub85c, \\ub0a8\\uc740 reward\\ub85c\\ub294 interest\\ub97c \\uc9c0\\uae09\\ud558\\uc9c0 \\ubabb\\ud560 \\uc218 \\uc788\\ub2e4.\\n                \\uc774 \\uacbd\\uc6b0, (\\uc804\\uccb4 reward - \\ub9e4\\ucd9c) \\uc804\\ub7c9\\uc744 Vault Interest\\ub85c \\uc9c0\\uae09.\\n            (2) \\uc815\\uc0c1\\uc801\\uc778 \\uacbd\\uc6b0 (\\ub9e4\\ucd9c\\uc744 \\uc81c\\uc678\\ud55c) reward\\uac00 Vault Interest\\ubcf4\\ub2e4 \\ud06c\\ub2e4.\\n        3. Vault reward / Reinvested Amount\\n            2-(2)\\uc758 \\uacbd\\uc6b0 reward\\uc5d0\\uc11c \\ub9e4\\ucd9c/\\uc774\\uc790\\ub97c \\uc81c\\ud558\\uace0 \\ub0a8\\uc740 \\uae08\\uc561 \\uc911 (vaultRewardBps / 100)%\\ub294\\n            Vault\\uc5d0 \\ubcf4\\ub108\\uc2a4 reward\\ub85c \\uc9c0\\uae09\\ud558\\uace0, \\ub098\\uba38\\uc9c0\\ub294 Reinvest\\ud55c\\ub2e4.\\n     */\\n    function accrue(uint256 totalStaked) public payable override onlyDelegator {\\n        require(\\n            totalStaked >= totalAmount,\\n            'accrue: totalStaked < before totalAmount'\\n        );\\n        require(msg.value > 0, 'accrue: You should send claimed EVMOS.');\\n\\n        // 1. distribute to Protocol\\n        uint256 reserved = (msg.value * reservedBps) / 1E4;\\n        reservedPool += reserved;\\n\\n        // 2. pay interest to vaults\\n        uint256 sumOfInterests = 0;\\n        uint256 vaultsLength = vaults.length;\\n        /// @dev save interest for each vault\\n        uint256[] memory interestFor = new uint256[](vaultsLength);\\n        for (uint256 i = 0; i < vaultsLength; i++) {\\n            interestFor[i] = IVault(vaults[i]).getInterestInBase();\\n            sumOfInterests += interestFor[i];\\n        }\\n\\n        uint256 distributable = msg.value - reserved;\\n\\n        if (sumOfInterests == 0) {\\n            // no or tiny debt\\n            totalAmount += distributable;\\n            emit Accrue(msg.sender, distributable, totalAmount);\\n            return;\\n        }\\n\\n        // 2-(1): rewrad to repay interest for vaults is insufficient.\\n        // this case, totalAmount not changes (totalAmount = totalStaked)\\n        if (sumOfInterests >= distributable) {\\n            for (uint256 i = 0; i < vaultsLength; i++) {\\n                IVault vault = IVault(vaults[i]);\\n                uint256 interestInBase = (interestFor[i] * distributable) /\\n                    sumOfInterests;\\n                uint256 minPaidInterest = vault.getTokenOut(interestInBase);\\n                vault.payInterest{value: interestInBase}(minPaidInterest);\\n            }\\n\\n            emit Accrue(msg.sender, 0, totalAmount);\\n        }\\n        // 2-(2)\\n        else {\\n            uint256 distributed = reserved;\\n\\n            // calculate bonus reward for Vaults\\n            uint256 totalVaultReward = ((distributable - sumOfInterests) *\\n                vaultRewardBps) / 1E4;\\n            for (uint256 i = 0; i < vaultsLength; i++) {\\n                // kor) \\uac01 vault\\ubcc4 bonus\\uc591\\uc740 \\uac01 vault\\uac00 \\ubc1b\\ub294 \\uc774\\uc790\\uc218\\uc775\\uc758 \\uc591\\uc5d0 \\ube44\\ub840\\ud55c\\ub2e4.\\n                // assert sumOfInterests > 0\\n                uint256 interestWithReward = interestFor[i] +\\n                    ((totalVaultReward * interestFor[i]) / sumOfInterests);\\n                // value: accumulated interest + bonus reward\\n                IVault(vaults[i]).payInterest{value: interestWithReward}(\\n                    IVault(vaults[i]).accInterest()\\n                );\\n                distributed += interestWithReward;\\n            }\\n\\n            uint256 accrued = msg.value - distributed;\\n            if (accrued > 0) {\\n                totalAmount += accrued;\\n                SafeToken.safeTransferEVMOS(msg.sender, accrued);\\n            }\\n\\n            emit Accrue(msg.sender, accrued, totalAmount);\\n        }\\n    }\\n\\n    function claimReserves(address token, uint256 amount) external onlyOwner {\\n        if (token == address(0)) {\\n            SafeToken.safeTransferEVMOS(owner(), amount);\\n        } else {\\n            SafeToken.safeTransfer(token, owner(), amount);\\n        }\\n    }\\n\\n    /// @dev Fallback function to accept EVMOS.\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xfe8c3b8af9ff535952141fccc7e3c35cc12804d8cb4429e42f7d3964121d5402\",\"license\":\"MIT\"},\"contracts/interface/IStayking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/************************************************************\\n * @dev\\n * Glossary\\n * debt : debtAmount in borrowing token (e.g. OSMO, ATOM)\\n * debtInBase: debtAmount in EVMOS(Base Token)\\n *************************************************************/\\ninterface IStayking {\\n    function updateVault(address token, address vault) external;\\n\\n    function tokenToVault(address token) external view returns (address vault);\\n\\n    function changeDelegator(address delegator) external;\\n\\n    // function setWhitelistDelegatorStatus(address delegator, bool status) external;\\n\\n    /// @dev min debtAmount in EVMOS (base token)\\n    function minDebtInBase() external view returns (uint256);\\n\\n    function reservedBps() external view returns (uint256);\\n\\n    function vaultRewardBps() external view returns (uint256);\\n\\n    function totalAmount() external view returns (uint256);\\n\\n    function totalShare() external view returns (uint256);\\n\\n    function killFactorBps() external view returns (uint256);\\n\\n    function liquidateDebtFactorBps() external view returns (uint256);\\n\\n    function liquidationFeeBps() external view returns (uint256);\\n\\n    function debtAmountOf(address user, address vault)\\n        external\\n        view\\n        returns (uint256 debt);\\n\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @param equity       equityAmount in EVMOS\\n    /// @param debtInBase   debtAmount in EVMOS\\n    function addPosition(\\n        address debtToken,\\n        uint256 equity,\\n        uint256 debtInBase\\n    ) external payable;\\n\\n    /// @param debtToken    debtToken Address (not vault address)\\n    function removePosition(address debtToken) external;\\n\\n    function positionInfo(address user, address vault)\\n        external\\n        view\\n        returns (\\n            uint256 equityInBase,\\n            uint256 debtInBase,\\n            uint256 debt,\\n            uint256 positionId\\n        );\\n\\n    function isKillable(address debtToken, uint256 positionId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function kill(address debtToken, uint256 positionId) external;\\n\\n    /***********************\\n     * Only for Delegator *\\n     ***********************/\\n    function getAccruedValue(uint256 reward) external view returns (uint256);\\n\\n    function accrue(uint256 totalStaked) external payable;\\n}\",\"keccak256\":\"0x8adb1a818fec6715b025d1d707958cf53ba2f9bb44d982067521104ed03450ce\",\"license\":\"UNLICENSED\"},\"contracts/interface/ISwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/************************************************************\\n * @dev\\n * Glossary\\n * X : Input Token\\n * Y : Output Token\\n * Dx : Amount of Input Token\\n * Dy : Amount of Output Token\\n *************************************************************/\\ninterface ISwapHelper {\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) external view returns (uint256 dy);\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) external view returns (uint256 dx);\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 minDy\\n    ) external payable returns (uint256 dy);\\n}\\n\",\"keccak256\":\"0x3d1deef0d44180d8e6a8e1f75b94d73abbefd3a58aa58fecbb49e967e9548ad8\",\"license\":\"UNLICENSED\"},\"contracts/interface/IUnbondedEvmos.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\ninterface IUnbondedEvmos {\\n    function lastUnbondedAt() external view returns (uint256);\\n\\n    function unbondingInterval() external view returns (uint256);\\n\\n    function mintLockedToken(\\n        address to,\\n        address vault,\\n        uint256 amount,\\n        uint256 debtShare\\n    ) external;\\n\\n    function unlock() external;\\n\\n    function supplyUnbondedToken() external payable;\\n\\n    function isMinter(address account) external view returns (bool);\\n\\n    function updateMinterStatus(address account, bool status) external;\\n\\n    function getUnlockable(address account)\\n        external\\n        view\\n        returns (uint256 unlockable, uint256 debt);\\n\\n    function isKillable(uint256 lockedId) external returns (bool);\\n\\n    function kill(uint256 lockedId) external;\\n}\\n\",\"keccak256\":\"0x8f7141e11fd17befec85de72c9361af9e89a2f30e922a01111f27131211f7a5f\",\"license\":\"UNLICENSED\"},\"contracts/interface/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\ninterface IVault {\\n    function token() external returns (address);\\n\\n    function stayking() external returns (address);\\n\\n    function interestModel() external returns (address);\\n\\n    function totalAmount() external view returns (uint256);\\n\\n    function debtAmountOf(address user) external view returns (uint256);\\n\\n    function debtAmountInBase(address user) external view returns (uint256);\\n\\n    function totalStakedDebtAmount() external view returns (uint256);\\n\\n    function totalDebtAmount() external view returns (uint256);\\n\\n    function totalPendingDebtAmount() external view returns (uint256);\\n\\n    function totalPendingDebtShare() external view returns (uint256);\\n\\n    function accInterest() external view returns (uint256);\\n\\n    function minReservedBps() external view returns (uint256);\\n\\n    function lastAccruedAt() external view returns (uint256);\\n\\n    function utilizationRateBps() external view returns (uint256);\\n\\n    /// @dev denominator = 1E18\\n    function getInterestRate() external view returns (uint256);\\n\\n    function deposit(uint256 amount) external returns (uint256 share);\\n\\n    function withdraw(uint256 share) external returns (uint256 amount);\\n\\n    function getPendingDebt(address user) external view returns (uint256 debt);\\n\\n    function getPendingDebtInBase(address user)\\n        external\\n        view\\n        returns (uint256 debtInBase);\\n\\n    function getBaseIn(uint256 tokenOut) external view returns (uint256 baseIn);\\n\\n    function getBaseOut(uint256 tokenIn)\\n        external\\n        view\\n        returns (uint256 baseOut);\\n\\n    function getTokenIn(uint256 baseOut)\\n        external\\n        view\\n        returns (uint256 tokenIn);\\n\\n    function getTokenOut(uint256 baseIn)\\n        external\\n        view\\n        returns (uint256 tokenOut);\\n\\n    function pendingDebtAmountToShare(uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function pendingDebtShareToAmount(uint256 share)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /******************************\\n     * Only for Stayking Contract *\\n     ******************************/\\n    function loan(address user, uint256 debtInBase)\\n        external\\n        returns (uint256 debt);\\n\\n    function repayInToken(address user, uint256 debt) external;\\n\\n    function repayInBase(address user, uint256 minRepaid)\\n        external\\n        payable\\n        returns (uint256 repaid);\\n\\n    function takeDebtOwnership(address from, uint256 amount) external;\\n\\n    function getInterestInBase() external view returns (uint256);\\n\\n    function payInterest(uint256 minPaidInterest) external payable;\\n\\n    function pendRepay(address user, uint256 amount)\\n        external\\n        returns (uint256 pendingDebtShare);\\n\\n    function repayPendingDebt(address user) external payable returns (uint256);\\n\\n    function updateInterestModel(address newInterestModel) external;\\n\\n    function updateSwapHelper(address newSwapHelper) external;\\n\\n    function updateMinReservedBps(uint256 newMinReservedBps) external;\\n}\",\"keccak256\":\"0x549e1b210cf330abc68349abc4bcebd72ca025720709d7a585371f302040bce6\",\"license\":\"UNLICENSED\"},\"contracts/lib/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            'Address: insufficient balance'\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(\\n            success,\\n            'Address: unable to send value, recipient may have reverted'\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, 'Address: low-level call failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'Address: low-level call with value failed'\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'Address: insufficient balance for call'\\n        );\\n        require(isContract(target), 'Address: call to non-contract');\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                'Address: low-level static call failed'\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), 'Address: static call to non-contract');\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4db0e80a9f6be0e6cc29005bdced89709f84f6972c4299512d354d35499c1d55\",\"license\":\"MIT\"},\"contracts/lib/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\npragma solidity ^0.8.9;\\n\\nimport './Initializable.sol';\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {}\\n\\n    function __Context_init_unchained() internal onlyInitializing {}\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x2cbbdea05ab7bac8a99e0e05fdf1a700bb64abaa7ab21a967266cd040564bf8e\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\npragma solidity ^0.8.9;\\n\\nimport './AddressUpgradeable.sol';\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!AddressUpgradeable.isContract(address(this)) &&\\n                    _initialized == 1),\\n            'Initializable: contract is already initialized'\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            'Initializable: contract is already initialized'\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, 'Initializable: contract is not initializing');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, 'Initializable: contract is initializing');\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25e1abed20dc34b3e261aa95e0153fd01103d7a02b990958478cef2e2a22f94b\",\"license\":\"MIT\"},\"contracts/lib/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\npragma solidity ^0.8.9;\\n\\nimport './ContextUpgradeable.sol';\\nimport './Initializable.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            'Ownable: new owner is the zero address'\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x07c819de03529edd8eb6fa09c86ffcc248f3e27fe49193deceba6cf1d29153fb\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\npragma solidity ^0.8.9;\\nimport './Initializable.sol';\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, 'ReentrancyGuard: reentrant call');\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd44825ac51962af68748030d3861b54a96eaf5039ba71dbafe68e5e7cb430756\",\"license\":\"MIT\"},\"contracts/lib/utils/SafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary SafeToken {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            '!safeApprove'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            '!safeTransfer'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            '!safeTransferFrom'\\n        );\\n    }\\n\\n    function safeTransferEVMOS(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, '!safeTransferEVMOS');\\n    }\\n}\\n\",\"keccak256\":\"0xf9de084e8f082cf68034fccbfb1504cc7c5f086c484535decd5da7e881a60da2\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613303806100206000396000f3fe60806040526004361061021c5760003560e01c80638c64ea4a11610122578063c1be6677116100a5578063e031a8241161006c578063e031a824146106c7578063e4175aee146106dd578063f0e63edf146106fd578063f2fde38b14610713578063fc8389951461073357005b8063c1be667714610615578063ce9b793014610654578063cff07fd114610674578063d87cad6714610687578063df5ca1f8146106a757005b8063afd06b34116100e9578063afd06b341461056a578063b1ae5ed31461058a578063b2a2a96b146105aa578063bb94d3db146105ca578063bed06b0b1461060257005b80638c64ea4a146104af5780638da5cb5b146104cf57806392707802146104ed5780639f2b28331461050d578063a3381d281461053a57005b806346c22429116101aa57806352e83e521161017157806352e83e52146104215780635ff0253114610437578063715018a614610467578063744f4cf61461047c5780637727d1201461048f57005b806346c224291461035e5780634b11181b1461037e5780635066f3b51461039e57806351dabb75146103de57806352728e4b1461040b57005b80631b451d28116101ee5780631b451d28146102c857806327dfaf92146102e857806328f55a6c146103085780632d4047e51461031e5780632d6f80131461033e57005b8063026c4207146102255780630c7e17251461024e578063178483a71461029c5780631a39d8ef146102b257005b3661022357005b005b34801561023157600080fd5b5061023b609c5481565b6040519081526020015b60405180910390f35b34801561025a57600080fd5b50610284610269366004612efe565b6099602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610245565b3480156102a857600080fd5b5061023b609d5481565b3480156102be57600080fd5b5061023b609b5481565b3480156102d457600080fd5b506102236102e3366004612f19565b610749565b3480156102f457600080fd5b5061023b610303366004612f19565b610a49565b34801561031457600080fd5b5061023b60a05481565b34801561032a57600080fd5b5061023b610339366004612f4c565b610ac0565b34801561034a57600080fd5b5061023b610359366004612f4c565b610af0565b34801561036a57600080fd5b50610223610379366004612f65565b610b0d565b34801561038a57600080fd5b50610223610399366004612f9d565b610b5e565b3480156103aa57600080fd5b506103be6103b9366004612f19565b610bdd565b604080519485526020850193909352918301526060820152608001610245565b3480156103ea57600080fd5b5061023b6103f9366004612efe565b60a76020526000908152604090205481565b34801561041757600080fd5b5061023b60a15481565b34801561042d57600080fd5b5061023b609e5481565b34801561044357600080fd5b50610457610452366004612f65565b610d58565b6040519015158152602001610245565b34801561047357600080fd5b50610223610e0a565b61022361048a366004612f4c565b610e1e565b34801561049b57600080fd5b506102236104aa366004612efe565b61150d565b3480156104bb57600080fd5b506102846104ca366004612f4c565b61156a565b3480156104db57600080fd5b506033546001600160a01b0316610284565b3480156104f957600080fd5b50610223610508366004612f65565b611594565b34801561051957600080fd5b5061023b610528366004612efe565b60a86020526000908152604090205481565b34801561054657600080fd5b50610457610555366004612efe565b60986020526000908152604090205460ff1681565b34801561057657600080fd5b5060a454610284906001600160a01b031681565b34801561059657600080fd5b506102236105a5366004612efe565b61180b565b3480156105b657600080fd5b506102236105c5366004612f19565b611861565b3480156105d657600080fd5b5061023b6105e5366004612f19565b60a560209081526000928352604080842090915290825290205481565b610223610610366004613023565b6119e6565b34801561062157600080fd5b50610635610630366004612f65565b611f09565b604080516001600160a01b039093168352602083019190915201610245565b34801561066057600080fd5b50609754610284906001600160a01b031681565b61022361068236600461305c565b611f4f565b34801561069357600080fd5b506102236106a236600461308f565b61226f565b3480156106b357600080fd5b506102236106c2366004612efe565b6122f0565b3480156106d357600080fd5b5061023b60a25481565b3480156106e957600080fd5b5061023b6106f8366004612f4c565b612530565b34801561070957600080fd5b5061023b60a35481565b34801561071f57600080fd5b5061022361072e366004612efe565b612662565b34801561073f57600080fd5b5061023b609f5481565b6107516126d8565b6001600160a01b03808316600090815260996020526040902054168061080157609a80546001810182556000919091527f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be40180546001600160a01b0319166001600160a01b0384811691821790925560408051928616835260208301919091527f7f03ac7449144076e2d9d5a237c3ff0d0108e0a2ebdd5213c4b0de6f4d4f6953910160405180910390a16109c5565b806001600160a01b031663c8dffa956040518163ffffffff1660e01b8152600401602060405180830381865afa15801561083f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086391906130d2565b156108ce5760405162461bcd60e51b815260206004820152603060248201527f7570646174655661756c743a20446562742072656d61696e73206f6e2074686560448201526f1032bc34b9ba34b733903b30bab63a1760811b60648201526084015b60405180910390fd5b609a546000805b8281101561097157836001600160a01b0316609a82815481106108fa576108fa6130eb565b6000918252602090912001546001600160a01b03160361095f5784609a8281548110610928576109286130eb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060019150610971565b8061096981613117565b9150506108d5565b508061097f5761097f613130565b604080516001600160a01b038088168252861660208201527f4cc233b502e1e28f371b28114d4a8be87a93f330c18e3c339079fc498320fb8d910160405180910390a150505b506001600160a01b03918216600090815260996020908152604080832080546001600160a01b031990811695871695861790915584845260a68352818420825180840184528581528085018681528254600181810185559388528688209251600290910290920180549094169190981617825595519086015592825260a790522055565b604051636592183b60e01b81526001600160a01b03838116600483015260009190831690636592183b90602401602060405180830381865afa158015610a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab791906130d2565b90505b92915050565b6000609b54600014610aec57609b5482609c54610add9190613146565b610ae7919061315d565b610aba565b5090565b6000609c54600014610aec57609c5482609b54610add9190613146565b610b156126d8565b6001600160a01b038216610b4257610b3e610b386033546001600160a01b031690565b82612732565b5050565b610b3e82610b586033546001600160a01b031690565b836127e4565b610b666126d8565b60005b82811015610bd7578160986000868685818110610b8857610b886130eb565b9050602002016020810190610b9d9190612efe565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610bcf81613117565b915050610b69565b50505050565b6001600160a01b03808216600090815260996020908152604080832054868516845260a5835281842094168084529382528083205460a69092528220805492938493849392849184908110610c3457610c346130eb565b60009182526020918290206040805180820190915260029092020180546001600160a01b03168252600101549181018290529150610c7190610af0565b604051636592183b60e01b81526001600160a01b038a8116600483015291975090831690636592183b90602401602060405180830381865afa158015610cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdf91906130d2565b6040516312bad57f60e31b8152600481018290529094506001600160a01b038316906395d6abf890602401602060405180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b91906130d2565b9450505092959194509250565b6001600160a01b0380831660009081526099602090815260408083205490931680835260a6909152918120805491929183919085908110610d9b57610d9b6130eb565b600091825260208083206040805180820190915260029093020180546001600160a01b03168352600101549082018190529092509003610de057600092505050610aba565b6000610dfe838360200151610df9856000015187610a49565b6128ef565b50159695505050505050565b610e126126d8565b610e1c600061298c565b565b6097546001600160a01b03163314610e845760405162461bcd60e51b8152602060048201526024808201527f537461796b696e673a204e6f742077686974656c69737465642064656c6567616044820152633a37b91760e11b60648201526084016108c5565b609b54811015610ee75760405162461bcd60e51b815260206004820152602860248201527f6163637275653a20746f74616c5374616b6564203c206265666f726520746f74604482015267185b105b5bdd5b9d60c21b60648201526084016108c5565b60003411610f465760405162461bcd60e51b815260206004820152602660248201527f6163637275653a20596f752073686f756c642073656e6420636c61696d65642060448201526522ab26a7a99760d11b60648201526084016108c5565b6000612710609e5434610f599190613146565b610f63919061315d565b90508060a36000828254610f77919061317f565b9091555050609a54600090818167ffffffffffffffff811115610f9c57610f9c613192565b604051908082528060200260200182016040528015610fc5578160200160208202803683370190505b50905060005b828110156110af57609a8181548110610fe657610fe66130eb565b6000918252602091829020015460408051630f5f4c7f60e21b815290516001600160a01b0390921692633d7d31fc926004808401938290030181865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105891906130d2565b82828151811061106a5761106a6130eb565b602002602001018181525050818181518110611088576110886130eb565b60200260200101518461109b919061317f565b9350806110a781613117565b915050610fcb565b5060006110bc85346131a8565b9050836000036111295780609b60008282546110d8919061317f565b9091555050609b5460405133917f68f604dad2502091469814ccdd58acac4592d7766a922eee86e6ab9965cfe9499161111991858252602082015260400190565b60405180910390a2505050505050565b8084106112cb5760005b83811015611280576000609a8281548110611150576111506130eb565b600091825260208220015485516001600160a01b03909116925087908590879086908110611180576111806130eb565b60200260200101516111929190613146565b61119c919061315d565b6040516315d6dae960e01b8152600481018290529091506000906001600160a01b038416906315d6dae990602401602060405180830381865afa1580156111e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120b91906130d2565b60405163ad452d7560e01b8152600481018290529091506001600160a01b0384169063ad452d759084906024016000604051808303818588803b15801561125157600080fd5b505af1158015611265573d6000803e3d6000fd5b5050505050505050808061127890613117565b915050611133565b50609b5460405133917f68f604dad2502091469814ccdd58acac4592d7766a922eee86e6ab9965cfe949916112be9160008252602082015260400190565b60405180910390a2611504565b609f548590600090612710906112e188866131a8565b6112eb9190613146565b6112f5919061315d565b905060005b8581101561148557600087868381518110611317576113176130eb565b60200260200101518461132a9190613146565b611334919061315d565b868381518110611346576113466130eb565b6020026020010151611358919061317f565b9050609a828154811061136d5761136d6130eb565b600091825260209091200154609a80546001600160a01b039092169163ad452d75918491869081106113a1576113a16130eb565b6000918252602091829020015460408051636d22f63f60e11b815290516001600160a01b039092169263da45ec7e926004808401938290030181865afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141391906130d2565b6040518363ffffffff1660e01b815260040161143191815260200190565b6000604051808303818588803b15801561144a57600080fd5b505af115801561145e573d6000803e3d6000fd5b5050505050808461146f919061317f565b935050808061147d90613117565b9150506112fa565b50600061149283346131a8565b905080156114bc5780609b60008282546114ac919061317f565b909155506114bc90503382612732565b609b5460405133917f68f604dad2502091469814ccdd58acac4592d7766a922eee86e6ab9965cfe949916114f891858252602082015260400190565b60405180910390a25050505b50505050505b50565b6115156126d8565b60a480546001600160a01b0319166001600160a01b0383169081179091556040519081527f653e4ae347af17869ed05423220be95186b147bff05096b155f9b0f9648e3b3e906020015b60405180910390a150565b609a818154811061157a57600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526098602052604090205460ff166115fd5760405162461bcd60e51b815260206004820152602160248201527f537461796b696e673a204e6f742077686974656c6973746564204b696c6c65726044820152601760f91b60648201526084016108c5565b6001600160a01b0380831660009081526099602090815260408083205490931680835260a690915291812080548490811061163a5761163a6130eb565b9060005260206000209060020201905060008160010154116116975760405162461bcd60e51b815260206004820152601660248201527535b4b6361d103932b6b7bb32b2103837b9b4ba34b7b760511b60448201526064016108c5565b80546000906116af906001600160a01b031684610a49565b90506000806116c3858560010154856128ef565b9150915081156117155760405162461bcd60e51b815260206004820152601a60248201527f6b696c6c3a207374696c6c207361666520706f736974696f6e2e00000000000060448201526064016108c5565b60006117248560010154610af0565b9050600061271060a254836117399190613146565b611743919061315d565b905061175286888488856129de565b85546001600160a01b0316337f62b067e31c5a2d2734bc19924c46c930e1b7063b5b473238f2f8bb7ab88a15b6898587116117965761179187876131a8565b611799565b60005b60018b0154604080516001600160a01b0390941684526020840192909252908201889052606082018a9052608082015260a00160405180910390a3505092546001600160a01b03908116600090815260a560209081526040808320979093168252959095528420939093555050505050565b6118136126d8565b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527fc46722a14b09e7b7e59991ec89fb4bb88ffed57f1b2187a65e959f5c0053716d9060200161155f565b600054610100900460ff16158080156118815750600054600160ff909116105b8061189b5750303b15801561189b575060005460ff166001145b6118fe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108c5565b6000805460ff191660011790558015611921576000805461ff0019166101001790555b61271060a15561192f612b16565b611937612b45565b611954662386f26fc10000610bb86107d0611d4c806101f461226f565b60a480546001600160a01b0319166001600160a01b0384161790556119788361180b565b6001600160a01b0383166000908152609860205260409020805460ff1916600117905580156119e1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b0380851660009081526099602090815260408083205433845260a5835281842094168084529390915290205480611a665760405162461bcd60e51b815260206004820152601b60248201527f6368616e6765506f736974696f6e3a206e6f20706f736974696f6e000000000060448201526064016108c5565b6001600160a01b038216600090815260a660205260408120805483908110611a9057611a906130eb565b906000526020600020906002020190506000808712611b0b5786341015611b055760405162461bcd60e51b8152602060048201526024808201527f6368616e6765506f736974696f6e3a204e6f7420656e6f756768206d73672e76604482015263616c756560e01b60648201526084016108c5565b86340390505b600080600080611b1b8b8b612b74565b935093509350935060008112611b3c57611b35818661317f565b9450611b6f565b611b45816131bb565b8510611b5e57611b54816131bb565b611b3590866131a8565b60009450611b6c85826131d7565b90505b8315611c07578115611bee5760405163185cc75160e01b8152336004820152602481018390526001600160a01b0389169063185cc751906044016020604051808303816000875af1158015611bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bec91906130d2565b505b611c0186611bfc848661317f565b612c9f565b50611d2d565b6000808212611c17576000611c20565b611c20826131bb565b611c2a848661317f565b611c34919061317f565b905060a15481611c449190613146565b611c5084612710613146565b1115611caf5760405162461bcd60e51b815260206004820152602860248201527f756e7374616b653a20746f6f206d756368206465627420696e20756e7374616b60448201526765642045564d4f5360c01b60648201526084016108c5565b611d2b878a838c6001600160a01b03166315d6dae9886040518263ffffffff1660e01b8152600401611ce391815260200190565b602060405180830381865afa158015611d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2491906130d2565b60006129de565b505b8815611da057611d3f8c33308c612d61565b604051630724e59160e41b8152336004820152602481018a90526001600160a01b0389169063724e591090604401600060405180830381600087803b158015611d8757600080fd5b505af1158015611d9b573d6000803e3d6000fd5b505050505b8415611e1b57604051639d2e6fcb60e01b8152336004820152600160248201526001600160a01b03891690639d2e6fcb90879060440160206040518083038185885af1158015611df4573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611e1991906130d2565b505b6000611e27338a610a49565b90506000611e3a8a8960010154846128ef565b50905080611e8a5760405162461bcd60e51b815260206004820152601860248201527f6368616e6765506f736974696f6e3a206261642064656274000000000000000060448201526064016108c5565b5050876001600160a01b0316336001600160a01b03167ff35a14688e4794e8022cd9e5c7ec6475a6095ef189dea9647fad0de771465b8a611ece8960010154610af0565b8960010154611edd338e610a49565b6040805193845260208401929092529082015260600160405180910390a3505050505050505050505050565b60a66020528160005260406000208181548110611f2557600080fd5b6000918252602090912060029091020180546001909101546001600160a01b039091169250905082565b6001600160a01b0380841660009081526099602090815260408083205433845260a5835281842094168084529390915290205415611fda5760405162461bcd60e51b815260206004820152602260248201527f616464506f736974696f6e3a20616c7265616479206861766520706f7369746960448201526137b760f11b60648201526084016108c5565b3483146120295760405162461bcd60e51b815260206004820181905260248201527f616464506f736974696f6e3a206d73672e76616c756520213d2065717569747960448201526064016108c5565b6000612035838561317f565b905060a054816120459190613146565b61205184612710613146565b106120b25760405162461bcd60e51b815260206004820152602b60248201527f616464506f736974696f6e3a2062616420646562742c2063616e6e6f74206f7060448201526a32b7103837b9b4ba34b7b760a91b60648201526084016108c5565b60008084116120c2576000612133565b60405163185cc75160e01b8152336004820152602481018590526001600160a01b0384169063185cc751906044016020604051808303816000875af115801561210f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213391906130d2565b6001600160a01b03848116600081815260a660209081526040808320815180830183523381528084018581528254600180820185559387528587209251600290910290920180546001600160a01b03191692909816919091178755519581019590955592825260a790529081208054939450906121b0838561317f565b909155505033600090815260a5602090815260408083206001600160a01b0388168452825280832084905560a69091528120805461220d9190849081106121f9576121f96130eb565b906000526020600020906002020185612c9f565b6040805189815260208101899052908101859052606081018290529091506001600160a01b0386169033907f92b0fd5c6dbe6ec5b43a8afae4c587c1db47afcca43a21b7800bd848fcf8e4969060800160405180910390a35050505050505050565b6122776126d8565b609d869055609e859055609f84905560a083815560a183905560a282905560408051888152602081018890528082018790526060810186905260808101859052918201839052517ff158be3136d3d369b2d9c9c22945209d8f58efdcf51cf332b7c88f78bd1f171c9181900360c00190a1505050505050565b6001600160a01b0380821660009081526099602090815260408083205490931680835260a6825283832033845260a58352848420828552909252928220548154811061233e5761233e6130eb565b9060005260206000209060020201905060008160010154116123b55760405162461bcd60e51b815260206004820152602a60248201527f72656d6f7665506f736974696f6e3a204e6f20706f736974696f6e20666f72206044820152693a3434b9903a37b5b2b760b11b60648201526084016108c5565b60006123c13384610a49565b6040516312bad57f60e31b8152600481018290529091506000906001600160a01b038516906395d6abf890602401602060405180830381865afa15801561240c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243091906130d2565b905060006124418460010154610af0565b90506124518486838660006129de565b818110156124a15760405162461bcd60e51b815260206004820152601860248201527f72656d6f7665506f736974696f6e3a204261642064656274000000000000000060448201526064016108c5565b6001600160a01b038516337f3cb91b4d61d4fefa96da17651a09b54f7b6751cb68d11134cf0efe0a496579686124d785856131a8565b600188015460408051928352602083018890528201889052606082015260800160405180910390a3505033600090815260a5602090815260408083206001600160a01b0396909616835294905292832092909255505050565b600080612710609e54846125449190613146565b61254e919061315d565b609a549091506000805b8281101561260357609a8181548110612573576125736130eb565b6000918252602091829020015460408051630f5f4c7f60e21b815290516001600160a01b0390921692633d7d31fc926004808401938290030181865afa1580156125c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e591906130d2565b6125ef908361317f565b9150806125fb81613117565b915050612558565b508461260f828561317f565b1061261d5750929392505050565b612710609f5461271061263091906131a8565b8261263b86896131a8565b61264591906131a8565b61264f9190613146565b612659919061315d565b95945050505050565b61266a6126d8565b6001600160a01b0381166126cf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108c5565b61150a8161298c565b6033546001600160a01b03163314610e1c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108c5565b604080516000808252602082019092526001600160a01b03841690839060405161275c91906131ff565b60006040518083038185875af1925050503d8060008114612799576040519150601f19603f3d011682016040523d82523d6000602084013e61279e565b606091505b50509050806119e15760405162461bcd60e51b815260206004820152601260248201527121736166655472616e7366657245564d4f5360701b60448201526064016108c5565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161284091906131ff565b6000604051808303816000865af19150503d806000811461287d576040519150601f19603f3d011682016040523d82523d6000602084013e612882565b606091505b50915091508180156128ac5750805115806128ac5750808060200190518101906128ac919061322e565b6128e85760405162461bcd60e51b815260206004820152600d60248201526c10b9b0b332aa3930b739b332b960991b60448201526064016108c5565b5050505050565b6040516312bad57f60e31b81526004810182905260009081906001600160a01b038616906395d6abf890602401602060405180830381865afa158015612939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295d91906130d2565b905060a05461296b85610af0565b6129759190613146565b61298182612710613146565b109150935093915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006129e984610ac0565b9050808660010160008282546129ff91906131a8565b9250508190555083609b6000828254612a1891906131a8565b9250508190555080609c6000828254612a3191906131a8565b909155506000905083612a45576000612abb565b8654604051631a4e1aef60e01b81526001600160a01b0391821660048201526024810186905290871690631a4e1aef906044016020604051808303816000875af1158015612a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abb91906130d2565b875460975460408051898152602081018790529394506001600160a01b039283169392909116917f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef910160405180910390a350505050505050565b600054610100900460ff16612b3d5760405162461bcd60e51b81526004016108c590613252565b610e1c612e71565b600054610100900460ff16612b6c5760405162461bcd60e51b81526004016108c590613252565b610e1c612ea1565b600080808080612b84868861329d565b1215612be65760405162461bcd60e51b815260206004820152602b60248201527f657175697479496e426173654368616e676564202a2064656274496e4261736560448201526a04368616e676564203c20360ac1b60648201526084016108c5565b6000612bf2868861329d565b1215612c6e5760008613612c0587612ecf565b9350612c1086612ecf565b9250828411612c405780156000612c2786866131a8565b83612c3a57612c35876131bb565b612c5d565b86612c5d565b80612c4b84866131a8565b600083612c5b57612c35866131bb565b855b92975090955093509150612c969050565b612c7786612ecf565b9250612c8285612ecf565b91506000861380612c935750600085135b93505b92959194509250565b6000612caa82610ac0565b905080836001016000828254612cc0919061317f565b9250508190555081609b6000828254612cd9919061317f565b9250508190555080609c6000828254612cf2919061317f565b9091555050609754612d0d906001600160a01b031683612732565b825460975460408051858152602081018590526001600160a01b0393841693909216917f63602d0ecc7b3a0ef7ff1a116e23056662d64280355ba8031b6d0d767c4b4458910160405180910390a392915050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691612dc591906131ff565b6000604051808303816000865af19150503d8060008114612e02576040519150601f19603f3d011682016040523d82523d6000602084013e612e07565b606091505b5091509150818015612e31575080511580612e31575080806020019051810190612e31919061322e565b6115045760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b60448201526064016108c5565b600054610100900460ff16612e985760405162461bcd60e51b81526004016108c590613252565b610e1c3361298c565b600054610100900460ff16612ec85760405162461bcd60e51b81526004016108c590613252565b6001606555565b600080821215610aec57610ae7826131bb565b80356001600160a01b0381168114612ef957600080fd5b919050565b600060208284031215612f1057600080fd5b610ab782612ee2565b60008060408385031215612f2c57600080fd5b612f3583612ee2565b9150612f4360208401612ee2565b90509250929050565b600060208284031215612f5e57600080fd5b5035919050565b60008060408385031215612f7857600080fd5b612f8183612ee2565b946020939093013593505050565b801515811461150a57600080fd5b600080600060408486031215612fb257600080fd5b833567ffffffffffffffff80821115612fca57600080fd5b818601915086601f830112612fde57600080fd5b813581811115612fed57600080fd5b8760208260051b850101111561300257600080fd5b6020928301955093505084013561301881612f8f565b809150509250925092565b6000806000806080858703121561303957600080fd5b61304285612ee2565b966020860135965060408601359560600135945092505050565b60008060006060848603121561307157600080fd5b61307a84612ee2565b95602085013595506040909401359392505050565b60008060008060008060c087890312156130a857600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000602082840312156130e457600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161312957613129613101565b5060010190565b634e487b7160e01b600052600160045260246000fd5b8082028115828204841417610aba57610aba613101565b60008261317a57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610aba57610aba613101565b634e487b7160e01b600052604160045260246000fd5b81810381811115610aba57610aba613101565b6000600160ff1b82016131d0576131d0613101565b5060000390565b80820182811260008312801582168215821617156131f7576131f7613101565b505092915050565b6000825160005b818110156132205760208186018101518583015201613206565b506000920191825250919050565b60006020828403121561324057600080fd5b815161324b81612f8f565b9392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b80820260008212600160ff1b841416156132b9576132b9613101565b8181058314821517610aba57610aba61310156fea26469706673582212205fdee29057a955caf2a2c0a48059deb93aaab1759864afffb910bc358c698acf64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061021c5760003560e01c80638c64ea4a11610122578063c1be6677116100a5578063e031a8241161006c578063e031a824146106c7578063e4175aee146106dd578063f0e63edf146106fd578063f2fde38b14610713578063fc8389951461073357005b8063c1be667714610615578063ce9b793014610654578063cff07fd114610674578063d87cad6714610687578063df5ca1f8146106a757005b8063afd06b34116100e9578063afd06b341461056a578063b1ae5ed31461058a578063b2a2a96b146105aa578063bb94d3db146105ca578063bed06b0b1461060257005b80638c64ea4a146104af5780638da5cb5b146104cf57806392707802146104ed5780639f2b28331461050d578063a3381d281461053a57005b806346c22429116101aa57806352e83e521161017157806352e83e52146104215780635ff0253114610437578063715018a614610467578063744f4cf61461047c5780637727d1201461048f57005b806346c224291461035e5780634b11181b1461037e5780635066f3b51461039e57806351dabb75146103de57806352728e4b1461040b57005b80631b451d28116101ee5780631b451d28146102c857806327dfaf92146102e857806328f55a6c146103085780632d4047e51461031e5780632d6f80131461033e57005b8063026c4207146102255780630c7e17251461024e578063178483a71461029c5780631a39d8ef146102b257005b3661022357005b005b34801561023157600080fd5b5061023b609c5481565b6040519081526020015b60405180910390f35b34801561025a57600080fd5b50610284610269366004612efe565b6099602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610245565b3480156102a857600080fd5b5061023b609d5481565b3480156102be57600080fd5b5061023b609b5481565b3480156102d457600080fd5b506102236102e3366004612f19565b610749565b3480156102f457600080fd5b5061023b610303366004612f19565b610a49565b34801561031457600080fd5b5061023b60a05481565b34801561032a57600080fd5b5061023b610339366004612f4c565b610ac0565b34801561034a57600080fd5b5061023b610359366004612f4c565b610af0565b34801561036a57600080fd5b50610223610379366004612f65565b610b0d565b34801561038a57600080fd5b50610223610399366004612f9d565b610b5e565b3480156103aa57600080fd5b506103be6103b9366004612f19565b610bdd565b604080519485526020850193909352918301526060820152608001610245565b3480156103ea57600080fd5b5061023b6103f9366004612efe565b60a76020526000908152604090205481565b34801561041757600080fd5b5061023b60a15481565b34801561042d57600080fd5b5061023b609e5481565b34801561044357600080fd5b50610457610452366004612f65565b610d58565b6040519015158152602001610245565b34801561047357600080fd5b50610223610e0a565b61022361048a366004612f4c565b610e1e565b34801561049b57600080fd5b506102236104aa366004612efe565b61150d565b3480156104bb57600080fd5b506102846104ca366004612f4c565b61156a565b3480156104db57600080fd5b506033546001600160a01b0316610284565b3480156104f957600080fd5b50610223610508366004612f65565b611594565b34801561051957600080fd5b5061023b610528366004612efe565b60a86020526000908152604090205481565b34801561054657600080fd5b50610457610555366004612efe565b60986020526000908152604090205460ff1681565b34801561057657600080fd5b5060a454610284906001600160a01b031681565b34801561059657600080fd5b506102236105a5366004612efe565b61180b565b3480156105b657600080fd5b506102236105c5366004612f19565b611861565b3480156105d657600080fd5b5061023b6105e5366004612f19565b60a560209081526000928352604080842090915290825290205481565b610223610610366004613023565b6119e6565b34801561062157600080fd5b50610635610630366004612f65565b611f09565b604080516001600160a01b039093168352602083019190915201610245565b34801561066057600080fd5b50609754610284906001600160a01b031681565b61022361068236600461305c565b611f4f565b34801561069357600080fd5b506102236106a236600461308f565b61226f565b3480156106b357600080fd5b506102236106c2366004612efe565b6122f0565b3480156106d357600080fd5b5061023b60a25481565b3480156106e957600080fd5b5061023b6106f8366004612f4c565b612530565b34801561070957600080fd5b5061023b60a35481565b34801561071f57600080fd5b5061022361072e366004612efe565b612662565b34801561073f57600080fd5b5061023b609f5481565b6107516126d8565b6001600160a01b03808316600090815260996020526040902054168061080157609a80546001810182556000919091527f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be40180546001600160a01b0319166001600160a01b0384811691821790925560408051928616835260208301919091527f7f03ac7449144076e2d9d5a237c3ff0d0108e0a2ebdd5213c4b0de6f4d4f6953910160405180910390a16109c5565b806001600160a01b031663c8dffa956040518163ffffffff1660e01b8152600401602060405180830381865afa15801561083f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086391906130d2565b156108ce5760405162461bcd60e51b815260206004820152603060248201527f7570646174655661756c743a20446562742072656d61696e73206f6e2074686560448201526f1032bc34b9ba34b733903b30bab63a1760811b60648201526084015b60405180910390fd5b609a546000805b8281101561097157836001600160a01b0316609a82815481106108fa576108fa6130eb565b6000918252602090912001546001600160a01b03160361095f5784609a8281548110610928576109286130eb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060019150610971565b8061096981613117565b9150506108d5565b508061097f5761097f613130565b604080516001600160a01b038088168252861660208201527f4cc233b502e1e28f371b28114d4a8be87a93f330c18e3c339079fc498320fb8d910160405180910390a150505b506001600160a01b03918216600090815260996020908152604080832080546001600160a01b031990811695871695861790915584845260a68352818420825180840184528581528085018681528254600181810185559388528688209251600290910290920180549094169190981617825595519086015592825260a790522055565b604051636592183b60e01b81526001600160a01b03838116600483015260009190831690636592183b90602401602060405180830381865afa158015610a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab791906130d2565b90505b92915050565b6000609b54600014610aec57609b5482609c54610add9190613146565b610ae7919061315d565b610aba565b5090565b6000609c54600014610aec57609c5482609b54610add9190613146565b610b156126d8565b6001600160a01b038216610b4257610b3e610b386033546001600160a01b031690565b82612732565b5050565b610b3e82610b586033546001600160a01b031690565b836127e4565b610b666126d8565b60005b82811015610bd7578160986000868685818110610b8857610b886130eb565b9050602002016020810190610b9d9190612efe565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610bcf81613117565b915050610b69565b50505050565b6001600160a01b03808216600090815260996020908152604080832054868516845260a5835281842094168084529382528083205460a69092528220805492938493849392849184908110610c3457610c346130eb565b60009182526020918290206040805180820190915260029092020180546001600160a01b03168252600101549181018290529150610c7190610af0565b604051636592183b60e01b81526001600160a01b038a8116600483015291975090831690636592183b90602401602060405180830381865afa158015610cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdf91906130d2565b6040516312bad57f60e31b8152600481018290529094506001600160a01b038316906395d6abf890602401602060405180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b91906130d2565b9450505092959194509250565b6001600160a01b0380831660009081526099602090815260408083205490931680835260a6909152918120805491929183919085908110610d9b57610d9b6130eb565b600091825260208083206040805180820190915260029093020180546001600160a01b03168352600101549082018190529092509003610de057600092505050610aba565b6000610dfe838360200151610df9856000015187610a49565b6128ef565b50159695505050505050565b610e126126d8565b610e1c600061298c565b565b6097546001600160a01b03163314610e845760405162461bcd60e51b8152602060048201526024808201527f537461796b696e673a204e6f742077686974656c69737465642064656c6567616044820152633a37b91760e11b60648201526084016108c5565b609b54811015610ee75760405162461bcd60e51b815260206004820152602860248201527f6163637275653a20746f74616c5374616b6564203c206265666f726520746f74604482015267185b105b5bdd5b9d60c21b60648201526084016108c5565b60003411610f465760405162461bcd60e51b815260206004820152602660248201527f6163637275653a20596f752073686f756c642073656e6420636c61696d65642060448201526522ab26a7a99760d11b60648201526084016108c5565b6000612710609e5434610f599190613146565b610f63919061315d565b90508060a36000828254610f77919061317f565b9091555050609a54600090818167ffffffffffffffff811115610f9c57610f9c613192565b604051908082528060200260200182016040528015610fc5578160200160208202803683370190505b50905060005b828110156110af57609a8181548110610fe657610fe66130eb565b6000918252602091829020015460408051630f5f4c7f60e21b815290516001600160a01b0390921692633d7d31fc926004808401938290030181865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105891906130d2565b82828151811061106a5761106a6130eb565b602002602001018181525050818181518110611088576110886130eb565b60200260200101518461109b919061317f565b9350806110a781613117565b915050610fcb565b5060006110bc85346131a8565b9050836000036111295780609b60008282546110d8919061317f565b9091555050609b5460405133917f68f604dad2502091469814ccdd58acac4592d7766a922eee86e6ab9965cfe9499161111991858252602082015260400190565b60405180910390a2505050505050565b8084106112cb5760005b83811015611280576000609a8281548110611150576111506130eb565b600091825260208220015485516001600160a01b03909116925087908590879086908110611180576111806130eb565b60200260200101516111929190613146565b61119c919061315d565b6040516315d6dae960e01b8152600481018290529091506000906001600160a01b038416906315d6dae990602401602060405180830381865afa1580156111e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120b91906130d2565b60405163ad452d7560e01b8152600481018290529091506001600160a01b0384169063ad452d759084906024016000604051808303818588803b15801561125157600080fd5b505af1158015611265573d6000803e3d6000fd5b5050505050505050808061127890613117565b915050611133565b50609b5460405133917f68f604dad2502091469814ccdd58acac4592d7766a922eee86e6ab9965cfe949916112be9160008252602082015260400190565b60405180910390a2611504565b609f548590600090612710906112e188866131a8565b6112eb9190613146565b6112f5919061315d565b905060005b8581101561148557600087868381518110611317576113176130eb565b60200260200101518461132a9190613146565b611334919061315d565b868381518110611346576113466130eb565b6020026020010151611358919061317f565b9050609a828154811061136d5761136d6130eb565b600091825260209091200154609a80546001600160a01b039092169163ad452d75918491869081106113a1576113a16130eb565b6000918252602091829020015460408051636d22f63f60e11b815290516001600160a01b039092169263da45ec7e926004808401938290030181865afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141391906130d2565b6040518363ffffffff1660e01b815260040161143191815260200190565b6000604051808303818588803b15801561144a57600080fd5b505af115801561145e573d6000803e3d6000fd5b5050505050808461146f919061317f565b935050808061147d90613117565b9150506112fa565b50600061149283346131a8565b905080156114bc5780609b60008282546114ac919061317f565b909155506114bc90503382612732565b609b5460405133917f68f604dad2502091469814ccdd58acac4592d7766a922eee86e6ab9965cfe949916114f891858252602082015260400190565b60405180910390a25050505b50505050505b50565b6115156126d8565b60a480546001600160a01b0319166001600160a01b0383169081179091556040519081527f653e4ae347af17869ed05423220be95186b147bff05096b155f9b0f9648e3b3e906020015b60405180910390a150565b609a818154811061157a57600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526098602052604090205460ff166115fd5760405162461bcd60e51b815260206004820152602160248201527f537461796b696e673a204e6f742077686974656c6973746564204b696c6c65726044820152601760f91b60648201526084016108c5565b6001600160a01b0380831660009081526099602090815260408083205490931680835260a690915291812080548490811061163a5761163a6130eb565b9060005260206000209060020201905060008160010154116116975760405162461bcd60e51b815260206004820152601660248201527535b4b6361d103932b6b7bb32b2103837b9b4ba34b7b760511b60448201526064016108c5565b80546000906116af906001600160a01b031684610a49565b90506000806116c3858560010154856128ef565b9150915081156117155760405162461bcd60e51b815260206004820152601a60248201527f6b696c6c3a207374696c6c207361666520706f736974696f6e2e00000000000060448201526064016108c5565b60006117248560010154610af0565b9050600061271060a254836117399190613146565b611743919061315d565b905061175286888488856129de565b85546001600160a01b0316337f62b067e31c5a2d2734bc19924c46c930e1b7063b5b473238f2f8bb7ab88a15b6898587116117965761179187876131a8565b611799565b60005b60018b0154604080516001600160a01b0390941684526020840192909252908201889052606082018a9052608082015260a00160405180910390a3505092546001600160a01b03908116600090815260a560209081526040808320979093168252959095528420939093555050505050565b6118136126d8565b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527fc46722a14b09e7b7e59991ec89fb4bb88ffed57f1b2187a65e959f5c0053716d9060200161155f565b600054610100900460ff16158080156118815750600054600160ff909116105b8061189b5750303b15801561189b575060005460ff166001145b6118fe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108c5565b6000805460ff191660011790558015611921576000805461ff0019166101001790555b61271060a15561192f612b16565b611937612b45565b611954662386f26fc10000610bb86107d0611d4c806101f461226f565b60a480546001600160a01b0319166001600160a01b0384161790556119788361180b565b6001600160a01b0383166000908152609860205260409020805460ff1916600117905580156119e1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b0380851660009081526099602090815260408083205433845260a5835281842094168084529390915290205480611a665760405162461bcd60e51b815260206004820152601b60248201527f6368616e6765506f736974696f6e3a206e6f20706f736974696f6e000000000060448201526064016108c5565b6001600160a01b038216600090815260a660205260408120805483908110611a9057611a906130eb565b906000526020600020906002020190506000808712611b0b5786341015611b055760405162461bcd60e51b8152602060048201526024808201527f6368616e6765506f736974696f6e3a204e6f7420656e6f756768206d73672e76604482015263616c756560e01b60648201526084016108c5565b86340390505b600080600080611b1b8b8b612b74565b935093509350935060008112611b3c57611b35818661317f565b9450611b6f565b611b45816131bb565b8510611b5e57611b54816131bb565b611b3590866131a8565b60009450611b6c85826131d7565b90505b8315611c07578115611bee5760405163185cc75160e01b8152336004820152602481018390526001600160a01b0389169063185cc751906044016020604051808303816000875af1158015611bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bec91906130d2565b505b611c0186611bfc848661317f565b612c9f565b50611d2d565b6000808212611c17576000611c20565b611c20826131bb565b611c2a848661317f565b611c34919061317f565b905060a15481611c449190613146565b611c5084612710613146565b1115611caf5760405162461bcd60e51b815260206004820152602860248201527f756e7374616b653a20746f6f206d756368206465627420696e20756e7374616b60448201526765642045564d4f5360c01b60648201526084016108c5565b611d2b878a838c6001600160a01b03166315d6dae9886040518263ffffffff1660e01b8152600401611ce391815260200190565b602060405180830381865afa158015611d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2491906130d2565b60006129de565b505b8815611da057611d3f8c33308c612d61565b604051630724e59160e41b8152336004820152602481018a90526001600160a01b0389169063724e591090604401600060405180830381600087803b158015611d8757600080fd5b505af1158015611d9b573d6000803e3d6000fd5b505050505b8415611e1b57604051639d2e6fcb60e01b8152336004820152600160248201526001600160a01b03891690639d2e6fcb90879060440160206040518083038185885af1158015611df4573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611e1991906130d2565b505b6000611e27338a610a49565b90506000611e3a8a8960010154846128ef565b50905080611e8a5760405162461bcd60e51b815260206004820152601860248201527f6368616e6765506f736974696f6e3a206261642064656274000000000000000060448201526064016108c5565b5050876001600160a01b0316336001600160a01b03167ff35a14688e4794e8022cd9e5c7ec6475a6095ef189dea9647fad0de771465b8a611ece8960010154610af0565b8960010154611edd338e610a49565b6040805193845260208401929092529082015260600160405180910390a3505050505050505050505050565b60a66020528160005260406000208181548110611f2557600080fd5b6000918252602090912060029091020180546001909101546001600160a01b039091169250905082565b6001600160a01b0380841660009081526099602090815260408083205433845260a5835281842094168084529390915290205415611fda5760405162461bcd60e51b815260206004820152602260248201527f616464506f736974696f6e3a20616c7265616479206861766520706f7369746960448201526137b760f11b60648201526084016108c5565b3483146120295760405162461bcd60e51b815260206004820181905260248201527f616464506f736974696f6e3a206d73672e76616c756520213d2065717569747960448201526064016108c5565b6000612035838561317f565b905060a054816120459190613146565b61205184612710613146565b106120b25760405162461bcd60e51b815260206004820152602b60248201527f616464506f736974696f6e3a2062616420646562742c2063616e6e6f74206f7060448201526a32b7103837b9b4ba34b7b760a91b60648201526084016108c5565b60008084116120c2576000612133565b60405163185cc75160e01b8152336004820152602481018590526001600160a01b0384169063185cc751906044016020604051808303816000875af115801561210f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213391906130d2565b6001600160a01b03848116600081815260a660209081526040808320815180830183523381528084018581528254600180820185559387528587209251600290910290920180546001600160a01b03191692909816919091178755519581019590955592825260a790529081208054939450906121b0838561317f565b909155505033600090815260a5602090815260408083206001600160a01b0388168452825280832084905560a69091528120805461220d9190849081106121f9576121f96130eb565b906000526020600020906002020185612c9f565b6040805189815260208101899052908101859052606081018290529091506001600160a01b0386169033907f92b0fd5c6dbe6ec5b43a8afae4c587c1db47afcca43a21b7800bd848fcf8e4969060800160405180910390a35050505050505050565b6122776126d8565b609d869055609e859055609f84905560a083815560a183905560a282905560408051888152602081018890528082018790526060810186905260808101859052918201839052517ff158be3136d3d369b2d9c9c22945209d8f58efdcf51cf332b7c88f78bd1f171c9181900360c00190a1505050505050565b6001600160a01b0380821660009081526099602090815260408083205490931680835260a6825283832033845260a58352848420828552909252928220548154811061233e5761233e6130eb565b9060005260206000209060020201905060008160010154116123b55760405162461bcd60e51b815260206004820152602a60248201527f72656d6f7665506f736974696f6e3a204e6f20706f736974696f6e20666f72206044820152693a3434b9903a37b5b2b760b11b60648201526084016108c5565b60006123c13384610a49565b6040516312bad57f60e31b8152600481018290529091506000906001600160a01b038516906395d6abf890602401602060405180830381865afa15801561240c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243091906130d2565b905060006124418460010154610af0565b90506124518486838660006129de565b818110156124a15760405162461bcd60e51b815260206004820152601860248201527f72656d6f7665506f736974696f6e3a204261642064656274000000000000000060448201526064016108c5565b6001600160a01b038516337f3cb91b4d61d4fefa96da17651a09b54f7b6751cb68d11134cf0efe0a496579686124d785856131a8565b600188015460408051928352602083018890528201889052606082015260800160405180910390a3505033600090815260a5602090815260408083206001600160a01b0396909616835294905292832092909255505050565b600080612710609e54846125449190613146565b61254e919061315d565b609a549091506000805b8281101561260357609a8181548110612573576125736130eb565b6000918252602091829020015460408051630f5f4c7f60e21b815290516001600160a01b0390921692633d7d31fc926004808401938290030181865afa1580156125c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e591906130d2565b6125ef908361317f565b9150806125fb81613117565b915050612558565b508461260f828561317f565b1061261d5750929392505050565b612710609f5461271061263091906131a8565b8261263b86896131a8565b61264591906131a8565b61264f9190613146565b612659919061315d565b95945050505050565b61266a6126d8565b6001600160a01b0381166126cf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108c5565b61150a8161298c565b6033546001600160a01b03163314610e1c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108c5565b604080516000808252602082019092526001600160a01b03841690839060405161275c91906131ff565b60006040518083038185875af1925050503d8060008114612799576040519150601f19603f3d011682016040523d82523d6000602084013e61279e565b606091505b50509050806119e15760405162461bcd60e51b815260206004820152601260248201527121736166655472616e7366657245564d4f5360701b60448201526064016108c5565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161284091906131ff565b6000604051808303816000865af19150503d806000811461287d576040519150601f19603f3d011682016040523d82523d6000602084013e612882565b606091505b50915091508180156128ac5750805115806128ac5750808060200190518101906128ac919061322e565b6128e85760405162461bcd60e51b815260206004820152600d60248201526c10b9b0b332aa3930b739b332b960991b60448201526064016108c5565b5050505050565b6040516312bad57f60e31b81526004810182905260009081906001600160a01b038616906395d6abf890602401602060405180830381865afa158015612939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295d91906130d2565b905060a05461296b85610af0565b6129759190613146565b61298182612710613146565b109150935093915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006129e984610ac0565b9050808660010160008282546129ff91906131a8565b9250508190555083609b6000828254612a1891906131a8565b9250508190555080609c6000828254612a3191906131a8565b909155506000905083612a45576000612abb565b8654604051631a4e1aef60e01b81526001600160a01b0391821660048201526024810186905290871690631a4e1aef906044016020604051808303816000875af1158015612a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abb91906130d2565b875460975460408051898152602081018790529394506001600160a01b039283169392909116917f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef910160405180910390a350505050505050565b600054610100900460ff16612b3d5760405162461bcd60e51b81526004016108c590613252565b610e1c612e71565b600054610100900460ff16612b6c5760405162461bcd60e51b81526004016108c590613252565b610e1c612ea1565b600080808080612b84868861329d565b1215612be65760405162461bcd60e51b815260206004820152602b60248201527f657175697479496e426173654368616e676564202a2064656274496e4261736560448201526a04368616e676564203c20360ac1b60648201526084016108c5565b6000612bf2868861329d565b1215612c6e5760008613612c0587612ecf565b9350612c1086612ecf565b9250828411612c405780156000612c2786866131a8565b83612c3a57612c35876131bb565b612c5d565b86612c5d565b80612c4b84866131a8565b600083612c5b57612c35866131bb565b855b92975090955093509150612c969050565b612c7786612ecf565b9250612c8285612ecf565b91506000861380612c935750600085135b93505b92959194509250565b6000612caa82610ac0565b905080836001016000828254612cc0919061317f565b9250508190555081609b6000828254612cd9919061317f565b9250508190555080609c6000828254612cf2919061317f565b9091555050609754612d0d906001600160a01b031683612732565b825460975460408051858152602081018590526001600160a01b0393841693909216917f63602d0ecc7b3a0ef7ff1a116e23056662d64280355ba8031b6d0d767c4b4458910160405180910390a392915050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691612dc591906131ff565b6000604051808303816000865af19150503d8060008114612e02576040519150601f19603f3d011682016040523d82523d6000602084013e612e07565b606091505b5091509150818015612e31575080511580612e31575080806020019051810190612e31919061322e565b6115045760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b60448201526064016108c5565b600054610100900460ff16612e985760405162461bcd60e51b81526004016108c590613252565b610e1c3361298c565b600054610100900460ff16612ec85760405162461bcd60e51b81526004016108c590613252565b6001606555565b600080821215610aec57610ae7826131bb565b80356001600160a01b0381168114612ef957600080fd5b919050565b600060208284031215612f1057600080fd5b610ab782612ee2565b60008060408385031215612f2c57600080fd5b612f3583612ee2565b9150612f4360208401612ee2565b90509250929050565b600060208284031215612f5e57600080fd5b5035919050565b60008060408385031215612f7857600080fd5b612f8183612ee2565b946020939093013593505050565b801515811461150a57600080fd5b600080600060408486031215612fb257600080fd5b833567ffffffffffffffff80821115612fca57600080fd5b818601915086601f830112612fde57600080fd5b813581811115612fed57600080fd5b8760208260051b850101111561300257600080fd5b6020928301955093505084013561301881612f8f565b809150509250925092565b6000806000806080858703121561303957600080fd5b61304285612ee2565b966020860135965060408601359560600135945092505050565b60008060006060848603121561307157600080fd5b61307a84612ee2565b95602085013595506040909401359392505050565b60008060008060008060c087890312156130a857600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000602082840312156130e457600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161312957613129613101565b5060010190565b634e487b7160e01b600052600160045260246000fd5b8082028115828204841417610aba57610aba613101565b60008261317a57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610aba57610aba613101565b634e487b7160e01b600052604160045260246000fd5b81810381811115610aba57610aba613101565b6000600160ff1b82016131d0576131d0613101565b5060000390565b80820182811260008312801582168215821617156131f7576131f7613101565b505092915050565b6000825160005b818110156132205760208186018101518583015201613206565b506000920191825250919050565b60006020828403121561324057600080fd5b815161324b81612f8f565b9392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b80820260008212600160ff1b841416156132b9576132b9613101565b8181058314821517610aba57610aba61310156fea26469706673582212205fdee29057a955caf2a2c0a48059deb93aaab1759864afffb910bc358c698acf64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accrue(uint256)": {
        "details": "msg.value = all of staking reward",
        "params": {
          "totalStaked": "current total staked EVMOS (except staking reward)"
        }
      },
      "addPosition(address,uint256,uint256)": {
        "params": {
          "debtInBase": "debtAmount in EVMOS",
          "debtToken": "debtToken Address (not vault address)",
          "equity": "equityAmount in EVMOS"
        }
      },
      "changePosition(address,int256,int256,uint256)": {
        "details": "repayDebtInBase = msg.value - changeEquityInBaseUser should approve this firstif msg.value > 0, changeEquityInBase >= 0 since msg.value = changeEquityInBase + repayDebtInBase"
      },
      "getAccruedValue(uint256)": {
        "params": {
          "reward": "claimed staking reward"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "positionInfo(address,address)": {
        "details": "returns position's value & debt value position value: positionValueInBase equity value: positionValueInBase - debtInBase debt value: debtInBase debt ratio: debtInBase / positionValueInBase * 100(%) kill factor: killFactorBps / 100 safety buffer: (kill factor) - (debt ratio)"
      },
      "removePosition(address)": {
        "details": "remove all position of debtToken vault.",
        "params": {
          "debtToken": "debtToken Address (not vault address)"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "minDebtInBase": {
        "details": "min debtAmount in EVMOS (base token)"
      },
      "positionIdOf": {
        "details": "userAddress => vaultAddress => positionId (array Index of position)"
      },
      "positions": {
        "details": "vaultAddress => Position[]"
      },
      "reservedPool": {
        "details": "EVMOS amount reserved by Protocol"
      },
      "totalAmount": {
        "details": "kor) 유저가 예치한 금액 + auto-compound된 금액"
      },
      "totalShare": {
        "details": "kor) auto-compound되어도 totalShare는 변하지 않음.  유저는 예치하는 시점에 (예치 금액/totalAmount) * totalShare에 해당하는 share를 받음."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accrue(uint256)": {
        "notice": "kor) 수익 분배 순서 1. 프로토콜(Stayking) 매출 -> 전체 reward 중 (reservedBps / 100)% 만큼 2. Vault Interest(정규 이자 calc by interestModel) (1) \"전체 reward 중 N%\"가 아닌 고정된 양이므로, 남은 reward로는 interest를 지급하지 못할 수 있다. 이 경우, (전체 reward - 매출) 전량을 Vault Interest로 지급. (2) 정상적인 경우 (매출을 제외한) reward가 Vault Interest보다 크다. 3. Vault reward / Reinvested Amount 2-(2)의 경우 reward에서 매출/이자를 제하고 남은 금액 중 (vaultRewardBps / 100)%는 Vault에 보너스 reward로 지급하고, 나머지는 Reinvest한다."
      },
      "amountToShare(uint256)": {
        "notice": "유저는 예치하는 시점에 (예치 금액 / totalAmount) * totalShare에 해당하는 share를 받음."
      },
      "changePosition(address,int256,int256,uint256)": {
        "notice": "change position value case 1. equityInBaseChanged > 0 - increase position value (stake more) - decrease debt ratio case 2. equityInBaseChanged < 0 - decrease position value (partial close) - increase debt ratio case 3. debtInBaseChanged > 0 (borrow more debt) - increase position value (stake more) - increase debt ratio case 4. debtInBaseChanged < 0 (repay debt by unstaking) - decrease position value (partial) - decrease debt ratio case 5. repaidDebt > 0 or repaidDebtInBase > 0 (repay debt with user's own token/EVMOS) - position value not changes (not call stake/unstake function) - decrease debt ratioIf equityInBaseChanged(=A) > 0 and debtInBaseChanged(=B) < 0, it is inefficient. e.g. A = 100 and B = -50, 50 EVMOS is Locked at uEVMOS. it produces the same result as if A = 50 and C = 50. (both increases equity by 50 EVMOS and repay debt by 50 EVMOS) Similarly, the case where equityInBaseChanged < 0 and debtInBaseChanged > 0 are also inefficient. So, we revert all cases where equityInBaseChanged * debtInBaseChanged < 0."
      },
      "removePosition(address)": {
        "notice": "kor) 부채비율이 100%가 넘어가면 포지션을 직접 종료할 수 없다. -> 강제 청산만 가능."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2748,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2751,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2740,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2903,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3023,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3038,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 3082,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 141,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "delegator",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 145,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "whitelistedKiller",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 150,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "tokenToVault",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 153,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "vaults",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 157,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "totalAmount",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 161,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "totalShare",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 165,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "minDebtInBase",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 168,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "reservedBps",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 171,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "vaultRewardBps",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 174,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "killFactorBps",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 177,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "liquidateDebtFactorBps",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 180,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "liquidationFeeBps",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      },
      {
        "astId": 183,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "reservedPool",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 186,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "uEVMOS",
        "offset": 0,
        "slot": "164",
        "type": "t_contract(IUnbondedEvmos)2230"
      },
      {
        "astId": 199,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "positionIdOf",
        "offset": 0,
        "slot": "165",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 206,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "positions",
        "offset": 0,
        "slot": "166",
        "type": "t_mapping(t_address,t_array(t_struct(Position)192_storage)dyn_storage)"
      },
      {
        "astId": 210,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "positionsLengthOf",
        "offset": 0,
        "slot": "167",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 214,
        "contract": "contracts/Stayking.sol:Stayking",
        "label": "totalDebtOf",
        "offset": 0,
        "slot": "168",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Position)192_storage)dyn_storage": {
        "base": "t_struct(Position)192_storage",
        "encoding": "dynamic_array",
        "label": "struct Stayking.Position[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUnbondedEvmos)2230": {
        "encoding": "inplace",
        "label": "contract IUnbondedEvmos",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(Position)192_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Stayking.Position[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Position)192_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Position)192_storage": {
        "encoding": "inplace",
        "label": "struct Stayking.Position",
        "members": [
          {
            "astId": 188,
            "contract": "contracts/Stayking.sol:Stayking",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 191,
            "contract": "contracts/Stayking.sol:Stayking",
            "label": "share",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}