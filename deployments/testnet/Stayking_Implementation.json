{
  "address": "0x876939152C56362e17D508B9DEA77a3fDF9e4083",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributed",
          "type": "uint256"
        }
      ],
      "name": "Accrue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "equity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtInBase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "AddPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "AddVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        }
      ],
      "name": "ChangeDelegator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "killer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "equity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtInBase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Kill",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "name": "PositionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "equity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtInBase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "RemovePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDebtInBase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "killFactorBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reservedBps",
          "type": "uint256"
        }
      ],
      "name": "UpdateConfigs",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "UpdateVault",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uEVMOS_",
          "type": "address"
        }
      ],
      "name": "__Stayking_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "name": "accrue",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "extraDebtInBase",
          "type": "uint256"
        }
      ],
      "name": "addDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "extraEquity",
          "type": "uint256"
        }
      ],
      "name": "addEquity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "equity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtInBase",
          "type": "uint256"
        }
      ],
      "name": "addPosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "amountToShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegator",
          "type": "address"
        }
      ],
      "name": "changeDelegator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "equityInBaseChanged",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "debtInBaseChanged",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "repaidDebt",
          "type": "uint256"
        }
      ],
      "name": "changePosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "debtAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "name": "getAccruedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "isKillable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "healthy",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "killFactorBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDebtInBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "positionIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        }
      ],
      "name": "positionInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionValueInBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtInBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "positionsLengthOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        }
      ],
      "name": "removePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repaidDebt",
          "type": "uint256"
        }
      ],
      "name": "repayDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minRepaid",
          "type": "uint256"
        }
      ],
      "name": "repayDebtInBase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservedBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservedPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "shareToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalDebtOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uEVMOS",
      "outputs": [
        {
          "internalType": "contract IUnbondedEvmos",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDebtInBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_killFactorBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reservedBps",
          "type": "uint256"
        }
      ],
      "name": "updateConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "updateVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedKiller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x43c7e98106d21cef852f8972186fc9422bf9f317b5386d6429d1770e7770cba0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x876939152C56362e17D508B9DEA77a3fDF9e4083",
    "transactionIndex": 0,
    "gasUsed": "3023900",
    "logsBloom": "0x
    "blockHash": "0xdcd42c8b6198c0fd9cce0027e6a14c657c1d5c44ac7e99a42a8e0fe63077f8f5",
    "transactionHash": "0x43c7e98106d21cef852f8972186fc9422bf9f317b5386d6429d1770e7770cba0",
    "logs": [],
    "blockNumber": 5205928,
    "cumulativeGasUsed": "3023900",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "d986b86957f665cc8046c8158b9e6879",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributed\",\"type\":\"uint256\"}],\"name\":\"Accrue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"equity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtInBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"AddPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"AddVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"ChangeDelegator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"killer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"equity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtInBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Kill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"PositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"equity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtInBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"RemovePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDebtInBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"killFactorBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservedBps\",\"type\":\"uint256\"}],\"name\":\"UpdateConfigs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"UpdateVault\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uEVMOS_\",\"type\":\"address\"}],\"name\":\"__Stayking_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"accrue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extraDebtInBase\",\"type\":\"uint256\"}],\"name\":\"addDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extraEquity\",\"type\":\"uint256\"}],\"name\":\"addEquity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"equity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtInBase\",\"type\":\"uint256\"}],\"name\":\"addPosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"amountToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"changeDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"equityInBaseChanged\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"debtInBaseChanged\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"repaidDebt\",\"type\":\"uint256\"}],\"name\":\"changePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"debtAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"getAccruedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"isKillable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"healthy\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killFactorBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDebtInBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positionIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"positionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionValueInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positionsLengthOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"removePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repaidDebt\",\"type\":\"uint256\"}],\"name\":\"repayDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRepaid\",\"type\":\"uint256\"}],\"name\":\"repayDebtInBase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"shareToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDebtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uEVMOS\",\"outputs\":[{\"internalType\":\"contract IUnbondedEvmos\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDebtInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_killFactorBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservedBps\",\"type\":\"uint256\"}],\"name\":\"updateConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"updateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedKiller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accrue(uint256)\":{\"details\":\"msg.value = all of staking reward \",\"params\":{\"totalStaked\":\"current total staked EVMOS before distributed\"}},\"addDebt(address,uint256)\":{\"details\":\"Borrow more debt (increase debt ratio)\",\"params\":{\"debtToken\":\"debtToken Address (not vault address)\",\"extraDebtInBase\":\"amount of additional debt in EVMOS\"}},\"addEquity(address,uint256)\":{\"details\":\"add additional equity (decrease debt ratio)\",\"params\":{\"debtToken\":\"debtToken Address (not vault address)\",\"extraEquity\":\"amount of additional equity\"}},\"addPosition(address,uint256,uint256)\":{\"params\":{\"debtInBase\":\"debtAmount in EVMOS\",\"debtToken\":\"debtToken Address (not vault address)\",\"equity\":\"equityAmount in EVMOS\"}},\"changePosition(address,int256,int256,uint256)\":{\"details\":\"(msg.value - changeEquityInBase) equals to repayDebtInBase - position value not changes (not call _stake/_unstake function) - decrease debt ratioUser should approve this firstif msg.value > 0, changeEquityInBase >= 0 since msg.value = changeEquityInBase + repayDebtInBase\"},\"getAccruedValue(uint256)\":{\"params\":{\"totalStaked\":\"current total staked EVMOS (= last total amount + reward)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"positionInfo(address,address)\":{\"details\":\"returns position's value & debt value position value: positionValueInBase equity value: positionValueInBase - debtInBase debt value: debtInBase debt ratio: debtInBase / positionValueInBase * 100(%) kill factor: killFactorBps / 100 safety buffer: (kill factor) - (debt ratio)\"},\"removePosition(address)\":{\"details\":\"remove all position of debtToken vault.\",\"params\":{\"debtToken\":\"debtToken Address (not vault address)\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repayDebt(address,uint256)\":{\"details\":\"Repay debt (decrease debt ratio, total staked amount(or share) does not change)\",\"params\":{\"debtToken\":\"debtToken Address (not vault address)\",\"repaidDebt\":\"amount of repaid debt in debtToken\"}},\"repayDebtInBase(address,uint256)\":{\"details\":\"Repay debt with EVMOS (decrease debt ratio, total staked amount(or share) does not change)\",\"params\":{\"debtToken\":\"debtToken Address (not vault address)\",\"minRepaid\":\"minimum value to be repaid\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"minDebtInBase\":{\"details\":\"min debtAmount in EVMOS (base token)\"},\"positionIdOf\":{\"details\":\"userAddress => vaultAddress => positionId (array Index of position)\"},\"positions\":{\"details\":\"vaultAddress => Position[]\"},\"reservedPool\":{\"details\":\"EVMOS amount reserved by Protocol\"},\"totalAmount\":{\"details\":\"kor) \\uc720\\uc800\\uac00 \\uc608\\uce58\\ud55c \\uae08\\uc561 + auto-compound\\ub41c \\uae08\\uc561\"},\"totalShare\":{\"details\":\"kor) auto-compound\\ub418\\uc5b4\\ub3c4 totalShare\\ub294 \\ubcc0\\ud558\\uc9c0 \\uc54a\\uc74c.  \\uc720\\uc800\\ub294 \\uc608\\uce58\\ud558\\ub294 \\uc2dc\\uc810\\uc5d0 (\\uc608\\uce58 \\uae08\\uc561/totalAmount) * totalShare\\uc5d0 \\ud574\\ub2f9\\ud558\\ub294 share\\ub97c \\ubc1b\\uc74c.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"amountToShare(uint256)\":{\"notice\":\"\\uc720\\uc800\\ub294 \\uc608\\uce58\\ud558\\ub294 \\uc2dc\\uc810\\uc5d0 (\\uc608\\uce58 \\uae08\\uc561 / totalAmount) * totalShare\\uc5d0 \\ud574\\ub2f9\\ud558\\ub294 share\\ub97c \\ubc1b\\uc74c.\"},\"changePosition(address,int256,int256,uint256)\":{\"notice\":\"change position value case 1. changeEquityInBase > 0  - increase position value (call _stake function) - decrease debt ratio case 2. changeEquityInBase < 0  - decrease position value (call _unstake function) - increase debt ratio case 3. changeDebt > 0 (borrow more debt) - increase position value (call _stake function) - increase debt ratio case 4. changeEquity < 0 (repay debt by unstaking) - decrease position value (call _unstake function) - decrease debt ratio case 5. repayDebt > 0 (repay debt with user's own token)  or msg.value > 0 (repay debt with user's own EVMOS)\"},\"removePosition(address)\":{\"notice\":\"kor) \\ubd80\\ucc44\\ube44\\uc728\\uc774 100%\\uac00 \\ub118\\uc5b4\\uac00\\uba74 \\ud3ec\\uc9c0\\uc158\\uc744 \\uc9c1\\uc811 \\uc885\\ub8cc\\ud560 \\uc218 \\uc5c6\\ub2e4. -> \\uac15\\uc81c \\uccad\\uc0b0\\ub9cc \\uac00\\ub2a5.\"},\"repayDebt(address,uint256)\":{\"notice\":\"user should repay debt using debtTokenuser approve should be preceded\"},\"repayDebtInBase(address,uint256)\":{\"notice\":\"repaidDebtInBase = msg.value\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/Stayking.sol\":\"Stayking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IStayking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n\\n/************************************************************\\n * @dev\\n * Glossary\\n * debt : debtAmount in borrowing token (e.g. OSMO, ATOM)\\n * debtInBase: debtAmount in EVMOS(Base Token)\\n *************************************************************/\\ninterface IStayking { \\n\\n    function updateVault(address token, address vault) external;\\n    \\n    function tokenToVault(address token) external view returns(address vault);\\n\\n    function changeDelegator(address delegator) external;\\n    // function setWhitelistDelegatorStatus(address delegator, bool status) external;\\n\\n    /// @dev min debtAmount in EVMOS (base token)\\n    function minDebtInBase() external view returns (uint256);\\n\\n    function killFactorBps() external view returns(uint256);\\n\\n    function reservedBps() external view returns(uint256);\\n\\n    function debtAmountOf (\\n        address user,\\n        address vault\\n    ) external view returns(uint256 debt);\\n\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @param equity       equityAmount in EVMOS\\n    /// @param debtInBase   debtAmount in EVMOS\\n    function addPosition(\\n        address debtToken,\\n        uint256 equity,\\n        uint256 debtInBase\\n    ) payable external;\\n\\n    /// @param debtToken    debtToken Address (not vault address)\\n    function removePosition(address debtToken) external;\\n\\n    /// @dev Borrow more debt (increase debt ratio)\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @param extraDebtInBase  amount of additional debt in EVMOS\\n    function addDebt(\\n        address debtToken,\\n        uint256 extraDebtInBase\\n    ) external;\\n\\n    /// @dev Repay debt (decrease debt ratio)\\n    /// @notice user should repay debt using debtToken\\n    /// @notice user approve should be preceded\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @param repaidDebt  amount of repaid debt in debtToken\\n    function repayDebt(\\n        address debtToken,\\n        uint256 repaidDebt\\n    ) external;\\n\\n    function repayDebtInBase(\\n        address debtToken,\\n        uint256 minRepaid\\n    ) payable external;\\n\\n    /// @dev add additional equity (decrease debt ratio)\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @param extraEquity  amount of additional equity\\n    function addEquity(\\n        address debtToken,\\n        uint256 extraEquity\\n    ) payable external;\\n\\n    function positionInfo(\\n        address user,\\n        address vault\\n    ) external view returns (uint256 equityInBase, uint256 debtInBase, uint256 debt);\\n\\n    function isKillable(address debtToken, uint256 positionId) external view returns(bool);\\n    \\n    function kill(address debtToken, uint256 positionId) external;\\n\\n    /***********************\\n     * Only for Delegator *\\n     ***********************/\\n    function getAccruedValue(uint256 totalStaked) external view returns(uint256);\\n    function accrue(uint256 totalStaked) payable external;\\n\\n}\",\"keccak256\":\"0x98af80b0185f98dc23ee590c2ab981c8656eb7ac6d82175e485efecab11ca641\",\"license\":\"UNLICENSED\"},\"contracts/interface/ISwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/************************************************************\\n * @dev\\n * Glossary\\n * X : Input Token\\n * Y : Output Token\\n * Dx : Amount of Input Token\\n * Dy : Amount of Output Token\\n *************************************************************/\\ninterface ISwapHelper {\\n\\n    function getDy(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx\\n    ) external view returns (uint256 dy);\\n\\n    function getDx(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dy\\n    ) external view returns (uint256 dx);\\n\\n    function exchange(\\n        address tokenX,\\n        address tokenY,\\n        uint256 dx,\\n        uint256 minDy\\n    ) payable external returns (uint256 dy);\\n}\",\"keccak256\":\"0xe085ce8733ebf477156c5859b597770ce042a1bc6f7fd04bf6d2055df3d88708\",\"license\":\"UNLICENSED\"},\"contracts/interface/IUnbondedEvmos.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.3;\\n\\ninterface IUnbondedEvmos { \\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalAmount() external view returns (uint256);\\n\\n    function lastUnbondedAt() external view returns (uint256);\\n\\n    function unbondingInterval() external view returns (uint256);\\n\\n    function mintLockedToken(\\n        address to,\\n        address vault,\\n        uint256 amount,\\n        uint256 debtShare\\n    ) external;\\n\\n    function unlock(uint256 minRepaid) external;\\n\\n    function supplyUnbondedToken() payable external;\\n\\n    function isMinter(address account) external view returns(bool);\\n    \\n    function updateMinterStatus(address account, bool status) external;\\n\\n    function getUnlockable(address account) external view returns(uint256 unlockable, uint256 debt);\\n\\n    function isKillable(uint256 lockedId) external returns (bool);\\n\\n    function kill(uint256 lockedId) external;\\n}   \",\"keccak256\":\"0x1c8cf9aa9f5ddca974f718d424b21d5cb55fe3defae490a03a548d386d00a808\",\"license\":\"UNLICENSED\"},\"contracts/interface/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"./ISwapHelper.sol\\\";\\n\\n\\ninterface IVault { \\n\\n    function token() external returns(address);\\n    \\n    function stayking() external returns(address);\\n\\n    function interestModel() external returns(address);\\n\\n    function totalAmount() external view returns(uint256);\\n\\n    function debtAmountOf(address user) external view returns(uint256);\\n    \\n    function debtAmountInBase(address user) external view returns(uint256);\\n\\n    function totalDebtAmount() external view returns(uint256);\\n\\n    function accInterest() external view returns(uint256);\\n\\n    function utilizationRateBps() external view returns(uint256);\\n\\n    /// @dev denominator = 1E18 \\n    function getInterestRate() external view returns(uint256);\\n\\n    function saveUtilizationRateBps() external;\\n\\n    function deposit(uint256 amount) external returns(uint256 share);\\n\\n    function withdraw(uint256 share) external returns(uint256 amount);\\n\\n    function getPendingDebt(address user) external view returns(uint256 debt);\\n    \\n    function getPendingDebtInBase(address user) external view returns(uint256 debtInBase);\\n\\n    function getBaseIn(uint256 tokenOut) external view returns(uint256 baseIn);\\n\\n    function getBaseOut(uint256 tokenIn) external view returns(uint256 baseOut);\\n\\n    function getTokenIn(uint256 baseOut) external view returns(uint256 tokenIn);\\n\\n    function getTokenOut(uint256 baseIn) external view returns(uint256 tokenOut);\\n\\n    function pendingDebtAmountToShare(uint256 amount) external view returns(uint256);\\n\\n    function pendingDebtShareToAmount(uint256 share) external view returns(uint256);\\n\\n\\n    /******************************\\n     * Only for Stayking Contract *\\n     ******************************/\\n    function loan(address user, uint256 debtInBase) external returns(uint256 debt);\\n\\n    function repayInToken(address user, uint256 debt) external;\\n\\n    function repayInBase(\\n        address user, \\n        uint256 minRepaid\\n    ) payable external returns(uint256 repaid);\\n\\n    function takeDebtOwnership(\\n        address from,\\n        uint256 amount\\n    ) external;\\n\\n    function getInterestInBase() external view returns (uint256);\\n    function payInterest(uint256 minPaidInterest) external payable;\\n\\n    function pendRepay(\\n        address user,\\n        uint256 amount\\n    ) external returns(uint256 pendingDebtShare);\\n\\n    function repayPendingDebt(address user, uint256 minRepaidDebt) payable external returns(uint256);\\n\\n    function updateInterestModel(address newInterestModel) external;\\n    \\n    function updateSwapHelper(address newSwapHelper) external;\\n\\n    function updateMinReservedBps(uint256 newMinReservedBps) external;\\n}\",\"keccak256\":\"0xfb5874668d4890db306f613bb70616aea7963da03e182fe7e0d1463e70d1ad58\",\"license\":\"UNLICENSED\"},\"contracts/lib/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b70b1f6277d3a48fa1e38e103d184c4edb1f64184517be75996c66d93a066d2\",\"license\":\"MIT\"},\"contracts/lib/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.2;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x52d45f0d640d13ef9abf76356936783dd226832343be4131c61823a580dc4b83\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b9c7ca79622c2fdd96700b95c69f6a3c407b961ab1624df360690fd69137bad\",\"license\":\"MIT\"},\"contracts/lib/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa4888dbbfe34205606c1332b112d077e8a5381313f962cd2f910afbda5c527b2\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x56fa95af9d20027375bd6069383a4bd0d59c767c92af6ffacfc110a210fdeac9\",\"license\":\"MIT\"},\"contracts/lib/utils/SafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary SafeToken {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeApprove\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransfer\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransferFrom\\\"\\n        );\\n    }\\n\\n    function safeTransferEVMOS(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"!safeTransferEVMOS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3673f957556a65d32c0b4fca4aafcb2decf960c9a064b5008c1a43acd5f11ca5\",\"license\":\"MIT\"},\"contracts/token/Stayking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../interface/IStayking.sol\\\";\\nimport \\\"../interface/IVault.sol\\\";\\nimport \\\"../interface/ISwapHelper.sol\\\";\\nimport \\\"../interface/IUnbondedEvmos.sol\\\";\\nimport \\\"../lib/utils/SafeToken.sol\\\";\\nimport \\\"../lib/OwnableUpgradeable.sol\\\";\\nimport \\\"../lib/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract Stayking is IStayking, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n\\n    address private constant BASE_TOKEN = address(0);\\n\\n    event Stake(address indexed delegator, address indexed user, uint256 amount, uint256 share);\\n    event Unstake(address indexed delegator, address indexed user, uint256 amount, uint256 share);\\n    event AddPosition(address indexed user, address indexed vault, uint256 equity, uint256 debtInBase, uint256 debt, uint256 share);\\n    event RemovePosition(address indexed user, address indexed vault, uint256 equity, uint256 debtInBase, uint256 debt, uint256 share);\\n    event PositionChanged(address indexed user, address indexed vault, uint256 amount, uint256 share, uint256 debt);\\n    event Kill(address indexed killer, address indexed user, address vault, uint256 equity, uint256 debtInBase, uint256 debt, uint256 share);\\n    event Accrue(address indexed delegator, uint256 totalStaked, uint256 distributed);\\n\\n    // Operation Events\\n    event AddVault(address token, address vault);\\n    event UpdateVault(address token, address vault);\\n    event UpdateConfigs(uint256 minDebtInBase, uint256 killFactorBps, uint256 reservedBps);\\n    event ChangeDelegator(address delegator);\\n\\n    address public delegator;\\n    mapping(address => bool) public whitelistedKiller;\\n\\n    mapping(address => address) public override tokenToVault;\\n    address[] public vaults;\\n\\n    /// @dev kor) \\uc720\\uc800\\uac00 \\uc608\\uce58\\ud55c \\uae08\\uc561 + auto-compound\\ub41c \\uae08\\uc561\\n    uint256 public totalAmount;\\n    /// @dev kor) auto-compound\\ub418\\uc5b4\\ub3c4 totalShare\\ub294 \\ubcc0\\ud558\\uc9c0 \\uc54a\\uc74c.\\n    ///  \\uc720\\uc800\\ub294 \\uc608\\uce58\\ud558\\ub294 \\uc2dc\\uc810\\uc5d0 (\\uc608\\uce58 \\uae08\\uc561/totalAmount) * totalShare\\uc5d0 \\ud574\\ub2f9\\ud558\\ub294 share\\ub97c \\ubc1b\\uc74c.\\n    uint256 public totalShare;\\n\\n    /// @dev min debtAmount in EVMOS (base token)\\n    uint256 public override minDebtInBase;\\n    uint256 public override killFactorBps;\\n    uint256 public override reservedBps;\\n\\n    /// @dev EVMOS amount reserved by Protocol\\n    uint256 public reservedPool;\\n\\n    IUnbondedEvmos public uEVMOS;\\n\\n    struct Position {\\n        address user;\\n        /// @dev totalShare * (equity + debtInBase) / totalAmount\\n        uint256 share;\\n    }\\n\\n    /// @dev userAddress => vaultAddress => positionId (array Index of position)\\n    mapping(address => mapping(address => uint256)) public positionIdOf;\\n    /// @dev vaultAddress => Position[]\\n    mapping(address => Position[]) public positions;\\n    mapping(address => uint256) public positionsLengthOf;\\n\\n    // debt To Vault\\n    mapping (address => uint256) public totalDebtOf;\\n\\n    /*************\\n     * Modifiers *\\n    **************/\\n\\n    modifier onlyDelegator(){\\n        require(\\n            // whitelistedDelegator[msg.sender],\\n            msg.sender == delegator,\\n            \\\"Stayking: Not whitelisted delegator.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyKiller(){\\n        require(\\n            whitelistedKiller[msg.sender],\\n            \\\"Stayking: Not whitelisted Killer.\\\"\\n        );\\n        _;\\n    }\\n\\n    function __Stayking_init(\\n        address delegator_,\\n        address uEVMOS_\\n    ) external initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        // @TODO policy\\n        updateConfigs(\\n            1e16,  // minDebtInBase (10EVMOS)\\n            7500,    // killFactorBps\\n            3000     // reservedBps\\n        );\\n\\n        uEVMOS = IUnbondedEvmos(uEVMOS_);\\n        changeDelegator(delegator_);\\n    }\\n\\n    /**********************\\n     * Operate Functions *\\n    ***********************/\\n\\n    function changeDelegator (\\n        address _delegator\\n    ) public override onlyOwner {\\n        delegator = _delegator;\\n        emit ChangeDelegator(_delegator);\\n    }\\n\\n    function updateVault(\\n        address token,\\n        address vault\\n    ) public override onlyOwner {\\n        address beforeVault = tokenToVault[token];\\n\\n        if(beforeVault == address(0)){\\n            vaults.push(vault);\\n            emit AddVault(token, vault);\\n        }\\n        else {\\n            require(\\n                IVault(beforeVault).totalDebtAmount() == 0,\\n                \\\"updateVault: Debt remains on the existing vault.\\\"\\n            );\\n\\n            uint256 vaultsLength = vaults.length;\\n            bool vaultReplaced = false;\\n            for (uint256 i = 0; i < vaultsLength; i++) {\\n                if(vaults[i] == beforeVault){\\n                    vaults[i] = vault;\\n                    vaultReplaced = true;\\n                    break;\\n                }\\n            }\\n            assert(vaultReplaced);\\n            emit UpdateVault(token, vault);\\n        }\\n\\n        tokenToVault[token] = vault;\\n        // push null position\\n        positions[vault].push(\\n            Position({\\n                user: address(0),\\n                share: 0\\n            })\\n        );\\n\\n        positionsLengthOf[vault] = 1;\\n    }\\n\\n    function updateConfigs(\\n        uint256 _minDebtInBase,\\n        uint256 _killFactorBps,\\n        uint256 _reservedBps\\n    ) public onlyOwner {\\n        minDebtInBase = _minDebtInBase;\\n        killFactorBps = _killFactorBps;\\n        reservedBps = _reservedBps;\\n        emit UpdateConfigs(_minDebtInBase, _killFactorBps, _reservedBps);\\n    }\\n\\n    /***********************\\n     * Private Functions *\\n    ************************/\\n    function _stake(\\n        Position storage p,\\n        uint256 amount\\n    ) private returns (uint256 share) {\\n        share = amountToShare(amount);\\n        p.share += share;\\n        totalAmount += amount;\\n        totalShare += share;\\n        // send EVMOS to delegator\\n        SafeToken.safeTransferEVMOS(delegator, amount);\\n\\n        emit Stake(delegator, p.user, amount, share);\\n    }\\n\\n\\n    /**\\n     @param p           Position\\n     @param vault       owed by the user\\n     @param amount      unstaked amount\\n     @param repaidDebtInBase  repaid amount in EVMOS ( repaidDebt <= amount = shareToAmount(amount) )\\n     */\\n    function _unstake(\\n        Position storage p,\\n        address vault,\\n        uint256 amount,\\n        uint256 repaidDebtInBase\\n    ) private {\\n        require(repaidDebtInBase <= amount, \\\"unstake: repaidDebtInBase > unstaked amount\\\");\\n        uint256 share = amountToShare(amount);\\n        p.share -= share;\\n        totalAmount -= amount;\\n        totalShare -= share;\\n\\n        uint256 pendingDebtShare = IVault(vault).pendRepay(p.user, repaidDebtInBase);\\n\\n        uEVMOS.mintLockedToken(\\n            p.user,\\n            vault,\\n            amount,\\n            pendingDebtShare\\n        );\\n\\n        emit Unstake(delegator, p.user, amount, share);\\n    }\\n\\n    function _unstakeAll(\\n        Position storage p,\\n        address vault\\n    ) private returns(uint256 amount){\\n        uint256 debtInBase = IVault(vault).debtAmountInBase(p.user);\\n        amount = shareToAmount(p.share);\\n        _unstake(p, vault, shareToAmount(p.share), debtInBase);\\n    }\\n\\n    function _isHealthy(\\n        address vault,\\n        uint256 share,\\n        uint256 debt\\n    ) private view returns(bool healthy, uint256 debtInBase) {\\n        debtInBase = IVault(vault).getBaseIn(debt);\\n        healthy = debtInBase * 1e4 < shareToAmount(share) * killFactorBps;\\n    }\\n\\n    /******************\\n     * Util Functions *\\n    *******************/\\n    /// @notice\\n    /// \\uc720\\uc800\\ub294 \\uc608\\uce58\\ud558\\ub294 \\uc2dc\\uc810\\uc5d0 (\\uc608\\uce58 \\uae08\\uc561 / totalAmount) * totalShare\\uc5d0 \\ud574\\ub2f9\\ud558\\ub294 share\\ub97c \\ubc1b\\uc74c.\\n    function amountToShare(uint256 amount) public view returns(uint256) {\\n        return (totalAmount == 0) ? amount : (totalShare * amount) / totalAmount;\\n    }\\n\\n    function shareToAmount(uint256 share) public view returns(uint256) {\\n        return (totalShare == 0) ? share : (totalAmount * share) / totalShare;\\n    }\\n\\n    /******************************\\n     * Interface implementations *\\n    *******************************/\\n    function debtAmountOf(\\n        address user,\\n        address vault\\n    ) public view override returns(uint256) {\\n        return IVault(vault).debtAmountOf(user);\\n    }\\n\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @param equity       equityAmount in EVMOS\\n    /// @param debtInBase   debtAmount in EVMOS\\n    function addPosition(\\n        address debtToken,\\n        uint256 equity,\\n        uint256 debtInBase\\n    ) public payable override {\\n        address vault = tokenToVault[debtToken];\\n        require(positionIdOf[msg.sender][vault] == 0, \\\"addPosition: already have position\\\");\\n        require(equity == msg.value, \\\"addPosition: msg.value != equity\\\");\\n\\n        uint256 amount = equity + debtInBase;\\n        require(\\n            debtInBase * 1e4 < amount * killFactorBps,\\n            \\\"addPosition: bad debt, cannot open position\\\"\\n        );\\n\\n        // borrow token from vault\\n        // debtInBase == 0 -> 1x leverage\\n        uint256 debt = debtInBase > 0 ? \\n            IVault(vault).loan(msg.sender, debtInBase) : 0;\\n\\n        positions[vault].push(\\n            Position({\\n                user: msg.sender,\\n                share: 0\\n            })\\n        );\\n\\n        uint256 positionId = positionsLengthOf[vault];\\n        positionsLengthOf[vault] += 1;\\n        positionIdOf[msg.sender][vault] = positionId;\\n\\n        uint256 share = _stake(positions[vault][positionId], amount);\\n\\n        emit AddPosition(msg.sender, vault, equity, debtInBase, debt, share);\\n    }\\n\\n\\n    /// @dev remove all position of debtToken vault.\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @notice kor) \\ubd80\\ucc44\\ube44\\uc728\\uc774 100%\\uac00 \\ub118\\uc5b4\\uac00\\uba74 \\ud3ec\\uc9c0\\uc158\\uc744 \\uc9c1\\uc811 \\uc885\\ub8cc\\ud560 \\uc218 \\uc5c6\\ub2e4. -> \\uac15\\uc81c \\uccad\\uc0b0\\ub9cc \\uac00\\ub2a5.\\n    function removePosition(\\n        address debtToken\\n    ) public override {\\n        address vault = tokenToVault[debtToken];\\n        Position storage p = positions[vault][positionIdOf[msg.sender][vault]];\\n        require(p.share > 0, \\\"removePosition: No position for this token\\\");\\n\\n        uint256 debtAmount = debtAmountOf(msg.sender, vault);\\n        // 1. check if user can repay debt\\n        /// @dev amount in EVMOS that user have to repay\\n        uint256 currentDebtInBase = IVault(vault).getBaseIn(debtAmount);\\n\\n        uint256 unstakedAmount = _unstakeAll(p, vault);\\n        require(\\n            unstakedAmount >= currentDebtInBase,\\n            \\\"removePosition: Bad debt\\\"\\n        );\\n\\n        emit RemovePosition(\\n            msg.sender,\\n            vault,\\n            unstakedAmount - currentDebtInBase, // equity\\n            currentDebtInBase,                  // debt\\n            debtAmount,\\n            p.share\\n        );\\n\\n        positionIdOf[msg.sender][vault] = 0; // kor) positionId \\ucd08\\uae30\\ud654\\n    }\\n\\n    /// @dev Borrow more debt (increase debt ratio)\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @param extraDebtInBase  amount of additional debt in EVMOS\\n    function addDebt(\\n        address debtToken,\\n        uint256 extraDebtInBase\\n    ) public override {\\n        require(extraDebtInBase > 0, \\\"addDebt: extraDebtInBase <= 0\\\");\\n\\n        address vault = tokenToVault[debtToken];\\n        uint256 positionId = positionIdOf[msg.sender][vault];\\n        require(positionId > 0, \\\"addDebt: no position\\\");\\n\\n        Position storage p = positions[vault][positionId];\\n\\n        // borrow token from vault\\n        IVault(vault).loan(msg.sender, extraDebtInBase);\\n        _stake(p, extraDebtInBase);\\n\\n        uint256 debtAmount = debtAmountOf(msg.sender, vault);\\n        (bool healthy, ) = _isHealthy(vault, p.share, debtAmount);\\n        require(healthy, \\\"addDebt: bad debt, cannot add more debt anymore.\\\");\\n\\n        emit PositionChanged(\\n            msg.sender,\\n            vault,\\n            shareToAmount(p.share),\\n            p.share,\\n            debtAmount\\n        );\\n\\n    }\\n\\n    /// @dev Repay debt (decrease debt ratio, total staked amount(or share) does not change)\\n    /// @notice user should repay debt using debtToken\\n    /// @notice user approve should be preceded\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @param repaidDebt  amount of repaid debt in debtToken\\n    function repayDebt(\\n        address debtToken,\\n        uint256 repaidDebt\\n    ) public override {\\n        address vault = tokenToVault[debtToken];\\n        uint256 positionId = positionIdOf[msg.sender][vault];\\n        require(positionId > 0, \\\"repayDebt: no position\\\");\\n\\n        Position storage p = positions[vault][positionId];\\n        uint256 debtAmount = debtAmountOf(msg.sender, vault);\\n\\n        SafeToken.safeTransferFrom(\\n            debtToken,\\n            msg.sender,\\n            address(this),\\n            repaidDebt\\n        );\\n        SafeToken.safeApprove(debtToken, vault, repaidDebt);\\n        IVault(vault).repayInToken(msg.sender, repaidDebt);\\n\\n        emit PositionChanged(\\n            msg.sender,\\n            vault,\\n            shareToAmount(p.share),\\n            p.share,\\n            debtAmount - repaidDebt\\n        );\\n    }\\n\\n    /// @dev Repay debt with EVMOS (decrease debt ratio, total staked amount(or share) does not change)\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @param minRepaid    minimum value to be repaid\\n    /// @notice repaidDebtInBase = msg.value\\n    function repayDebtInBase(\\n        address debtToken,\\n        uint256 minRepaid\\n    ) public payable override {\\n        address vault = tokenToVault[debtToken];\\n        uint256 positionId = positionIdOf[msg.sender][vault];\\n        require(positionId > 0, \\\"repayDebtInBase: no position\\\");\\n\\n        Position storage p = positions[vault][positionId];\\n        uint256 debtAmount = debtAmountOf(msg.sender, vault);\\n        uint256 repaidDebt = IVault(vault).repayInBase{value: msg.value}(msg.sender, minRepaid);\\n        emit PositionChanged(\\n            msg.sender,\\n            vault,\\n            shareToAmount(p.share),\\n            p.share,\\n            debtAmount - repaidDebt\\n        );\\n    }\\n\\n\\n    /// @dev add additional equity (decrease debt ratio)\\n    /// @param debtToken    debtToken Address (not vault address)\\n    /// @param extraEquity  amount of additional equity\\n    function addEquity(\\n        address debtToken,\\n        uint256 extraEquity\\n    ) payable public override {\\n        address vault = tokenToVault[debtToken];\\n        uint256 positionId = positionIdOf[msg.sender][vault];\\n        require(positionId > 0, \\\"addEquity: no position\\\");\\n        Position storage p = positions[vault][positionId];\\n\\n        _stake(p, extraEquity);\\n        emit PositionChanged(\\n            msg.sender,\\n            vault,\\n            shareToAmount(p.share),\\n            p.share,\\n            debtAmountOf(msg.sender, vault)\\n        );\\n    }\\n\\n    /** @notice change position value\\n        case 1. changeEquityInBase > 0 \\n            - increase position value (call _stake function)\\n            - decrease debt ratio\\n        case 2. changeEquityInBase < 0 \\n            - decrease position value (call _unstake function)\\n            - increase debt ratio\\n        case 3. changeDebt > 0 (borrow more debt)\\n            - increase position value (call _stake function)\\n            - increase debt ratio\\n        case 4. changeEquity < 0 (repay debt by unstaking)\\n            - decrease position value (call _unstake function)\\n            - decrease debt ratio\\n        case 5. repayDebt > 0 (repay debt with user's own token) \\n                or msg.value > 0 (repay debt with user's own EVMOS)\\n                @dev (msg.value - changeEquityInBase) equals to repayDebtInBase\\n            - position value not changes (not call _stake/_unstake function)\\n            - decrease debt ratio\\n        @dev User should approve this first\\n        @dev if msg.value > 0, changeEquityInBase >= 0\\n             since msg.value = changeEquityInBase + repayDebtInBase\\n     */\\n    function changePosition(\\n        address debtToken,\\n        int256  equityInBaseChanged,\\n        int256  debtInBaseChanged,\\n        uint256 repaidDebt\\n    ) public payable {\\n        address vault = tokenToVault[debtToken];\\n        uint256 positionId = positionIdOf[msg.sender][vault];\\n        require(positionId > 0, \\\"changePosition: no position\\\");\\n\\n        uint256 repaidDebtInBase;\\n        uint256 stakedAmount; // can added if equityInBaseChanged > 0 or  debtInBaseChanged > 0 (add equity or borrow more debt)\\n        uint256 unstakedAmount;\\n        if(equityInBaseChanged >= 0){    // stake more with own equity\\n            require(\\n                msg.value >= uint256(equityInBaseChanged), \\n                \\\"changePosition: Not enough msg.value\\\"\\n            );\\n            unchecked {\\n                repaidDebtInBase = msg.value - uint256(equityInBaseChanged);\\n                stakedAmount = uint256(equityInBaseChanged);\\n            }\\n        } \\n        else { // partial close position made up of equity\\n            unstakedAmount = uint256(-equityInBaseChanged);\\n            // repaidDebtInBase = 0\\n        }\\n\\n        if(debtInBaseChanged > 0){ // borrow more debt (stake more)\\n            IVault(vault).loan(msg.sender, uint256(debtInBaseChanged));\\n            stakedAmount += uint256(debtInBaseChanged);\\n        }\\n        else if(debtInBaseChanged < 0){ // partial close position made up of debt\\n            unstakedAmount += uint256(-debtInBaseChanged);\\n        }\\n\\n        /******************************************\\n           Repay Debt (position value not change)\\n         ******************************************/\\n        if(repaidDebt > 0){ // repay debt for token, approve should be proceed\\n            SafeToken.safeTransferFrom(debtToken, msg.sender, address(this), repaidDebt);\\n            IVault(vault).repayInToken(msg.sender, repaidDebt);\\n        }\\n        if(repaidDebtInBase > 0){ // repay debt for EVMOS\\n            IVault(vault).repayInBase{value: repaidDebtInBase}(msg.sender, 1);\\n        }\\n\\n        Position storage p = positions[vault][positionId];\\n        if(stakedAmount >= unstakedAmount){\\n            _stake(p, stakedAmount - unstakedAmount);\\n        } else {\\n            _unstake(\\n                p,\\n                vault,\\n                unstakedAmount - stakedAmount,\\n                debtInBaseChanged < 0 ? uint256(-debtInBaseChanged) : 0\\n            );\\n        }\\n\\n        uint256 debtAmount = debtAmountOf(msg.sender, vault);\\n        (bool healthy, ) = _isHealthy(vault, p.share, debtAmount);\\n        require(healthy, \\\"changePosition: bad debt\\\");\\n\\n        emit PositionChanged(\\n            msg.sender,\\n            vault,\\n            shareToAmount(p.share),\\n            p.share,\\n            debtAmountOf(msg.sender, vault)\\n        );\\n    }\\n\\n    /**\\n        @dev returns position's value & debt value\\n        position value: positionValueInBase\\n        equity value: positionValueInBase - debtInBase\\n        debt value: debtInBase\\n        debt ratio: debtInBase / positionValueInBase * 100(%)\\n        kill factor: killFactorBps / 100\\n        safety buffer: (kill factor) - (debt ratio)\\n     */\\n    function positionInfo(\\n        address user,\\n        address debtToken\\n    ) public override view returns (uint256 positionValueInBase, uint256 debtInBase, uint256 debt) {\\n        address vault = tokenToVault[debtToken];\\n        uint256 positionId = positionIdOf[user][vault];\\n        Position memory p = positions[vault][positionId];\\n\\n        positionValueInBase = shareToAmount(p.share);\\n\\n        debt = IVault(vault).debtAmountOf(user);\\n        debtInBase = IVault(vault).getBaseIn(debt);\\n    }\\n\\n    function isKillable(\\n        address debtToken,\\n        uint256 positionId\\n    ) public override view returns(bool healthy) {\\n        address vault = tokenToVault[debtToken];\\n        Position memory p = positions[vault][positionId];\\n\\n        if(p.share == 0)    /// @dev removed position\\n            return false;\\n        (healthy, ) = _isHealthy(vault, p.share, debtAmountOf(p.user, vault));\\n    }\\n\\n    function kill(\\n        address debtToken,\\n        uint256 positionId\\n    ) public override onlyKiller {\\n        address vault = tokenToVault[debtToken];\\n        Position storage p = positions[vault][positionId];\\n        require(p.share > 0, \\\"kill: removed position\\\");\\n\\n        uint256 debt = debtAmountOf(p.user, vault);\\n        (bool healthy, uint256 debtInBase) = _isHealthy(vault, p.share, debt);\\n        require(healthy, \\\"kill: still safe position.\\\");\\n\\n        uint256 unstakedAmount = _unstakeAll(p, vault);\\n\\n        emit Kill(\\n            msg.sender,\\n            p.user,\\n            vault,\\n            unstakedAmount - debtInBase,\\n            debtInBase,\\n            debt,\\n            p.share\\n        );\\n\\n    }\\n\\n    /***********************\\n     * Only for Delegator *\\n     ***********************/\\n    /// @param totalStaked  current total staked EVMOS (= last total amount + reward)\\n    function getAccruedValue (\\n        uint256 totalStaked\\n    ) public view override returns(uint256) {\\n        uint256 reward = totalStaked - totalAmount;\\n        uint256 reserved = reward * reservedBps / 1E4;\\n\\n        uint256 vaultsLength = vaults.length;\\n        uint256 interest = 0;\\n        for(uint256 i = 0; i < vaultsLength; i++){\\n            interest += IVault(vaults[i]).getInterestInBase();\\n        }\\n\\n        return reserved + interest;\\n    }\\n\\n    /// @dev msg.value = all of staking reward \\n    /// @param totalStaked  current total staked EVMOS before distributed\\n    function accrue(\\n        uint256 totalStaked\\n    ) payable public onlyDelegator override {\\n\\n        // 1. distribute to Protocol\\n        uint256 reserved = (totalStaked - totalAmount) * reservedBps / 1E4;\\n        reservedPool += reserved;\\n\\n        uint256 sumInterests = 0;\\n        uint256 vaultsLength = vaults.length;\\n        /// @dev save interest for each vault\\n        uint256[] memory interestFor = new uint256[](vaultsLength);\\n        for(uint256 i = 0; i < vaultsLength; i++){\\n            interestFor[i] = IVault(vaults[i]).getInterestInBase();\\n            sumInterests += interestFor[i];\\n        }\\n\\n        /// @dev most case, all of staking reward >= vault interests + reserved\\n        uint256 distributable = msg.value - reserved;\\n        if(distributable >= sumInterests){\\n            for(uint256 i = 0; i < vaultsLength; i++){\\n                IVault(vaults[i]).payInterest{value: interestFor[i]}(\\n                    IVault(vaults[i]).accInterest()\\n                );\\n            }\\n\\n            totalAmount = totalStaked - reserved - sumInterests;\\n\\n            // return remained EVMOS\\n            uint256 remained = msg.value - reserved - sumInterests;\\n            if(remained > 0){\\n                SafeToken.safeTransferEVMOS(msg.sender, remained);\\n            }\\n\\n            emit Accrue(msg.sender, totalStaked, reserved + sumInterests);\\n        }\\n    /**\\n        @dev\\n        else case is when the sum of interest for vaults is insufficient.\\n        this case, totalAmount not changes\\n        */\\n        else {  \\n            for(uint256 i = 0; i < vaultsLength; i++){\\n                IVault vault = IVault(vaults[i]);\\n                uint256 interestInBase = interestFor[i] * distributable / sumInterests;\\n                uint256 minPaidInterest = vault.getTokenOut(interestInBase);\\n                vault.payInterest{value: interestInBase}(minPaidInterest);\\n            }\\n\\n            emit Accrue(msg.sender, totalStaked, msg.value);\\n        }\\n    }\\n\\n    /// @dev Fallback function to accept EVMOS.\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xc35e0e4f4683a4d76342954eca3a8ab31cadb6ce188858214f7857dc76f52546\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506135c0806100206000396000f3fe6080604052600436106102065760003560e01c80638c64ea4a11610117578063bed06b0b116100a5578063df5ca1f81161006c578063df5ca1f814610658578063e4175aee14610678578063ef6b247914610698578063f0e63edf146106ab578063f2fde38b146106c157005b8063bed06b0b146105d1578063c1be6677146105e4578063c6918a6114610612578063ce9b793014610625578063cff07fd11461064557005b8063a3381d28116100e9578063a3381d2814610509578063afd06b3414610539578063b1ae5ed314610559578063b2a2a96b14610579578063bb94d3db1461059957005b80638c64ea4a1461047e5780638da5cb5b1461049e57806392707802146104bc5780639f2b2833146104dc57005b806334c389ef1161019457806352e83e521161016657806352e83e52146103f05780635ff0253114610406578063715018a614610436578063744f4cf61461044b57806379e20bdc1461045e57005b806334c389ef146103485780634f9e3805146103685780635066f3b51461038857806351dabb75146103c357005b80631b451d28116101d85780631b451d28146102b257806327dfaf92146102d257806328f55a6c146102f25780632d4047e5146103085780632d6f80131461032857005b8063026c42071461020f5780630c7e172514610238578063178483a7146102865780631a39d8ef1461029c57005b3661020d57005b005b34801561021b57600080fd5b50610225609c5481565b6040519081526020015b60405180910390f35b34801561024457600080fd5b5061026e6102533660046132b3565b6099602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161022f565b34801561029257600080fd5b50610225609d5481565b3480156102a857600080fd5b50610225609b5481565b3480156102be57600080fd5b5061020d6102cd3660046132cd565b6106e1565b3480156102de57600080fd5b506102256102ed3660046132cd565b610a1b565b3480156102fe57600080fd5b50610225609e5481565b34801561031457600080fd5b506102256103233660046133b9565b610aa1565b34801561033457600080fd5b506102256103433660046133b9565b610ad1565b34801561035457600080fd5b5061020d610363366004613337565b610aee565b34801561037457600080fd5b5061020d6103833660046133e9565b610d6f565b34801561039457600080fd5b506103a86103a33660046132cd565b610dcd565b6040805193845260208401929092529082015260600161022f565b3480156103cf57600080fd5b506102256103de3660046132b3565b60a46020526000908152604090205481565b3480156103fc57600080fd5b50610225609f5481565b34801561041257600080fd5b50610426610421366004613337565b610f74565b604051901515815260200161022f565b34801561044257600080fd5b5061020d61102e565b61020d6104593660046133b9565b611042565b34801561046a57600080fd5b5061020d610479366004613337565b611640565b34801561048a57600080fd5b5061026e6104993660046133b9565b6117ec565b3480156104aa57600080fd5b506033546001600160a01b031661026e565b3480156104c857600080fd5b5061020d6104d7366004613337565b611816565b3480156104e857600080fd5b506102256104f73660046132b3565b60a56020526000908152604090205481565b34801561051557600080fd5b506104266105243660046132b3565b60986020526000908152604090205460ff1681565b34801561054557600080fd5b5060a15461026e906001600160a01b031681565b34801561056557600080fd5b5061020d6105743660046132b3565b611a31565b34801561058557600080fd5b5061020d6105943660046132cd565b611a8d565b3480156105a557600080fd5b506102256105b43660046132cd565b60a260209081526000928352604080842090915290825290205481565b61020d6105df3660046132ff565b611bde565b3480156105f057600080fd5b506106046105ff366004613337565b612005565b60405161022f92919061344d565b61020d610620366004613337565b61204b565b34801561063157600080fd5b5060975461026e906001600160a01b031681565b61020d610653366004613360565b612200565b34801561066457600080fd5b5061020d6106733660046132b3565b612530565b34801561068457600080fd5b506102256106933660046133b9565b61277c565b61020d6106a6366004613337565b612893565b3480156106b757600080fd5b5061022560a05481565b3480156106cd57600080fd5b5061020d6106dc3660046132b3565b6129c3565b6106e9612a3c565b6001600160a01b03808316600090815260996020526040902054168061079957609a80546001810182556000919091527f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be40180546001600160a01b0319166001600160a01b0384811691821790925560408051928616835260208301919091527f7f03ac7449144076e2d9d5a237c3ff0d0108e0a2ebdd5213c4b0de6f4d4f6953910160405180910390a1610997565b806001600160a01b031663c8dffa956040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d257600080fd5b505afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a91906133d1565b156108755760405162461bcd60e51b815260206004820152603060248201527f7570646174655661756c743a20446562742072656d61696e73206f6e2074686560448201526f1032bc34b9ba34b733903b30bab63a1760811b60648201526084015b60405180910390fd5b609a546000805b8281101561093557836001600160a01b0316609a82815481106108af57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614156109235784609a82815481106108ec57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060019150610935565b8061092d8161351f565b91505061087c565b508061095157634e487b7160e01b600052600160045260246000fd5b604080516001600160a01b038088168252861660208201527f4cc233b502e1e28f371b28114d4a8be87a93f330c18e3c339079fc498320fb8d910160405180910390a150505b506001600160a01b03918216600090815260996020908152604080832080546001600160a01b031990811695871695861790915584845260a38352818420825180840184528581528085018681528254600181810185559388528688209251600290910290920180549094169190981617825595519086015592825260a490522055565b604051636592183b60e01b81526001600160a01b03838116600483015260009190831690636592183b9060240160206040518083038186803b158015610a6057600080fd5b505afa158015610a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9891906133d1565b90505b92915050565b6000609b54600014610acd57609b5482609c54610abe91906134e9565b610ac891906134c9565b610a9b565b5090565b6000609c54600014610acd57609c5482609b54610abe91906134e9565b60008111610b3e5760405162461bcd60e51b815260206004820152601d60248201527f616464446562743a20657874726144656274496e42617365203c3d2030000000604482015260640161086c565b6001600160a01b0380831660009081526099602090815260408083205433845260a2835281842094168084529390915290205480610bb55760405162461bcd60e51b815260206004820152601460248201527330b2322232b13a1d103737903837b9b4ba34b7b760611b604482015260640161086c565b6001600160a01b038216600090815260a360205260408120805483908110610bed57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202019050826001600160a01b031663185cc75133866040518363ffffffff1660e01b8152600401610c2b92919061344d565b602060405180830381600087803b158015610c4557600080fd5b505af1158015610c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7d91906133d1565b50610c888185612a96565b506000610c953385610a1b565b90506000610ca885846001015484612b58565b50905080610d115760405162461bcd60e51b815260206004820152603060248201527f616464446562743a2062616420646562742c2063616e6e6f7420616464206d6f60448201526f3932903232b13a1030b73cb6b7b9329760811b606482015260840161086c565b846001600160a01b0316336001600160a01b031660008051602061356b833981519152610d418660010154610ad1565b600187015460408051928352602083019190915281018690526060015b60405180910390a350505050505050565b610d77612a3c565b609d839055609e829055609f81905560408051848152602081018490529081018290527fe032360dc1790b6d0ffbd119645e134124ea15d2ab7d012f101fe1df3016a52c906060015b60405180910390a1505050565b6001600160a01b03808216600090815260996020908152604080832054868516845260a2835281842094168084529382528083205460a3909252822080549293849384939192849183908110610e3357634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805180820190915260029092020180546001600160a01b03168252600101549181018290529150610e7090610ad1565b604051636592183b60e01b81526001600160a01b038a8116600483015291975090841690636592183b9060240160206040518083038186803b158015610eb557600080fd5b505afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed91906133d1565b6040516312bad57f60e31b8152600481018290529094506001600160a01b038416906395d6abf89060240160206040518083038186803b158015610f3057600080fd5b505afa158015610f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6891906133d1565b94505050509250925092565b6001600160a01b0380831660009081526099602090815260408083205490931680835260a3909152918120805491929183919085908110610fc557634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805180820190915260029092020180546001600160a01b0316825260010154918101829052915061100857600092505050610a9b565b61102482826020015161101f846000015186610a1b565b612b58565b5095945050505050565b611036612a3c565b6110406000612c04565b565b6097546001600160a01b031633146110a85760405162461bcd60e51b8152602060048201526024808201527f537461796b696e673a204e6f742077686974656c69737465642064656c6567616044820152633a37b91760e11b606482015260840161086c565b6000612710609f54609b54846110be9190613508565b6110c891906134e9565b6110d291906134c9565b90508060a060008282546110e691906134b1565b9091555050609a54600090818167ffffffffffffffff81111561111957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611142578160200160208202803683370190505b50905060005b8281101561126557609a818154811061117157634e487b7160e01b600052603260045260246000fd5b6000918252602091829020015460408051630f5f4c7f60e21b815290516001600160a01b0390921692633d7d31fc92600480840193829003018186803b1580156111ba57600080fd5b505afa1580156111ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f291906133d1565b82828151811061121257634e487b7160e01b600052603260045260246000fd5b60200260200101818152505081818151811061123e57634e487b7160e01b600052603260045260246000fd5b60200260200101518461125191906134b1565b93508061125d8161351f565b915050611148565b5060006112728534613508565b90508381106114815760005b838110156113f457609a81815481106112a757634e487b7160e01b600052603260045260246000fd5b60009182526020909120015483516001600160a01b039091169063ad452d75908590849081106112e757634e487b7160e01b600052603260045260246000fd5b6020026020010151609a848154811061131057634e487b7160e01b600052603260045260246000fd5b6000918252602091829020015460408051636d22f63f60e11b815290516001600160a01b039092169263da45ec7e92600480840193829003018186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139191906133d1565b6040518363ffffffff1660e01b81526004016113af91815260200190565b6000604051808303818588803b1580156113c857600080fd5b505af11580156113dc573d6000803e3d6000fd5b505050505080806113ec9061351f565b91505061127e565b50836114008688613508565b61140a9190613508565b609b5560008461141a8734613508565b6114249190613508565b90508015611436576114363382612c56565b337f68f604dad2502091469814ccdd58acac4592d7766a922eee86e6ab9965cfe94988611463888a6134b1565b6040805192835260208301919091520160405180910390a250611638565b60005b838110156115fc576000609a82815481106114af57634e487b7160e01b600052603260045260246000fd5b600091825260208220015485516001600160a01b039091169250879085908790869081106114ed57634e487b7160e01b600052603260045260246000fd5b60200260200101516114ff91906134e9565b61150991906134c9565b6040516315d6dae960e01b8152600481018290529091506000906001600160a01b038416906315d6dae99060240160206040518083038186803b15801561154f57600080fd5b505afa158015611563573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158791906133d1565b60405163ad452d7560e01b8152600481018290529091506001600160a01b0384169063ad452d759084906024016000604051808303818588803b1580156115cd57600080fd5b505af11580156115e1573d6000803e3d6000fd5b505050505050505080806115f49061351f565b915050611484565b506040805187815234602082015233917f68f604dad2502091469814ccdd58acac4592d7766a922eee86e6ab9965cfe949910160405180910390a25b505050505050565b6001600160a01b0380831660009081526099602090815260408083205433845260a28352818420941680845293909152902054806116b95760405162461bcd60e51b81526020600482015260166024820152753932b830bca232b13a1d103737903837b9b4ba34b7b760511b604482015260640161086c565b6001600160a01b038216600090815260a3602052604081208054839081106116f157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202019050600061170d3385610a1b565b905061171b86333088612d08565b611726868587612e18565b604051630724e59160e41b81526001600160a01b0385169063724e591090611754903390899060040161344d565b600060405180830381600087803b15801561176e57600080fd5b505af1158015611782573d6000803e3d6000fd5b50505050836001600160a01b0316336001600160a01b031660008051602061356b8339815191526117b68560010154610ad1565b60018601546117c58a87613508565b604080519384526020840192909252908201526060015b60405180910390a3505050505050565b609a81815481106117fc57600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526098602052604090205460ff1661187f5760405162461bcd60e51b815260206004820152602160248201527f537461796b696e673a204e6f742077686974656c6973746564204b696c6c65726044820152601760f91b606482015260840161086c565b6001600160a01b0380831660009081526099602090815260408083205490931680835260a39091529181208054849081106118ca57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201905060008160010154116119275760405162461bcd60e51b815260206004820152601660248201527535b4b6361d103932b6b7bb32b2103837b9b4ba34b7b760511b604482015260640161086c565b805460009061193f906001600160a01b031684610a1b565b905060008061195385856001015485612b58565b91509150816119a45760405162461bcd60e51b815260206004820152601a60248201527f6b696c6c3a207374696c6c207361666520706f736974696f6e2e000000000000604482015260640161086c565b60006119b08587612f24565b85549091506001600160a01b0316337f62b067e31c5a2d2734bc19924c46c930e1b7063b5b473238f2f8bb7ab88a15b6886119eb8686613508565b60018a0154604080516001600160a01b039094168452602084019290925290820187905260608201899052608082015260a0015b60405180910390a35050505050505050565b611a39612a3c565b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527fc46722a14b09e7b7e59991ec89fb4bb88ffed57f1b2187a65e959f5c0053716d9060200160405180910390a150565b600054610100900460ff1615808015611aad5750600054600160ff909116105b80611ac75750303b158015611ac7575060005460ff166001145b611b2a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161086c565b6000805460ff191660011790558015611b4d576000805461ff0019166101001790555b611b55612fd5565b611b5d613004565b611b73662386f26fc10000611d4c610bb8610d6f565b60a180546001600160a01b0319166001600160a01b038416179055611b9783611a31565b8015611bd9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610dc0565b505050565b6001600160a01b0380851660009081526099602090815260408083205433845260a2835281842094168084529390915290205480611c5e5760405162461bcd60e51b815260206004820152601b60248201527f6368616e6765506f736974696f6e3a206e6f20706f736974696f6e0000000000604482015260640161086c565b6000806000808812611cd35787341015611cc65760405162461bcd60e51b8152602060048201526024808201527f6368616e6765506f736974696f6e3a204e6f7420656e6f756768206d73672e76604482015263616c756560e01b606482015260840161086c565b8734039250879150611cdf565b611cdc8861353a565b90505b6000871315611d7a5760405163185cc75160e01b81526001600160a01b0386169063185cc75190611d169033908b9060040161344d565b602060405180830381600087803b158015611d3057600080fd5b505af1158015611d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6891906133d1565b50611d7387836134b1565b9150611d99565b6000871215611d9957611d8c8761353a565b611d9690826134b1565b90505b8515611e0c57611dab89333089612d08565b604051630724e59160e41b81526001600160a01b0386169063724e591090611dd99033908a9060040161344d565b600060405180830381600087803b158015611df357600080fd5b505af1158015611e07573d6000803e3d6000fd5b505050505b8215611e9757604051639d2e6fcb60e01b81526001600160a01b03861690639d2e6fcb908590611e4390339060019060040161344d565b6020604051808303818588803b158015611e5c57600080fd5b505af1158015611e70573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611e9591906133d1565b505b6001600160a01b038516600090815260a360205260408120805486908110611ecf57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202019050818310611eff57611ef981611ef48486613508565b612a96565b50611f2b565b611f2b8187611f0e8686613508565b60008c12611f1d576000613033565b611f268c61353a565b613033565b6000611f373388610a1b565b90506000611f4a88846001015484612b58565b50905080611f9a5760405162461bcd60e51b815260206004820152601860248201527f6368616e6765506f736974696f6e3a2062616420646562740000000000000000604482015260640161086c565b876001600160a01b0316336001600160a01b031660008051602061356b833981519152611fca8660010154610ad1565b8660010154611fd9338e610a1b565b6040805193845260208401929092529082015260600160405180910390a3505050505050505050505050565b60a3602052816000526040600020818154811061202157600080fd5b6000918252602090912060029091020180546001909101546001600160a01b039091169250905082565b6001600160a01b0380831660009081526099602090815260408083205433845260a28352818420941680845293909152902054806120cb5760405162461bcd60e51b815260206004820152601c60248201527f726570617944656274496e426173653a206e6f20706f736974696f6e00000000604482015260640161086c565b6001600160a01b038216600090815260a36020526040812080548390811061210357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202019050600061211f3385610a1b565b90506000846001600160a01b0316639d2e6fcb3433896040518463ffffffff1660e01b815260040161215292919061344d565b6020604051808303818588803b15801561216b57600080fd5b505af115801561217f573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906121a491906133d1565b9050846001600160a01b0316336001600160a01b031660008051602061356b8339815191526121d68660010154610ad1565b60018701546121e58688613508565b60408051938452602084019290925290820152606001610d5e565b6001600160a01b0380841660009081526099602090815260408083205433845260a283528184209416808452939091529020541561228b5760405162461bcd60e51b815260206004820152602260248201527f616464506f736974696f6e3a20616c7265616479206861766520706f7369746960448201526137b760f11b606482015260840161086c565b3483146122da5760405162461bcd60e51b815260206004820181905260248201527f616464506f736974696f6e3a206d73672e76616c756520213d20657175697479604482015260640161086c565b60006122e683856134b1565b9050609e54816122f691906134e9565b612302846127106134e9565b106123635760405162461bcd60e51b815260206004820152602b60248201527f616464506f736974696f6e3a2062616420646562742c2063616e6e6f74206f7060448201526a32b7103837b9b4ba34b7b760a91b606482015260840161086c565b60008084116123735760006123f3565b60405163185cc75160e01b81526001600160a01b0384169063185cc751906123a1903390889060040161344d565b602060405180830381600087803b1580156123bb57600080fd5b505af11580156123cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f391906133d1565b6001600160a01b03848116600081815260a360209081526040808320815180830183523381528084018581528254600180820185559387528587209251600290910290920180546001600160a01b03191692909816919091178755519581019590955592825260a4905290812080549394509061247083856134b1565b909155505033600090815260a2602090815260408083206001600160a01b0388168452825280832084905560a3909152812080546124db9190849081106124c757634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020185612a96565b6040805189815260208101899052908101859052606081018290529091506001600160a01b0386169033907f92b0fd5c6dbe6ec5b43a8afae4c587c1db47afcca43a21b7800bd848fcf8e49690608001611a1f565b6001600160a01b0380821660009081526099602090815260408083205490931680835260a3825283832033845260a28352848420828552909252928220548154811061258c57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201905060008160010154116126035760405162461bcd60e51b815260206004820152602a60248201527f72656d6f7665506f736974696f6e3a204e6f20706f736974696f6e20666f72206044820152693a3434b9903a37b5b2b760b11b606482015260840161086c565b600061260f3384610a1b565b6040516312bad57f60e31b8152600481018290529091506000906001600160a01b038516906395d6abf89060240160206040518083038186803b15801561265557600080fd5b505afa158015612669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268d91906133d1565b9050600061269b8486612f24565b9050818110156126ed5760405162461bcd60e51b815260206004820152601860248201527f72656d6f7665506f736974696f6e3a2042616420646562740000000000000000604482015260640161086c565b6001600160a01b038516337f3cb91b4d61d4fefa96da17651a09b54f7b6751cb68d11134cf0efe0a496579686127238585613508565b600188015460408051928352602083018890528201889052606082015260800160405180910390a3505033600090815260a2602090815260408083206001600160a01b0396909616835294905292832092909255505050565b600080609b548361278d9190613508565b90506000612710609f54836127a291906134e9565b6127ac91906134c9565b609a549091506000805b8281101561287e57609a81815481106127df57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020015460408051630f5f4c7f60e21b815290516001600160a01b0390921692633d7d31fc92600480840193829003018186803b15801561282857600080fd5b505afa15801561283c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286091906133d1565b61286a90836134b1565b9150806128768161351f565b9150506127b6565b5061288981846134b1565b9695505050505050565b6001600160a01b0380831660009081526099602090815260408083205433845260a283528184209416808452939091529020548061290c5760405162461bcd60e51b815260206004820152601660248201527530b23222b8bab4ba3c9d103737903837b9b4ba34b7b760511b604482015260640161086c565b6001600160a01b038216600090815260a36020526040812080548390811061294457634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201905061295e8185612a96565b50826001600160a01b0316336001600160a01b031660008051602061356b83398151915261298f8460010154610ad1565b846001015461299e3389610a1b565b6040805193845260208401929092529082015260600160405180910390a35050505050565b6129cb612a3c565b6001600160a01b038116612a305760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161086c565b612a3981612c04565b50565b6033546001600160a01b031633146110405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161086c565b6000612aa182610aa1565b905080836001016000828254612ab791906134b1565b9250508190555081609b6000828254612ad091906134b1565b9250508190555080609c6000828254612ae991906134b1565b9091555050609754612b04906001600160a01b031683612c56565b825460975460408051858152602081018590526001600160a01b0393841693909216917f63602d0ecc7b3a0ef7ff1a116e23056662d64280355ba8031b6d0d767c4b4458910160405180910390a392915050565b6040516312bad57f60e31b81526004810182905260009081906001600160a01b038616906395d6abf89060240160206040518083038186803b158015612b9d57600080fd5b505afa158015612bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd591906133d1565b9050609e54612be385610ad1565b612bed91906134e9565b612bf9826127106134e9565b109150935093915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516000808252602082019092526001600160a01b038416908390604051612c809190613414565b60006040518083038185875af1925050503d8060008114612cbd576040519150601f19603f3d011682016040523d82523d6000602084013e612cc2565b606091505b5050905080611bd95760405162461bcd60e51b815260206004820152601260248201527121736166655472616e7366657245564d4f5360701b604482015260640161086c565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691612d6c9190613414565b6000604051808303816000865af19150503d8060008114612da9576040519150601f19603f3d011682016040523d82523d6000602084013e612dae565b606091505b5091509150818015612dd8575080511580612dd8575080806020019051810190612dd89190613392565b6116385760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b604482015260640161086c565b600080846001600160a01b031663095ea7b38585604051602401612e3d92919061344d565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612e769190613414565b6000604051808303816000865af19150503d8060008114612eb3576040519150601f19603f3d011682016040523d82523d6000602084013e612eb8565b606091505b5091509150818015612ee2575080511580612ee2575080806020019051810190612ee29190613392565b612f1d5760405162461bcd60e51b815260206004820152600c60248201526b2173616665417070726f766560a01b604482015260640161086c565b5050505050565b815460405163b95d4ae160e01b81526001600160a01b03918216600482015260009182919084169063b95d4ae19060240160206040518083038186803b158015612f6d57600080fd5b505afa158015612f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa591906133d1565b9050612fb48460010154610ad1565b9150612fce8484612fc88760010154610ad1565b84613033565b5092915050565b600054610100900460ff16612ffc5760405162461bcd60e51b815260040161086c90613466565b611040613239565b600054610100900460ff1661302b5760405162461bcd60e51b815260040161086c90613466565b611040613269565b818111156130975760405162461bcd60e51b815260206004820152602b60248201527f756e7374616b653a2072657061696444656274496e42617365203e20756e737460448201526a185ad95908185b5bdd5b9d60aa1b606482015260840161086c565b60006130a283610aa1565b9050808560010160008282546130b89190613508565b9250508190555082609b60008282546130d19190613508565b9250508190555080609c60008282546130ea9190613508565b90915550508454604051631a4e1aef60e01b81526000916001600160a01b0380881692631a4e1aef92613123921690879060040161344d565b602060405180830381600087803b15801561313d57600080fd5b505af1158015613151573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317591906133d1565b60a1548754604051630633235d60e41b81526001600160a01b03918216600482015288821660248201526044810188905260648101849052929350169063633235d090608401600060405180830381600087803b1580156131d557600080fd5b505af11580156131e9573d6000803e3d6000fd5b5050875460975460408051898152602081018890526001600160a01b0393841695509290911692507f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef91016117dc565b600054610100900460ff166132605760405162461bcd60e51b815260040161086c90613466565b61104033612c04565b600054610100900460ff166132905760405162461bcd60e51b815260040161086c90613466565b6001606555565b80356001600160a01b03811681146132ae57600080fd5b919050565b6000602082840312156132c4578081fd5b610a9882613297565b600080604083850312156132df578081fd5b6132e883613297565b91506132f660208401613297565b90509250929050565b60008060008060808587031215613314578182fd5b61331d85613297565b966020860135965060408601359560600135945092505050565b60008060408385031215613349578182fd5b61335283613297565b946020939093013593505050565b600080600060608486031215613374578283fd5b61337d84613297565b95602085013595506040909401359392505050565b6000602082840312156133a3578081fd5b815180151581146133b2578182fd5b9392505050565b6000602082840312156133ca578081fd5b5035919050565b6000602082840312156133e2578081fd5b5051919050565b6000806000606084860312156133fd578283fd5b505081359360208301359350604090920135919050565b60008251815b81811015613434576020818601810151858301520161341a565b818111156134425782828501525b509190910192915050565b6001600160a01b03929092168252602082015260400190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082198211156134c4576134c4613554565b500190565b6000826134e457634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561350357613503613554565b500290565b60008282101561351a5761351a613554565b500390565b600060001982141561353357613533613554565b5060010190565b6000600160ff1b82141561355057613550613554565b0390565b634e487b7160e01b600052601160045260246000fdfef35a14688e4794e8022cd9e5c7ec6475a6095ef189dea9647fad0de771465b8aa2646970667358221220a9ef3952a91ac0b6660b6376eb515c58b88260c4f7421c2580b9a5667bae5d7b64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102065760003560e01c80638c64ea4a11610117578063bed06b0b116100a5578063df5ca1f81161006c578063df5ca1f814610658578063e4175aee14610678578063ef6b247914610698578063f0e63edf146106ab578063f2fde38b146106c157005b8063bed06b0b146105d1578063c1be6677146105e4578063c6918a6114610612578063ce9b793014610625578063cff07fd11461064557005b8063a3381d28116100e9578063a3381d2814610509578063afd06b3414610539578063b1ae5ed314610559578063b2a2a96b14610579578063bb94d3db1461059957005b80638c64ea4a1461047e5780638da5cb5b1461049e57806392707802146104bc5780639f2b2833146104dc57005b806334c389ef1161019457806352e83e521161016657806352e83e52146103f05780635ff0253114610406578063715018a614610436578063744f4cf61461044b57806379e20bdc1461045e57005b806334c389ef146103485780634f9e3805146103685780635066f3b51461038857806351dabb75146103c357005b80631b451d28116101d85780631b451d28146102b257806327dfaf92146102d257806328f55a6c146102f25780632d4047e5146103085780632d6f80131461032857005b8063026c42071461020f5780630c7e172514610238578063178483a7146102865780631a39d8ef1461029c57005b3661020d57005b005b34801561021b57600080fd5b50610225609c5481565b6040519081526020015b60405180910390f35b34801561024457600080fd5b5061026e6102533660046132b3565b6099602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161022f565b34801561029257600080fd5b50610225609d5481565b3480156102a857600080fd5b50610225609b5481565b3480156102be57600080fd5b5061020d6102cd3660046132cd565b6106e1565b3480156102de57600080fd5b506102256102ed3660046132cd565b610a1b565b3480156102fe57600080fd5b50610225609e5481565b34801561031457600080fd5b506102256103233660046133b9565b610aa1565b34801561033457600080fd5b506102256103433660046133b9565b610ad1565b34801561035457600080fd5b5061020d610363366004613337565b610aee565b34801561037457600080fd5b5061020d6103833660046133e9565b610d6f565b34801561039457600080fd5b506103a86103a33660046132cd565b610dcd565b6040805193845260208401929092529082015260600161022f565b3480156103cf57600080fd5b506102256103de3660046132b3565b60a46020526000908152604090205481565b3480156103fc57600080fd5b50610225609f5481565b34801561041257600080fd5b50610426610421366004613337565b610f74565b604051901515815260200161022f565b34801561044257600080fd5b5061020d61102e565b61020d6104593660046133b9565b611042565b34801561046a57600080fd5b5061020d610479366004613337565b611640565b34801561048a57600080fd5b5061026e6104993660046133b9565b6117ec565b3480156104aa57600080fd5b506033546001600160a01b031661026e565b3480156104c857600080fd5b5061020d6104d7366004613337565b611816565b3480156104e857600080fd5b506102256104f73660046132b3565b60a56020526000908152604090205481565b34801561051557600080fd5b506104266105243660046132b3565b60986020526000908152604090205460ff1681565b34801561054557600080fd5b5060a15461026e906001600160a01b031681565b34801561056557600080fd5b5061020d6105743660046132b3565b611a31565b34801561058557600080fd5b5061020d6105943660046132cd565b611a8d565b3480156105a557600080fd5b506102256105b43660046132cd565b60a260209081526000928352604080842090915290825290205481565b61020d6105df3660046132ff565b611bde565b3480156105f057600080fd5b506106046105ff366004613337565b612005565b60405161022f92919061344d565b61020d610620366004613337565b61204b565b34801561063157600080fd5b5060975461026e906001600160a01b031681565b61020d610653366004613360565b612200565b34801561066457600080fd5b5061020d6106733660046132b3565b612530565b34801561068457600080fd5b506102256106933660046133b9565b61277c565b61020d6106a6366004613337565b612893565b3480156106b757600080fd5b5061022560a05481565b3480156106cd57600080fd5b5061020d6106dc3660046132b3565b6129c3565b6106e9612a3c565b6001600160a01b03808316600090815260996020526040902054168061079957609a80546001810182556000919091527f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be40180546001600160a01b0319166001600160a01b0384811691821790925560408051928616835260208301919091527f7f03ac7449144076e2d9d5a237c3ff0d0108e0a2ebdd5213c4b0de6f4d4f6953910160405180910390a1610997565b806001600160a01b031663c8dffa956040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d257600080fd5b505afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a91906133d1565b156108755760405162461bcd60e51b815260206004820152603060248201527f7570646174655661756c743a20446562742072656d61696e73206f6e2074686560448201526f1032bc34b9ba34b733903b30bab63a1760811b60648201526084015b60405180910390fd5b609a546000805b8281101561093557836001600160a01b0316609a82815481106108af57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614156109235784609a82815481106108ec57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060019150610935565b8061092d8161351f565b91505061087c565b508061095157634e487b7160e01b600052600160045260246000fd5b604080516001600160a01b038088168252861660208201527f4cc233b502e1e28f371b28114d4a8be87a93f330c18e3c339079fc498320fb8d910160405180910390a150505b506001600160a01b03918216600090815260996020908152604080832080546001600160a01b031990811695871695861790915584845260a38352818420825180840184528581528085018681528254600181810185559388528688209251600290910290920180549094169190981617825595519086015592825260a490522055565b604051636592183b60e01b81526001600160a01b03838116600483015260009190831690636592183b9060240160206040518083038186803b158015610a6057600080fd5b505afa158015610a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9891906133d1565b90505b92915050565b6000609b54600014610acd57609b5482609c54610abe91906134e9565b610ac891906134c9565b610a9b565b5090565b6000609c54600014610acd57609c5482609b54610abe91906134e9565b60008111610b3e5760405162461bcd60e51b815260206004820152601d60248201527f616464446562743a20657874726144656274496e42617365203c3d2030000000604482015260640161086c565b6001600160a01b0380831660009081526099602090815260408083205433845260a2835281842094168084529390915290205480610bb55760405162461bcd60e51b815260206004820152601460248201527330b2322232b13a1d103737903837b9b4ba34b7b760611b604482015260640161086c565b6001600160a01b038216600090815260a360205260408120805483908110610bed57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202019050826001600160a01b031663185cc75133866040518363ffffffff1660e01b8152600401610c2b92919061344d565b602060405180830381600087803b158015610c4557600080fd5b505af1158015610c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7d91906133d1565b50610c888185612a96565b506000610c953385610a1b565b90506000610ca885846001015484612b58565b50905080610d115760405162461bcd60e51b815260206004820152603060248201527f616464446562743a2062616420646562742c2063616e6e6f7420616464206d6f60448201526f3932903232b13a1030b73cb6b7b9329760811b606482015260840161086c565b846001600160a01b0316336001600160a01b031660008051602061356b833981519152610d418660010154610ad1565b600187015460408051928352602083019190915281018690526060015b60405180910390a350505050505050565b610d77612a3c565b609d839055609e829055609f81905560408051848152602081018490529081018290527fe032360dc1790b6d0ffbd119645e134124ea15d2ab7d012f101fe1df3016a52c906060015b60405180910390a1505050565b6001600160a01b03808216600090815260996020908152604080832054868516845260a2835281842094168084529382528083205460a3909252822080549293849384939192849183908110610e3357634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805180820190915260029092020180546001600160a01b03168252600101549181018290529150610e7090610ad1565b604051636592183b60e01b81526001600160a01b038a8116600483015291975090841690636592183b9060240160206040518083038186803b158015610eb557600080fd5b505afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed91906133d1565b6040516312bad57f60e31b8152600481018290529094506001600160a01b038416906395d6abf89060240160206040518083038186803b158015610f3057600080fd5b505afa158015610f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6891906133d1565b94505050509250925092565b6001600160a01b0380831660009081526099602090815260408083205490931680835260a3909152918120805491929183919085908110610fc557634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805180820190915260029092020180546001600160a01b0316825260010154918101829052915061100857600092505050610a9b565b61102482826020015161101f846000015186610a1b565b612b58565b5095945050505050565b611036612a3c565b6110406000612c04565b565b6097546001600160a01b031633146110a85760405162461bcd60e51b8152602060048201526024808201527f537461796b696e673a204e6f742077686974656c69737465642064656c6567616044820152633a37b91760e11b606482015260840161086c565b6000612710609f54609b54846110be9190613508565b6110c891906134e9565b6110d291906134c9565b90508060a060008282546110e691906134b1565b9091555050609a54600090818167ffffffffffffffff81111561111957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611142578160200160208202803683370190505b50905060005b8281101561126557609a818154811061117157634e487b7160e01b600052603260045260246000fd5b6000918252602091829020015460408051630f5f4c7f60e21b815290516001600160a01b0390921692633d7d31fc92600480840193829003018186803b1580156111ba57600080fd5b505afa1580156111ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f291906133d1565b82828151811061121257634e487b7160e01b600052603260045260246000fd5b60200260200101818152505081818151811061123e57634e487b7160e01b600052603260045260246000fd5b60200260200101518461125191906134b1565b93508061125d8161351f565b915050611148565b5060006112728534613508565b90508381106114815760005b838110156113f457609a81815481106112a757634e487b7160e01b600052603260045260246000fd5b60009182526020909120015483516001600160a01b039091169063ad452d75908590849081106112e757634e487b7160e01b600052603260045260246000fd5b6020026020010151609a848154811061131057634e487b7160e01b600052603260045260246000fd5b6000918252602091829020015460408051636d22f63f60e11b815290516001600160a01b039092169263da45ec7e92600480840193829003018186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139191906133d1565b6040518363ffffffff1660e01b81526004016113af91815260200190565b6000604051808303818588803b1580156113c857600080fd5b505af11580156113dc573d6000803e3d6000fd5b505050505080806113ec9061351f565b91505061127e565b50836114008688613508565b61140a9190613508565b609b5560008461141a8734613508565b6114249190613508565b90508015611436576114363382612c56565b337f68f604dad2502091469814ccdd58acac4592d7766a922eee86e6ab9965cfe94988611463888a6134b1565b6040805192835260208301919091520160405180910390a250611638565b60005b838110156115fc576000609a82815481106114af57634e487b7160e01b600052603260045260246000fd5b600091825260208220015485516001600160a01b039091169250879085908790869081106114ed57634e487b7160e01b600052603260045260246000fd5b60200260200101516114ff91906134e9565b61150991906134c9565b6040516315d6dae960e01b8152600481018290529091506000906001600160a01b038416906315d6dae99060240160206040518083038186803b15801561154f57600080fd5b505afa158015611563573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158791906133d1565b60405163ad452d7560e01b8152600481018290529091506001600160a01b0384169063ad452d759084906024016000604051808303818588803b1580156115cd57600080fd5b505af11580156115e1573d6000803e3d6000fd5b505050505050505080806115f49061351f565b915050611484565b506040805187815234602082015233917f68f604dad2502091469814ccdd58acac4592d7766a922eee86e6ab9965cfe949910160405180910390a25b505050505050565b6001600160a01b0380831660009081526099602090815260408083205433845260a28352818420941680845293909152902054806116b95760405162461bcd60e51b81526020600482015260166024820152753932b830bca232b13a1d103737903837b9b4ba34b7b760511b604482015260640161086c565b6001600160a01b038216600090815260a3602052604081208054839081106116f157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202019050600061170d3385610a1b565b905061171b86333088612d08565b611726868587612e18565b604051630724e59160e41b81526001600160a01b0385169063724e591090611754903390899060040161344d565b600060405180830381600087803b15801561176e57600080fd5b505af1158015611782573d6000803e3d6000fd5b50505050836001600160a01b0316336001600160a01b031660008051602061356b8339815191526117b68560010154610ad1565b60018601546117c58a87613508565b604080519384526020840192909252908201526060015b60405180910390a3505050505050565b609a81815481106117fc57600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526098602052604090205460ff1661187f5760405162461bcd60e51b815260206004820152602160248201527f537461796b696e673a204e6f742077686974656c6973746564204b696c6c65726044820152601760f91b606482015260840161086c565b6001600160a01b0380831660009081526099602090815260408083205490931680835260a39091529181208054849081106118ca57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201905060008160010154116119275760405162461bcd60e51b815260206004820152601660248201527535b4b6361d103932b6b7bb32b2103837b9b4ba34b7b760511b604482015260640161086c565b805460009061193f906001600160a01b031684610a1b565b905060008061195385856001015485612b58565b91509150816119a45760405162461bcd60e51b815260206004820152601a60248201527f6b696c6c3a207374696c6c207361666520706f736974696f6e2e000000000000604482015260640161086c565b60006119b08587612f24565b85549091506001600160a01b0316337f62b067e31c5a2d2734bc19924c46c930e1b7063b5b473238f2f8bb7ab88a15b6886119eb8686613508565b60018a0154604080516001600160a01b039094168452602084019290925290820187905260608201899052608082015260a0015b60405180910390a35050505050505050565b611a39612a3c565b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527fc46722a14b09e7b7e59991ec89fb4bb88ffed57f1b2187a65e959f5c0053716d9060200160405180910390a150565b600054610100900460ff1615808015611aad5750600054600160ff909116105b80611ac75750303b158015611ac7575060005460ff166001145b611b2a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161086c565b6000805460ff191660011790558015611b4d576000805461ff0019166101001790555b611b55612fd5565b611b5d613004565b611b73662386f26fc10000611d4c610bb8610d6f565b60a180546001600160a01b0319166001600160a01b038416179055611b9783611a31565b8015611bd9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610dc0565b505050565b6001600160a01b0380851660009081526099602090815260408083205433845260a2835281842094168084529390915290205480611c5e5760405162461bcd60e51b815260206004820152601b60248201527f6368616e6765506f736974696f6e3a206e6f20706f736974696f6e0000000000604482015260640161086c565b6000806000808812611cd35787341015611cc65760405162461bcd60e51b8152602060048201526024808201527f6368616e6765506f736974696f6e3a204e6f7420656e6f756768206d73672e76604482015263616c756560e01b606482015260840161086c565b8734039250879150611cdf565b611cdc8861353a565b90505b6000871315611d7a5760405163185cc75160e01b81526001600160a01b0386169063185cc75190611d169033908b9060040161344d565b602060405180830381600087803b158015611d3057600080fd5b505af1158015611d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6891906133d1565b50611d7387836134b1565b9150611d99565b6000871215611d9957611d8c8761353a565b611d9690826134b1565b90505b8515611e0c57611dab89333089612d08565b604051630724e59160e41b81526001600160a01b0386169063724e591090611dd99033908a9060040161344d565b600060405180830381600087803b158015611df357600080fd5b505af1158015611e07573d6000803e3d6000fd5b505050505b8215611e9757604051639d2e6fcb60e01b81526001600160a01b03861690639d2e6fcb908590611e4390339060019060040161344d565b6020604051808303818588803b158015611e5c57600080fd5b505af1158015611e70573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611e9591906133d1565b505b6001600160a01b038516600090815260a360205260408120805486908110611ecf57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202019050818310611eff57611ef981611ef48486613508565b612a96565b50611f2b565b611f2b8187611f0e8686613508565b60008c12611f1d576000613033565b611f268c61353a565b613033565b6000611f373388610a1b565b90506000611f4a88846001015484612b58565b50905080611f9a5760405162461bcd60e51b815260206004820152601860248201527f6368616e6765506f736974696f6e3a2062616420646562740000000000000000604482015260640161086c565b876001600160a01b0316336001600160a01b031660008051602061356b833981519152611fca8660010154610ad1565b8660010154611fd9338e610a1b565b6040805193845260208401929092529082015260600160405180910390a3505050505050505050505050565b60a3602052816000526040600020818154811061202157600080fd5b6000918252602090912060029091020180546001909101546001600160a01b039091169250905082565b6001600160a01b0380831660009081526099602090815260408083205433845260a28352818420941680845293909152902054806120cb5760405162461bcd60e51b815260206004820152601c60248201527f726570617944656274496e426173653a206e6f20706f736974696f6e00000000604482015260640161086c565b6001600160a01b038216600090815260a36020526040812080548390811061210357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202019050600061211f3385610a1b565b90506000846001600160a01b0316639d2e6fcb3433896040518463ffffffff1660e01b815260040161215292919061344d565b6020604051808303818588803b15801561216b57600080fd5b505af115801561217f573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906121a491906133d1565b9050846001600160a01b0316336001600160a01b031660008051602061356b8339815191526121d68660010154610ad1565b60018701546121e58688613508565b60408051938452602084019290925290820152606001610d5e565b6001600160a01b0380841660009081526099602090815260408083205433845260a283528184209416808452939091529020541561228b5760405162461bcd60e51b815260206004820152602260248201527f616464506f736974696f6e3a20616c7265616479206861766520706f7369746960448201526137b760f11b606482015260840161086c565b3483146122da5760405162461bcd60e51b815260206004820181905260248201527f616464506f736974696f6e3a206d73672e76616c756520213d20657175697479604482015260640161086c565b60006122e683856134b1565b9050609e54816122f691906134e9565b612302846127106134e9565b106123635760405162461bcd60e51b815260206004820152602b60248201527f616464506f736974696f6e3a2062616420646562742c2063616e6e6f74206f7060448201526a32b7103837b9b4ba34b7b760a91b606482015260840161086c565b60008084116123735760006123f3565b60405163185cc75160e01b81526001600160a01b0384169063185cc751906123a1903390889060040161344d565b602060405180830381600087803b1580156123bb57600080fd5b505af11580156123cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f391906133d1565b6001600160a01b03848116600081815260a360209081526040808320815180830183523381528084018581528254600180820185559387528587209251600290910290920180546001600160a01b03191692909816919091178755519581019590955592825260a4905290812080549394509061247083856134b1565b909155505033600090815260a2602090815260408083206001600160a01b0388168452825280832084905560a3909152812080546124db9190849081106124c757634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020185612a96565b6040805189815260208101899052908101859052606081018290529091506001600160a01b0386169033907f92b0fd5c6dbe6ec5b43a8afae4c587c1db47afcca43a21b7800bd848fcf8e49690608001611a1f565b6001600160a01b0380821660009081526099602090815260408083205490931680835260a3825283832033845260a28352848420828552909252928220548154811061258c57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201905060008160010154116126035760405162461bcd60e51b815260206004820152602a60248201527f72656d6f7665506f736974696f6e3a204e6f20706f736974696f6e20666f72206044820152693a3434b9903a37b5b2b760b11b606482015260840161086c565b600061260f3384610a1b565b6040516312bad57f60e31b8152600481018290529091506000906001600160a01b038516906395d6abf89060240160206040518083038186803b15801561265557600080fd5b505afa158015612669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268d91906133d1565b9050600061269b8486612f24565b9050818110156126ed5760405162461bcd60e51b815260206004820152601860248201527f72656d6f7665506f736974696f6e3a2042616420646562740000000000000000604482015260640161086c565b6001600160a01b038516337f3cb91b4d61d4fefa96da17651a09b54f7b6751cb68d11134cf0efe0a496579686127238585613508565b600188015460408051928352602083018890528201889052606082015260800160405180910390a3505033600090815260a2602090815260408083206001600160a01b0396909616835294905292832092909255505050565b600080609b548361278d9190613508565b90506000612710609f54836127a291906134e9565b6127ac91906134c9565b609a549091506000805b8281101561287e57609a81815481106127df57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020015460408051630f5f4c7f60e21b815290516001600160a01b0390921692633d7d31fc92600480840193829003018186803b15801561282857600080fd5b505afa15801561283c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286091906133d1565b61286a90836134b1565b9150806128768161351f565b9150506127b6565b5061288981846134b1565b9695505050505050565b6001600160a01b0380831660009081526099602090815260408083205433845260a283528184209416808452939091529020548061290c5760405162461bcd60e51b815260206004820152601660248201527530b23222b8bab4ba3c9d103737903837b9b4ba34b7b760511b604482015260640161086c565b6001600160a01b038216600090815260a36020526040812080548390811061294457634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201905061295e8185612a96565b50826001600160a01b0316336001600160a01b031660008051602061356b83398151915261298f8460010154610ad1565b846001015461299e3389610a1b565b6040805193845260208401929092529082015260600160405180910390a35050505050565b6129cb612a3c565b6001600160a01b038116612a305760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161086c565b612a3981612c04565b50565b6033546001600160a01b031633146110405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161086c565b6000612aa182610aa1565b905080836001016000828254612ab791906134b1565b9250508190555081609b6000828254612ad091906134b1565b9250508190555080609c6000828254612ae991906134b1565b9091555050609754612b04906001600160a01b031683612c56565b825460975460408051858152602081018590526001600160a01b0393841693909216917f63602d0ecc7b3a0ef7ff1a116e23056662d64280355ba8031b6d0d767c4b4458910160405180910390a392915050565b6040516312bad57f60e31b81526004810182905260009081906001600160a01b038616906395d6abf89060240160206040518083038186803b158015612b9d57600080fd5b505afa158015612bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd591906133d1565b9050609e54612be385610ad1565b612bed91906134e9565b612bf9826127106134e9565b109150935093915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516000808252602082019092526001600160a01b038416908390604051612c809190613414565b60006040518083038185875af1925050503d8060008114612cbd576040519150601f19603f3d011682016040523d82523d6000602084013e612cc2565b606091505b5050905080611bd95760405162461bcd60e51b815260206004820152601260248201527121736166655472616e7366657245564d4f5360701b604482015260640161086c565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691612d6c9190613414565b6000604051808303816000865af19150503d8060008114612da9576040519150601f19603f3d011682016040523d82523d6000602084013e612dae565b606091505b5091509150818015612dd8575080511580612dd8575080806020019051810190612dd89190613392565b6116385760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b604482015260640161086c565b600080846001600160a01b031663095ea7b38585604051602401612e3d92919061344d565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612e769190613414565b6000604051808303816000865af19150503d8060008114612eb3576040519150601f19603f3d011682016040523d82523d6000602084013e612eb8565b606091505b5091509150818015612ee2575080511580612ee2575080806020019051810190612ee29190613392565b612f1d5760405162461bcd60e51b815260206004820152600c60248201526b2173616665417070726f766560a01b604482015260640161086c565b5050505050565b815460405163b95d4ae160e01b81526001600160a01b03918216600482015260009182919084169063b95d4ae19060240160206040518083038186803b158015612f6d57600080fd5b505afa158015612f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa591906133d1565b9050612fb48460010154610ad1565b9150612fce8484612fc88760010154610ad1565b84613033565b5092915050565b600054610100900460ff16612ffc5760405162461bcd60e51b815260040161086c90613466565b611040613239565b600054610100900460ff1661302b5760405162461bcd60e51b815260040161086c90613466565b611040613269565b818111156130975760405162461bcd60e51b815260206004820152602b60248201527f756e7374616b653a2072657061696444656274496e42617365203e20756e737460448201526a185ad95908185b5bdd5b9d60aa1b606482015260840161086c565b60006130a283610aa1565b9050808560010160008282546130b89190613508565b9250508190555082609b60008282546130d19190613508565b9250508190555080609c60008282546130ea9190613508565b90915550508454604051631a4e1aef60e01b81526000916001600160a01b0380881692631a4e1aef92613123921690879060040161344d565b602060405180830381600087803b15801561313d57600080fd5b505af1158015613151573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317591906133d1565b60a1548754604051630633235d60e41b81526001600160a01b03918216600482015288821660248201526044810188905260648101849052929350169063633235d090608401600060405180830381600087803b1580156131d557600080fd5b505af11580156131e9573d6000803e3d6000fd5b5050875460975460408051898152602081018890526001600160a01b0393841695509290911692507f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef91016117dc565b600054610100900460ff166132605760405162461bcd60e51b815260040161086c90613466565b61104033612c04565b600054610100900460ff166132905760405162461bcd60e51b815260040161086c90613466565b6001606555565b80356001600160a01b03811681146132ae57600080fd5b919050565b6000602082840312156132c4578081fd5b610a9882613297565b600080604083850312156132df578081fd5b6132e883613297565b91506132f660208401613297565b90509250929050565b60008060008060808587031215613314578182fd5b61331d85613297565b966020860135965060408601359560600135945092505050565b60008060408385031215613349578182fd5b61335283613297565b946020939093013593505050565b600080600060608486031215613374578283fd5b61337d84613297565b95602085013595506040909401359392505050565b6000602082840312156133a3578081fd5b815180151581146133b2578182fd5b9392505050565b6000602082840312156133ca578081fd5b5035919050565b6000602082840312156133e2578081fd5b5051919050565b6000806000606084860312156133fd578283fd5b505081359360208301359350604090920135919050565b60008251815b81811015613434576020818601810151858301520161341a565b818111156134425782828501525b509190910192915050565b6001600160a01b03929092168252602082015260400190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082198211156134c4576134c4613554565b500190565b6000826134e457634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561350357613503613554565b500290565b60008282101561351a5761351a613554565b500390565b600060001982141561353357613533613554565b5060010190565b6000600160ff1b82141561355057613550613554565b0390565b634e487b7160e01b600052601160045260246000fdfef35a14688e4794e8022cd9e5c7ec6475a6095ef189dea9647fad0de771465b8aa2646970667358221220a9ef3952a91ac0b6660b6376eb515c58b88260c4f7421c2580b9a5667bae5d7b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accrue(uint256)": {
        "details": "msg.value = all of staking reward ",
        "params": {
          "totalStaked": "current total staked EVMOS before distributed"
        }
      },
      "addDebt(address,uint256)": {
        "details": "Borrow more debt (increase debt ratio)",
        "params": {
          "debtToken": "debtToken Address (not vault address)",
          "extraDebtInBase": "amount of additional debt in EVMOS"
        }
      },
      "addEquity(address,uint256)": {
        "details": "add additional equity (decrease debt ratio)",
        "params": {
          "debtToken": "debtToken Address (not vault address)",
          "extraEquity": "amount of additional equity"
        }
      },
      "addPosition(address,uint256,uint256)": {
        "params": {
          "debtInBase": "debtAmount in EVMOS",
          "debtToken": "debtToken Address (not vault address)",
          "equity": "equityAmount in EVMOS"
        }
      },
      "changePosition(address,int256,int256,uint256)": {
        "details": "(msg.value - changeEquityInBase) equals to repayDebtInBase - position value not changes (not call _stake/_unstake function) - decrease debt ratioUser should approve this firstif msg.value > 0, changeEquityInBase >= 0 since msg.value = changeEquityInBase + repayDebtInBase"
      },
      "getAccruedValue(uint256)": {
        "params": {
          "totalStaked": "current total staked EVMOS (= last total amount + reward)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "positionInfo(address,address)": {
        "details": "returns position's value & debt value position value: positionValueInBase equity value: positionValueInBase - debtInBase debt value: debtInBase debt ratio: debtInBase / positionValueInBase * 100(%) kill factor: killFactorBps / 100 safety buffer: (kill factor) - (debt ratio)"
      },
      "removePosition(address)": {
        "details": "remove all position of debtToken vault.",
        "params": {
          "debtToken": "debtToken Address (not vault address)"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repayDebt(address,uint256)": {
        "details": "Repay debt (decrease debt ratio, total staked amount(or share) does not change)",
        "params": {
          "debtToken": "debtToken Address (not vault address)",
          "repaidDebt": "amount of repaid debt in debtToken"
        }
      },
      "repayDebtInBase(address,uint256)": {
        "details": "Repay debt with EVMOS (decrease debt ratio, total staked amount(or share) does not change)",
        "params": {
          "debtToken": "debtToken Address (not vault address)",
          "minRepaid": "minimum value to be repaid"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "minDebtInBase": {
        "details": "min debtAmount in EVMOS (base token)"
      },
      "positionIdOf": {
        "details": "userAddress => vaultAddress => positionId (array Index of position)"
      },
      "positions": {
        "details": "vaultAddress => Position[]"
      },
      "reservedPool": {
        "details": "EVMOS amount reserved by Protocol"
      },
      "totalAmount": {
        "details": "kor) 유저가 예치한 금액 + auto-compound된 금액"
      },
      "totalShare": {
        "details": "kor) auto-compound되어도 totalShare는 변하지 않음.  유저는 예치하는 시점에 (예치 금액/totalAmount) * totalShare에 해당하는 share를 받음."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "amountToShare(uint256)": {
        "notice": "유저는 예치하는 시점에 (예치 금액 / totalAmount) * totalShare에 해당하는 share를 받음."
      },
      "changePosition(address,int256,int256,uint256)": {
        "notice": "change position value case 1. changeEquityInBase > 0  - increase position value (call _stake function) - decrease debt ratio case 2. changeEquityInBase < 0  - decrease position value (call _unstake function) - increase debt ratio case 3. changeDebt > 0 (borrow more debt) - increase position value (call _stake function) - increase debt ratio case 4. changeEquity < 0 (repay debt by unstaking) - decrease position value (call _unstake function) - decrease debt ratio case 5. repayDebt > 0 (repay debt with user's own token)  or msg.value > 0 (repay debt with user's own EVMOS)"
      },
      "removePosition(address)": {
        "notice": "kor) 부채비율이 100%가 넘어가면 포지션을 직접 종료할 수 없다. -> 강제 청산만 가능."
      },
      "repayDebt(address,uint256)": {
        "notice": "user should repay debt using debtTokenuser approve should be preceded"
      },
      "repayDebtInBase(address,uint256)": {
        "notice": "repaidDebtInBase = msg.value"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2413,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2416,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1178,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2681,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2801,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2816,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 2860,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3980,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "delegator",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 3984,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "whitelistedKiller",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3989,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "tokenToVault",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3992,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "vaults",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3995,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "totalAmount",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 3998,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "totalShare",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 4002,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "minDebtInBase",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 4005,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "killFactorBps",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 4008,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "reservedBps",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 4011,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "reservedPool",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 4014,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "uEVMOS",
        "offset": 0,
        "slot": "161",
        "type": "t_contract(IUnbondedEvmos)665"
      },
      {
        "astId": 4027,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "positionIdOf",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4034,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "positions",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_address,t_array(t_struct(Position)4020_storage)dyn_storage)"
      },
      {
        "astId": 4038,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "positionsLengthOf",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4042,
        "contract": "contracts/token/Stayking.sol:Stayking",
        "label": "totalDebtOf",
        "offset": 0,
        "slot": "165",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Position)4020_storage)dyn_storage": {
        "base": "t_struct(Position)4020_storage",
        "encoding": "dynamic_array",
        "label": "struct Stayking.Position[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUnbondedEvmos)665": {
        "encoding": "inplace",
        "label": "contract IUnbondedEvmos",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(Position)4020_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Stayking.Position[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Position)4020_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Position)4020_storage": {
        "encoding": "inplace",
        "label": "struct Stayking.Position",
        "members": [
          {
            "astId": 4016,
            "contract": "contracts/token/Stayking.sol:Stayking",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4019,
            "contract": "contracts/token/Stayking.sol:Stayking",
            "label": "share",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}